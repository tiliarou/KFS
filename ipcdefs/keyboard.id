# Autogenerated enum representing the HID keyboard scancode.
type sunrise_libuser::keyboard::HidKeyboardScancode = enum<u8> {
    # The None key (scancode: 0x00)
    None = 0x00;
    # The ErrOvf key (scancode: 0x01)
    ErrOvf = 0x01;
    # The A key (scancode: 0x04)
    A = 0x04;
    # The B key (scancode: 0x05)
    B = 0x05;
    # The C key (scancode: 0x06)
    C = 0x06;
    # The D key (scancode: 0x07)
    D = 0x07;
    # The E key (scancode: 0x08)
    E = 0x08;
    # The F key (scancode: 0x09)
    F = 0x09;
    # The G key (scancode: 0x0a)
    G = 0x0a;
    # The H key (scancode: 0x0b)
    H = 0x0b;
    # The I key (scancode: 0x0c)
    I = 0x0c;
    # The J key (scancode: 0x0d)
    J = 0x0d;
    # The K key (scancode: 0x0e)
    K = 0x0e;
    # The L key (scancode: 0x0f)
    L = 0x0f;
    # The M key (scancode: 0x10)
    M = 0x10;
    # The N key (scancode: 0x11)
    N = 0x11;
    # The O key (scancode: 0x12)
    O = 0x12;
    # The P key (scancode: 0x13)
    P = 0x13;
    # The Q key (scancode: 0x14)
    Q = 0x14;
    # The R key (scancode: 0x15)
    R = 0x15;
    # The S key (scancode: 0x16)
    S = 0x16;
    # The T key (scancode: 0x17)
    T = 0x17;
    # The U key (scancode: 0x18)
    U = 0x18;
    # The V key (scancode: 0x19)
    V = 0x19;
    # The W key (scancode: 0x1a)
    W = 0x1a;
    # The X key (scancode: 0x1b)
    X = 0x1b;
    # The Y key (scancode: 0x1c)
    Y = 0x1c;
    # The Z key (scancode: 0x1d)
    Z = 0x1d;
    # The Number1 key (scancode: 0x1e)
    Number1 = 0x1e;
    # The Number2 key (scancode: 0x1f)
    Number2 = 0x1f;
    # The Number3 key (scancode: 0x20)
    Number3 = 0x20;
    # The Number4 key (scancode: 0x21)
    Number4 = 0x21;
    # The Number5 key (scancode: 0x22)
    Number5 = 0x22;
    # The Number6 key (scancode: 0x23)
    Number6 = 0x23;
    # The Number7 key (scancode: 0x24)
    Number7 = 0x24;
    # The Number8 key (scancode: 0x25)
    Number8 = 0x25;
    # The Number9 key (scancode: 0x26)
    Number9 = 0x26;
    # The Number0 key (scancode: 0x27)
    Number0 = 0x27;
    # The Enter key (scancode: 0x28)
    Enter = 0x28;
    # The Esc key (scancode: 0x29)
    Esc = 0x29;
    # The Backspace key (scancode: 0x2a)
    Backspace = 0x2a;
    # The Tab key (scancode: 0x2b)
    Tab = 0x2b;
    # The Space key (scancode: 0x2c)
    Space = 0x2c;
    # The Minus key (scancode: 0x2d)
    Minus = 0x2d;
    # The Equal key (scancode: 0x2e)
    Equal = 0x2e;
    # The Leftbrace key (scancode: 0x2f)
    Leftbrace = 0x2f;
    # The Rightbrace key (scancode: 0x30)
    Rightbrace = 0x30;
    # The Backslash key (scancode: 0x31)
    Backslash = 0x31;
    # The Hashtilde key (scancode: 0x32)
    Hashtilde = 0x32;
    # The Semicolon key (scancode: 0x33)
    Semicolon = 0x33;
    # The Apostrophe key (scancode: 0x34)
    Apostrophe = 0x34;
    # The Grave key (scancode: 0x35)
    Grave = 0x35;
    # The Comma key (scancode: 0x36)
    Comma = 0x36;
    # The Dot key (scancode: 0x37)
    Dot = 0x37;
    # The Slash key (scancode: 0x38)
    Slash = 0x38;
    # The CapsLock key (scancode: 0x39)
    CapsLock = 0x39;
    # The F1 key (scancode: 0x3a)
    F1 = 0x3a;
    # The F2 key (scancode: 0x3b)
    F2 = 0x3b;
    # The F3 key (scancode: 0x3c)
    F3 = 0x3c;
    # The F4 key (scancode: 0x3d)
    F4 = 0x3d;
    # The F5 key (scancode: 0x3e)
    F5 = 0x3e;
    # The F6 key (scancode: 0x3f)
    F6 = 0x3f;
    # The F7 key (scancode: 0x40)
    F7 = 0x40;
    # The F8 key (scancode: 0x41)
    F8 = 0x41;
    # The F9 key (scancode: 0x42)
    F9 = 0x42;
    # The F10 key (scancode: 0x43)
    F10 = 0x43;
    # The F11 key (scancode: 0x44)
    F11 = 0x44;
    # The F12 key (scancode: 0x45)
    F12 = 0x45;
    # The SysRQ key (scancode: 0x46)
    SysRQ = 0x46;
    # The ScrollLock key (scancode: 0x47)
    ScrollLock = 0x47;
    # The Pause key (scancode: 0x48)
    Pause = 0x48;
    # The Insert key (scancode: 0x49)
    Insert = 0x49;
    # The Home key (scancode: 0x4a)
    Home = 0x4a;
    # The PageUp key (scancode: 0x4b)
    PageUp = 0x4b;
    # The Delete key (scancode: 0x4c)
    Delete = 0x4c;
    # The End key (scancode: 0x4d)
    End = 0x4d;
    # The PageDown key (scancode: 0x4e)
    PageDown = 0x4e;
    # The Right key (scancode: 0x4f)
    Right = 0x4f;
    # The Left key (scancode: 0x50)
    Left = 0x50;
    # The Down key (scancode: 0x51)
    Down = 0x51;
    # The Up key (scancode: 0x52)
    Up = 0x52;
    # The Numlock key (scancode: 0x53)
    NumLock = 0x53;
    # The Kpslash key (scancode: 0x54)
    Kpslash = 0x54;
    # The Kpasterisk key (scancode: 0x55)
    Kpasterisk = 0x55;
    # The Kpminus key (scancode: 0x56)
    Kpminus = 0x56;
    # The Kpplus key (scancode: 0x57)
    Kpplus = 0x57;
    # The Kpenter key (scancode: 0x58)
    Kpenter = 0x58;
    # The Kp1 key (scancode: 0x59)
    Kp1 = 0x59;
    # The Kp2 key (scancode: 0x5a)
    Kp2 = 0x5a;
    # The Kp3 key (scancode: 0x5b)
    Kp3 = 0x5b;
    # The Kp4 key (scancode: 0x5c)
    Kp4 = 0x5c;
    # The Kp5 key (scancode: 0x5d)
    Kp5 = 0x5d;
    # The Kp6 key (scancode: 0x5e)
    Kp6 = 0x5e;
    # The Kp7 key (scancode: 0x5f)
    Kp7 = 0x5f;
    # The Kp8 key (scancode: 0x60)
    Kp8 = 0x60;
    # The Kp9 key (scancode: 0x61)
    Kp9 = 0x61;
    # The Kp0 key (scancode: 0x62)
    Kp0 = 0x62;
    # The Kpdot key (scancode: 0x63)
    Kpdot = 0x63;
    # The 102nd key (scancode: 0x64)
    Key102nd = 0x64;
    # The Compose key (scancode: 0x65)
    Compose = 0x65;
    # The Power key (scancode: 0x66)
    Power = 0x66;
    # The Kpequal key (scancode: 0x67)
    Kpequal = 0x67;
    # The F13 key (scancode: 0x68)
    F13 = 0x68;
    # The F14 key (scancode: 0x69)
    F14 = 0x69;
    # The F15 key (scancode: 0x6a)
    F15 = 0x6a;
    # The F16 key (scancode: 0x6b)
    F16 = 0x6b;
    # The F17 key (scancode: 0x6c)
    F17 = 0x6c;
    # The F18 key (scancode: 0x6d)
    F18 = 0x6d;
    # The F19 key (scancode: 0x6e)
    F19 = 0x6e;
    # The F20 key (scancode: 0x6f)
    F20 = 0x6f;
    # The F21 key (scancode: 0x70)
    F21 = 0x70;
    # The F22 key (scancode: 0x71)
    F22 = 0x71;
    # The F23 key (scancode: 0x72)
    F23 = 0x72;
    # The F24 key (scancode: 0x73)
    F24 = 0x73;
    # The Open key (scancode: 0x74)
    Open = 0x74;
    # The Help key (scancode: 0x75)
    Help = 0x75;
    # The Props key (scancode: 0x76)
    Props = 0x76;
    # The Front key (scancode: 0x77)
    Front = 0x77;
    # The Stop key (scancode: 0x78)
    Stop = 0x78;
    # The Again key (scancode: 0x79)
    Again = 0x79;
    # The Undo key (scancode: 0x7a)
    Undo = 0x7a;
    # The Cut key (scancode: 0x7b)
    Cut = 0x7b;
    # The Copy key (scancode: 0x7c)
    Copy = 0x7c;
    # The Paste key (scancode: 0x7d)
    Paste = 0x7d;
    # The Find key (scancode: 0x7e)
    Find = 0x7e;
    # The Mute key (scancode: 0x7f)
    Mute = 0x7f;
    # The Volumeup key (scancode: 0x80)
    VolumeUp = 0x80;
    # The Volumedown key (scancode: 0x81)
    VolumeDown = 0x81;
    # The CapsLockActive key (scancode: 0x82 )
    CapsLockActive = 0x82;
    # The NumLockActive key (scancode: 0x83 )
    NumLockActive = 0x83;
    # The ScrollLockActive key (scancode: 0x84 )
    ScrollLockActive = 0x84;
    # The Kpcomma key (scancode: 0x85)
    KPcomma = 0x85;
    # The Kpleftparen key (scancode: 0xb6)
    KPleftParen = 0xb6;
    # The Kprightparen key (scancode: 0xb7)
    KPrightParen = 0xb7;
    # The LeftCtrl key (scancode: 0xe0)
    LeftCtrl = 0xe0;
    # The LeftShift key (scancode: 0xe1)
    LeftShift = 0xe1;
    # The LeftQlt key (scancode: 0xe2)
    LeftAlt = 0xe2;
    # The LeftMeta key (scancode: 0xe3)
    LeftMeta = 0xe3;
    # The RightCtrl key (scancode: 0xe4)
    RightCtrl = 0xe4;
    # The RightShift key (scancode: 0xe5)
    RightShift = 0xe5;
    # The RightAlt key (scancode: 0xe6)
    RightAlt = 0xe6;
    # The RightMeta key (scancode: 0xe7)
    RightMeta = 0xe7;
    # The MediaPlayPause key (scancode: 0xe8)
    MediaPlayPause = 0xe8;
    # The MediaStopCd key (scancode: 0xe9)
    MediaStopCd = 0xe9;
    # The MediaPreviousSong key (scancode: 0xea)
    MediaPreviousSong = 0xea;
    # The MediaNextSong key (scancode: 0xeb)
    MediaNextSong = 0xeb;
    # The MediaEjectCd key (scancode: 0xec)
    MediaEjectCd = 0xec;
    # The MediaVolumeUp key (scancode: 0xed)
    MediaVolumeUp = 0xed;
    # The MediaVolumeDown key (scancode: 0xee)
    MediaVolumeDown = 0xee;
    # The MediaMute key (scancode: 0xef)
    MediaMute = 0xef;
    # The MediaWWW key (scancode: 0xf0)
    MediaWWW = 0xf0;
    # The MediaBack key (scancode: 0xf1)
    MediaBack = 0xf1;
    # The MediaForward key (scancode: 0xf2)
    MediaForward = 0xf2;
    # The MediaStop key (scancode: 0xf3)
    MediaStop = 0xf3;
    # The MediaFind key (scancode: 0xf4)
    MediaFind = 0xf4;
    # The MediaScrollUp key (scancode: 0xf5)
    MediaScrollUp = 0xf5;
    # The MediaScrollDown key (scancode: 0xf6)
    MediaScrollDown = 0xf6;
    # The MediaEdit key (scancode: 0xf7)
    MediaEdit = 0xf7;
    # The MediaSleep key (scancode: 0xf8)
    MediaSleep = 0xf8;
    # The MediaCoffee key (scancode: 0xf9)
    MediaCoffee = 0xf9;
    # The MediaRefresh key (scancode: 0xfa)
    MediaRefresh = 0xfa;
    # The MediaCalc key (scancode: 0xfb)
    MediaCalc = 0xfb;
};

# Define the type of the data contained in HidKeyboardState.
type sunrise_libuser::keyboard::HidKeyboardStateType = enum<u8> {
    # This entry is a scancode, the field data contains a scancode.
    Scancode = 0;
    # This entry is an ascii char, the field data contains an ascii char.
    Ascii = 1;
    # This entry is an old PS2 control key that cannot be mapped as a scancode or char value.
    Control = 2;
    # This entry is unknown.
    Unknown = 3;
};

# Define the state returned by read_keyboard_state.
type sunrise_libuser::keyboard::HidKeyboardState = struct<0x4> {
    # A key or a scancode
    u8 data;
    # Additional data used for upper key when HidKeyboardStateType is ASCII.
    u8 additional_data;
    # The type of the data before.
    sunrise_libuser::keyboard::HidKeyboardStateType state_type;

    # Keyboard modifiers
    #
    # # Mapping:
    # - BIT(0) = is_capslocked
    # - BIT(1) = is_left_shift
    # - BIT(2) = is_right_shift
    # - BIT(3) = is_left_ctrl
    # - BIT(4) = is_right_ctrl
    # - BIT(5) = is_left_alt
    # - BIT(6) = is_right_alt
    # - BIT(7) = is_pressed
    u8 modifiers;
};


# Keyboard interface
interface sunrise_libuser::keyboard::StaticService is kbrd:u {
    # Get an handle to an event triggered on keyboard update.
    [1] get_keyboard_event() -> handle<copy>;

    # Read the x last pressed keys into the given buffer.
    # A size is returned to indicate the number of states written in the buffer.
    [2] read_keyboard_states() -> (u64, array<sunrise_libuser::keyboard::HidKeyboardState, 0x6>);
}