var N=null,E="",T="t",U="u",searchIndex={};
var R=["kfs_libutils","A minimal Cursor for writing, for use in libcore.","Data backing this cursor.","Position of the cursor in the data.","Reads from this Io.","Read from this Io, and mask the value with `flags`.","Writes `value` to this Io.","CursorWrite","CursorRead","usize","Creates a new cursor wrapping the provided underlying…","Returns the current position of this cursor.","try_from","try_into","borrow_mut","kfs_libutils::io","result","type_id","borrow","typeid","formatter","ReadOnly","WriteOnly","BitArrayExt","kfs_libkern","kernelerror","SYSCALL_NAMES","Mapped by kernel capability parsing in `create_process`…","Mapped using `map_memory` syscall.","Mapped using `map_transfer_memory` syscall when the owning…","Mapped using `control_code_memory` syscall.","memoryattributes","Returns an empty set of flags.","Returns the set containing all flags.","memorypermissions","Returns the raw value of the flags currently stored.","from_bits","Convert from underlying bit representation, unless that…","from_bits_truncate","Convert from underlying bit representation, dropping any…","is_empty","Returns `true` if no flags are currently stored.","Returns `true` if all flags are currently set.","intersects","Returns `true` if there are flags common to both `self`…","contains","Returns `true` all of the flags in `other` are contained…","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the…","kfs_libkern::error","BORROWED","IPC_MAPPED","DEVICE_MAPPED","UNCACHED","READABLE","WRITABLE","EXECUTABLE","memorytype","assert_receiver_is_total_eq","ordering","partial_cmp","Returns the set difference of the two sets of flags.","sub_assign","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags…","bitand_assign","Disables all flags disabled in the set.","bitor_assign","Adds the set of flags.","bitxor_assign","Toggles the set of flags.","from_iter","default","MemoryType","MemoryAttributes","MemoryPermissions","MemoryInfo","KernelError","option","kfs_bootstrap","__private_field","privilegelevel","kfs_bootstrap::gdt","segmentselector","descriptortablepointer","kfs_bootstrap::gdt::i386::instructions","kfs_bootstrap::gdt::i386","MAIN_TASK","FAULT_TASK","descriptortableentry","Creates an empty GDT descriptor, but with some flags set…","descriptortable","Gets the address as a `usize`.","physicaladdress","Rounds down to PAGE_SIZE.","Rounds up PAGE_SIZE.","virtualaddress","directory_physical_address","EntryFlags","The flags of a table entry","entryflags","pagestate","kfs_bootstrap::paging","ActivePageTables","The page tables set currently in use.","InactivePageTables","A set of PageTables that are not the ones currently in…","PagingOffPageSet","Used at startup when paging is off to create and…","MappingType","The type of a Virtual Memory mapping. Can either be…","i386 page table entry","An entry in a page table or page directory. An unused…","PageState","Represent the current state of this Page Table Entry: It…","Available","ENTRY_PHYS_ADDRESS_MASK","USER_ACCESSIBLE","WRITE_THROUGH","HUGE_PAGE","GUARD_PAGE","IS_FRAME_ALLOC","USER_DEFINED_3","is_unused","Is the entry unused ?","set_unused","Clear the entry","Is the entry a page guard ?","Get the current entry flags","pointed_frame","Get the associated physical address, if available","Sets the entry","set_guard","Make this entry a page guard","Move the value T out of the PageState if it is Present(T).","Maps a PageState to PageState by applying a function to a…","as_option","Turns the PageState into an Option, setting both Guarded…","kfs_bootstrap::paging::table","i386entryflags","Used at startup when creating the first page tables.","FlusherType","smarthierarchicaltable","Creates a mapping in the page tables with the given flags","find_available_virtual_space_aligned","Finds a virtual space hole that can contain page_nb…","Creates a mapping in the page tables with the given flags.…","flush_cache","inactivepagetables","enable_paging","PageTablesSet","mappingtype","Gets the current mapping state of this Virtual Address.","print_mapping","Prints the current mapping.","Deletes a mapping in the page tables, returning the Frame…","map_allocate_to","map_frame","Maps a given frame in the page tables. Takes care of…","get_page","map_page_guard","Reserves a given page as guard page. This affects only…","map_range_page_guard","Reserve a given region as guard pages. If the region spans…","map_range","Maps the given physical address range to the given virtual…","map_range_allocate","Maps a given number of consecutive pages at a given…","identity_map","Maps a memory frame to the same virtual address","identity_map_region","Identity maps a range of frames","find_available_virtual_space","set_page_readonly","Sets a previously mapped page as readonly","set_region_readonly","Sets a previously mapped range of pages readonly","start_addr","end_addr","A big bitmap denoting for every frame if it is free or not","is_allocated","Constructs a frame structure from a physical address","bootinformation","pagingoffpageset","kfs_bootstrap::bootstrap_logging","kfs_bootstrap::gdt::segment_selector","kfs_bootstrap::gdt::i386::instructions::tables","kfs_bootstrap::address","kfs_bootstrap::paging::entry","kfs_bootstrap::paging::table::entry","kfs_bootstrap::frame_alloc","kfs_bootstrap::bootstrap_stack","entries_mut","entries","get_table","create_table","Allocates a page table, zero it and add an entry to the…","get_directory","NO_CACHE","ACCESSED","PRESENT","Adding a length to an address gives another address","Subtracting a length from an address gives another address","Subtracting two address gives their distance","add_assign","tssstruct","deref_mut","index_mut","systemdescriptortypes","initialize","AlignedStack","FramebufferTag","ModuleAlignmentTag","MultiBootHeader","DescriptorTable","DescriptorTableEntry","SystemDescriptorTypes","SegmentSelector","TssStruct","PrivilegeLevel","DescriptorTablePointer","PhysicalAddress","VirtualAddress","PageTable","PageDirectory","ActivePageDirectory","ActivePageTable","SmartHierarchicalTable","InactivePageDirectory","InactivePageTable","PagingOffDirectory","PagingOffTable","I386PageTablesSet","HierarchicalTable","PageTableTrait","PageDirectoryTrait","VirtualSpaceLand","KernelLand","AllocatorBitmap","FrameAllocator","BootstrapStack","kfs_libuser","kfs_libuser::syscalls","sharedmemory","serverport","clientsession","syscall_inner","send_sync_request_with_user_buffer","serversession","kfs_libuser::ipc","kfs_libuser::ipc::IPCBufferType","Determines what MemoryState to use with the mapped memory…","handleref","waitablemanager","porthandler","ipcbuffertype","ipcbuffer","allocator","Ask the compositor to redraw the window.","SVC_LOG_BUFFER","kfs_libuser::io","clone_into","kfs_libuser::types","to_owned","kfs_libuser::ipc::server","kfs_libuser::sm","kfs_libuser::vi","kfs_libuser::error","to_string","kfs_libuser::allocator","kfs_libuser::terminal","kfs_libuser::window","kfs_libuser::log_impl","get_handle","handle_signaled","libusererror","write_str","windowsize","bit_range","set_bit_range","backtrace","Registers","HandleRef","ReadableEvent","ClientSession","ServerSession","ClientPort","ServerPort","SharedMemory","MappedSharedMemory","MsgPackedHdr","HandleDescriptorHeader","IPCBuffer","IPCBufferType","MessageTy","WaitableManager","SessionWrapper","PortHandler","IWaitable","IUserInterface","ViInterface","LibuserError","Allocator","WindowSize","Termination","The IO interface","A read-only wrapper around an IO device.","An Io that we can only write to.","Port IO accessor.","IO-space address this Pio reads from.","The word size of this pointer. Should be u8, u16 or u32.","The Io trait allows for accessing device IO in a generic…","The width of the IO access. Should be a primitive type…","Mask `value` with `flags`, and write it to this device…","Create a read-only wrapper around the IO device address.","Creates a WriteOnly Io.","writeonly","Create a PIO from a given port","Memory permissions of a memory area.","The structure returned by the `query_memory` syscall.","The base address of this memory region.","The size of this memory region, from the base address.","The type of this mapping.","The attributes of this mapping.","The permissions of this mapping.","ipc_ref_count","Counts how many IPC service requests have an IPC buffer in…","device_ref_count","Kernel syscall error codes.","InvalidKernelCaps","Kernel capabilities are invalid.","NotImplemented","This function is not implemented.","InvalidSize","The size argument is invalid.","InvalidAddress","The passed address is invalid.","MemoryFull","The virtual address space was exhausted.","HandleTableFull","The process' handle table is full.","InvalidMemPerms","The memory permissions passed are wrong.","InvalidHandle","Passed handle is invalid.","CopyFromUserFailed","Attempt to copy the userspace address failed.","InvalidCombination","The combination of argument is invalid.","A timeout was reached.","The syscall was cancelled through cancel_synchronization.","ExceedingMaximum","A size or address was given exceeding the maximum allowed…","NoSuchEntry","The given entry does not exist.","PortRemoteDead","The remote part of the session was closed.","ProcessAlreadyStarted","Attempted to start a process that was already started.","ReservedValue","Attempted to use an unknown value, reserved for future use.","Transforms a KernelError into the encoding acceptable for…","from_syscall_ret","Turns a syscall return value into a Kernel Error.","from_description","Turns a kernel error description into a KernelError.","description","Gets the underlying KernelError description.","Syscall numbers","SetHeapSize","SetMemoryPermission","SetMemoryAttribute","MapMemory","UnmapMemory","QueryMemory","ExitProcess","CreateThread","StartThread","ExitThread","SleepThread","GetThreadPriority","SetThreadPriority","GetThreadCoreMask","SetThreadCoreMask","GetCurrentProcessorNumber","SignalEvent","ClearEvent","MapSharedMemory","UnmapSharedMemory","CreateTransferMemory","CloseHandle","ResetSignal","WaitSynchronization","CancelSynchronization","ArbitrateLock","ArbitrateUnlock","WaitProcessWideKeyAtomic","SignalProcessWideKey","GetSystemTick","ConnectToNamedPort","SendSyncRequestLight","SendSyncRequest","SendSyncRequestWithUserBuffer","SendAsyncRequestWithUserBuffer","GetProcessId","GetThreadId","OutputDebugString","ReturnFromException","FlushEntireDataCache","FlushDataCache","MapPhysicalMemory","UnmapPhysicalMemory","GetFutureThreadInfo","GetLastThreadInfo","GetResourceLimitLimitValue","GetResourceLimitCurrentValue","SetThreadActivity","GetThreadContext3","WaitForAddress","SignalToAddress","DumpInfoNew","CreateSession","AcceptSession","ReplyAndReceiveLight","ReplyAndReceive","ReplyAndReceiveWithUserBuffer","CreateEvent","MapPhysicalMemoryUnsafe","UnmapPhysicalMemoryUnsafe","SetUnsafeLimit","CreateCodeMemory","ControlCodeMemory","SleepSystem","ReadWriteRegister","SetProcessActivity","CreateSharedMemory","MapTransferMemory","UnmapTransferMemory","CreateInterruptEvent","QueryPhysicalAddress","QueryIoMapping","CreateDeviceAddressSpace","AttachDeviceAddressSpace","DetachDeviceAddressSpace","MapDeviceAddressSpaceByForce","MapDeviceAddressSpaceAligned","MapDeviceAddressSpace","UnmapDeviceAddressSpace","InvalidateProcessDataCache","StoreProcessDataCache","FlushProcessDataCache","DebugActiveProcess","BreakDebugProcess","TerminateDebugProcess","GetDebugEvent","ContinueDebugEvent","GetProcessList","GetThreadList","GetDebugThreadContext","SetDebugThreadContext","QueryDebugProcessMemory","ReadDebugProcessMemory","WriteDebugProcessMemory","SetHardwareBreakPoint","GetDebugThreadParam","GetSystemInfo","CreatePort","ManageNamedPort","ConnectToPort","SetProcessMemoryPermission","MapProcessMemory","UnmapProcessMemory","QueryProcessMemory","MapProcessCodeMemory","UnmapProcessCodeMemory","CreateProcess","StartProcess","TerminateProcess","GetProcessInfo","CreateResourceLimit","SetResourceLimitLimitValue","CallSecureMonitor","MapFramebuffer","StartProcessEntrypoint","The area is readable.","The area is writable.","The area is executable.","memoryinfo","framebuffer","eh_personality","The exception handling personality function for use in the…","panic_fmt","kfs_kernel","mappingaccessrights","kfs_kernel::paging","map_phys_region_to","physicalmemregion","Reads the state of the mapping at a given address.","get_hierarchy","The first address in this land.","The last address in this land.","mapping","Returns the address of this mapping.","Returns the type of this mapping.","mirror_mapping","crossprocessmapping","kfs_kernel::paging::error","kfs_kernel::paging::error::MmError","address","A hierarchical paging is composed of entries. An entry can…","Available, aka unused. Will page fault on use.","Guarded. Reserved and will cause a pagefault on use. Used…","Present. Used and has a backing physical address.","Marks the nth entry as guard page","switch_to","kfs_kernel::paging::hierarchical_table","Reads the value of cr2, retrieving the address that caused…","kfs_kernel::paging::arch::i386","Because we do not store Available mappings internally, we…","The address fell in an available range.","The address fell in an existing mapping.","kfs_kernel::paging::process_memory","kfs_kernel::paging::bookkeeping","Returns the mapping `address` falls into, or if it is…","querymemory","Returns the mapping `address` falls into.","find_available_space","Finds a hole in virtual space at least `length` long.","PAGE_SIZE","The page size. Dictated by the MMU. In simple, elegant,…","Shorthand for USER_ACCESSIBLE | WRITABLE","kfs_kernel::error","kfs_kernel::error::KernelError","ThisWillNeverHappenButPleaseDontMatchExhaustively","directives","kfs_kernel::log_impl::filter","levelfilter","kfs_kernel::log_impl","Set by hardware if last arithmetic operation resulted in a…","Set by hardware if last arithmetic operation generated a…","kfs_kernel::i386","kernelstack","kfs_kernel::i386::structures","Set an interrupt gate function for the IDT entry and sets…","entryoptions","handlerfunc","set_handler_fn","set_task_fn","Set a task gate function for the IDT entry and sets the…","handlerfuncwitherrcode","pagefaulthandlerfunc","Set or reset the preset bit.","pagefaulterrorcode","process_switch","threadstruct","If true, the limit is a count of 4k pages. If false, it is…","kfs_kernel::i386::instructions","interrupts","exceptionstackframe","kfs_kernel::interrupts","userspaceerror","userspaceptr","userspaceptrmut","query_memory","registers","Update the Registers with the passed result.","PhysicalMemRegion","Constructs a `PhysicalMemRegion` from a physical address,…","kfs_kernel::frame_allocator","The physical memory manager.","Initialize the [FrameAllocator] by parsing the multiboot…","mark_frame_bootstrap_allocated","Marks a physical memory frame as already allocated…","serialcolor","serialattributes","kfs_kernel::devices","PIT_PORTS","port61flags","spin_wait_ms","Spin waits for at least `ms` amount of milliseconds","acknowledge","Acknowledges an IRQ, allowing the PIC to send a new IRQ on…","Placeholder for future Mutex implementation.","Disables interrupts and locks the mutex.","spinlockirqguard","force_unlock","capabilities","ProcessCapabilities","Capabilities of a process.","syscall_mask","Bitmask of syscall access controls. Should be accessed…","irq_access_mask","Bitmask of allowed interrupts. Should be accessed through…","A vector of readable IO ports.","kfs_kernel::process","threadstate","into_inner","Gets the ProcessStruct of the current thread, incrementing…","processstruct","create_first_process","checked_add","connect_to_named_port","Create a new Session pair. Those sessions are linked to…","kfs_kernel::ipc","accepters","servercount","Create a new Port pair. Those ports are linked to…","Returns a ClientPort from this Port.","clientport","NAMED_PORTS","mappedgrubmodule","processmemory","kfs_kernel::utils","kfs_kernel::paging::kernel_memory","kfs_kernel::paging::lands","kfs_kernel::paging::mapping","kfs_kernel::paging::cross_process","kfs_kernel::paging::arch::i386::entry","kfs_kernel::paging::arch::i386::table","kfs_kernel::event","kfs_kernel::log_impl::filter::inner","kfs_kernel::i386::registers::eflags","kfs_kernel::i386::stack","kfs_kernel::i386::structures::gdt","kfs_kernel::i386::structures::idt","kfs_kernel::i386::process_switch","kfs_kernel::i386::gdt","kfs_kernel::utils::io","kfs_kernel::i386::instructions::tables","kfs_kernel::interrupts::syscalls","kfs_kernel::frame_allocator::physical_mem_region","kfs_kernel::frame_allocator::i386","kfs_kernel::heap_allocator","kfs_kernel::devices::rs232","kfs_kernel::devices::pit","kfs_kernel::devices::pic","kfs_kernel::sync","kfs_kernel::process::capabilities","kfs_kernel::mem","kfs_kernel::ipc::session","kfs_kernel::ipc::port","kfs_kernel::elf_loader","table_level","get_child_table","create_child_table","Panics, a page table has no children.","flush_whole_cache","get_top_level_table","map_to_from_iterator","for_every_entry","copy_active_kernel_space","is_currently_active","from_currently_active","is_signaled","register","allocate_region","allocate_frames_fragmented","Allocates physical frames, possibly fragmented across…","free_region","check_is_allocated","check_is_reserved","split_at","USER_DEFINED_2","VIRTUAL_INTERRUPT_PENDING","VIRTUAL_INTERRUPT","ALIGNMENT_CHECK","VIRTUAL_8086_MODE","RESUME_FLAG","NESTED_TASK","IOPL_HIGH","OVERFLOW_FLAG","DIRECTION_FLAG","INTERRUPT_FLAG","TRAP_FLAG","SIGN_FLAG","ZERO_FLAG","AUXILIARY_CARRY_FLAG","PARITY_FLAG","CARRY_FLAG","IOPL_LOW","PROTECTION_VIOLATION","CAUSED_BY_WRITE","USER_MODE","MALFORMED_TABLE","INSTRUCTION_FETCH","SPKR_CONTROL","OUT2_STATUS","OUT1_STATUS","INTERVAL4","gatetype","spinlock","steps_between","replace_one","replace_zero","add_usize","channelselector","rwlockreadguard","rwlockwriteguard","Creates a new spinlock wrapping the supplied data.","mutexguard","write_raw","MappingAccessRights","ProcessMemory","DynamicHierarchy","KernelMemory","CrossProcessMapping","HierarchicalEntry","PagingCacheFlusher","TableHierarchy","InactiveHierarchyTrait","I386EntryFlags","I386Entry","InactiveHierarchy","UserspaceBookkeeping","UserspaceError","ArithmeticOperation","Directive","AlignedTssStruct","KernelStack","StackDumpSource","EntryOptions","ExceptionStackFrame","PageFaultErrorCode","ThreadHardwareContext","GdtManager","PhysicalMemRegionIter","FrameAllocatori386","FrameAllocatorTraitPrivate","FrameAllocatorTrait","SerialAttributes","SerialInternal","SerialColor","SerialLogger","Port61Flags","PITChannel2","ChannelSelector","InternalPic","RwLockReadGuard","RwLockWriteGuard","SpinLockGuard","SpinLockIRQ","SpinLockIRQGuard","ProcessStruct","ThreadStruct","HandleTable","ThreadStateAtomic","ThreadState","MaskPrinter","UserSpacePtr","UserSpacePtrMut","SessionRequests","IncomingConnection","MappedGrubModule","Splittable","RecursiveTablesLand","ActiveHierarchy","Align the address to the next alignment.","align_down","Align the address to the previous alignment.","align_up_checked","align_up, but checks if addr overflows","Counts the numbers of `b` in `a`, rounding the result up.","print_hexdump","Displays memory as hexdump","print_hexdump_as_if_at_addr","Makes a hexdump of a slice, but display different…","bit_array_first_zero","Returns the index of the first 0 in a bit array.","bit_array_first_one","Returns the index of the first 1 in a bit array.","bit_array_first_count_one","Returns the index of the first instance of count…","skip_write","Skip the given amount of bytes, returning a mutable slice…","Writes an u8 in the given byte ordering.","write_u16","Writes a u16 in the given byte ordering.","write_u32","Writes a u32 in the given byte ordering.","write_u64","Writes a u64 in the given byte ordering.","Writes the given byte slice entirely.","Writes the given structure.","Reads an u8 in the given byteorder.","Reads an u16 in the given byteorder.","Reads an u32 in the given byteorder.","Reads an u64 in the given byteorder.","Reads `v.len()` bytes from the stream, and asserts that it…","skip_read","Skips `bytelen` bytes, returning a slice to them for…","read_raw","Reads the given structure from the bytestream.","Extension of the [BitField] trait, that adds the…","set_bits_area","Sets a range of bits to `value` in the BitField.","enum_with_val","Creates a fake C-like enum, where all bit values are…","set_heap_size","Resize the heap of a process, just like a brk. It can both…","exit_process","create_thread","start_thread","exit_thread","sleep_thread","create_shared_memory","map_shared_memory","unmap_shared_memory","close_handle","wait_synchronization","output_debug_string","create_session","accept_session","reply_and_receive_with_user_buffer","create_interrupt_event","create_port","manage_named_port","Creates a named port.","connect_to_port","map_framebuffer","Represenens the header of an HIPC command.","Part of an HIPC command. Sent only when…","num_x_descriptors","set_num_x_descriptors","num_a_descriptors","set_num_a_descriptors","num_b_descriptors","set_num_b_descriptors","num_w_descriptors","set_num_w_descriptors","raw_section_size","set_raw_section_size","c_descriptor_flags","set_c_descriptor_flags","enable_handle_descriptor","set_enable_handle_descriptor","set_send_pid","num_copy_handles","set_num_copy_handles","num_move_handles","set_num_move_handles","Safely expands the heap if possible.","__rg_allocator_abi","__rg_alloc","__rg_dealloc","__rg_realloc","__rg_alloc_zeroed","ALLOCATOR","metadata","readonly","Canceled","make_ret","A logger that sends its output to COM1.","GDT Handler","AvailableTss16","BusyTss16","CallGate16","InterruptGate16","TrapGate16","AvailableTss32","BusyTss32","CallGate32","InterruptGate32","TrapGate32","Types for the Global Descriptor Table and segment selectors.","Specifies which element to load into a segment from…","Creates a new SegmentSelector","Returns the GDT index.","Returns the requested privilege level.","This crate is x86_64's little brother. It provides i386…","The Task State Segment (TSS) is a special data structure…","_reserved1","_reserved2","_reserved3","_reserved4","_reserved5","_reserved6","_reserved7","_reserved8","_reserved9","_reserveda","_reservedb","ldt_selector","iopboffset","_reservedc","Represents a protection ring level.","Privilege-level 0 (most privilege): This level is used by…","Privilege-level 1 (moderate privilege): This level is used…","Privilege-level 2 (moderate privilege): Like level 1, this…","Privilege-level 3 (least privilege): This level is used by…","instructions","Low level functions for special i386 instructions.","Instructions for loading descriptor tables (GDT, IDT, etc.).","A struct describing a pointer to a descriptor table (GDT /…","Size of the DT.","Load GDT table.","Load LDT table.","Sets the task register to the given TSS segment.","Load IDT table.","segmentation","Provides functions to read and write segment registers.","Reload code segment register. Note this is special since…","Reload stack segment register.","Reload data segment register.","Reload es segment register.","Reload fs segment register.","Reload gs segment register.","Returns the current value of the code segment register.","Interrupt disabling functionality.","Enable interrupts","Disable interrupts","Creates a `PrivilegeLevel` from a numeric value. The value…","GLOBAL_LDT","The global LDT used by all the processes.","load_global","null_descriptor","new_system","Creates a new LDT descriptor.","Creates a GDT descriptor pointing to a TSS segment","get_limit","set_limit","get_accessed","is_readwrite_allowed","is_comformant","is_executable","get_ring_level","get_present","is_4k_granularity","set_4k_granularity","Represents a Physical address","Represents a Virtual address","UserLand","is_paging_on","Check if the paging is currently active.","flush_tlb","Flush the Translation Lookaside Buffer…","Changes the content of the cr3 register, and returns the…","__land_assertions","is_guard","TlbFlush","When passing this struct the TLB will be flushed. Used by…","Present","DIRECTORY_RECURSIVE_ADDRESS","When paging is on, accessing this address loops back to…","zero out the whole table","map_nth_entry","guard_nth_entry","get_table_address","reduce recursive mapping by one time to get further down…","ENTRY_COUNT","A trait describing the splitting of virtual memory between…","start_table","end_table","memory_bitmap","initialized","A physical memory manger to allocate and free memory frames","addr_to_frame","Gets the frame number from a physical address","frame_to_addr","Gets the physical address from a frame number","round_to_page","Rounds an address to its page address","round_to_page_upper","Rounds an address to the next page address except if its…","FRAME_OFFSET_MASK","FRAME_BASE_MASK","FRAME_BASE_LOG","FRAMES_BITMAP_SIZE","The size of the frames_bitmap (~128ko)","FRAME_FREE","FRAME_OCCUPIED","mark_area_reserved","Marks a physical memory area as reserved and will never…","mark_area_free","Marks a physical memory area as free for frame allocation","elf_loader","load_segment","Loads an elf segment by coping file_size bytes to the…","programheader","stack_address","STACK_SIZE","STACK_SIZE_WITH_GUARD","The alignment of the stack.…","allocate_stack","STACK_POISON_SIZE","create_poison_pointers","Puts two poisons pointers at the base of the stack for the…","get_stack_start","activepagedirectory","inactivepagedirectory","Writes a string to COM1.","kfs_shell","terminal","PRIMARY_PS2","Waits for a single key press, and return its unicode…","try_read_key","If a key press is pending, return its unicode…","Get a ReadableEvent for the PS2 IRQ. Waiting on this event…","readableevent","kfs_shell::ps2","status_port","CAPABILITIES","FRAMEBUFFER","get_real_bounds","kfs_vi::vbe","Framebuffer","viinterface","create_buffer","A rgb color","The number of bits that forms a pixel. Used to compute…","get_px_offset","Gets the offset in memory of a pixel based on an x and y.","write_px_at","Gets the underlying framebuffer","Read one of the 64 32-bit registers of a pci…","kfs_ahci::pci","PciConfigPortsPair","PciHeader00","UserInterface","Service Manager","get_service","register_service"];
searchIndex["kfs_ahci"]={"doc":E,"i":[[5,"main","kfs_ahci",E,N,[[]]],[0,"pci",E,"PCI discovery",N,N],[3,R[1020],R[1019],"A struct tying the two pci config ports together.",N,N],[12,R[513],E,E,0,N],[12,"data",E,E,0,N],[3,"PciDevice",E,"A pci device, addressed by its bus number, slot, and…",N,N],[12,"bus",E,"The device's bus number.",1,N],[12,"slot",E,"The device's slot number on its bus.",1,N],[12,"function",E,"The device's function number.",1,N],[12,"did",E,"Device id.",1,N],[12,"vid",E,"Vendor id.",1,N],[12,"class",E,E,1,N],[12,"subclass",E,E,1,N],[12,"prog_if",E,E,1,N],[12,"rev_id",E,E,1,N],[12,"header_type",E,E,1,N],[12,"latency_timer",E,E,1,N],[12,"cache_line_size",E,E,1,N],[12,"header",E,"Remaining registers values, based on header type.",1,N],[3,R[1021],E,"Pci header when Header Type == 0x00 (General device).",N,N],[12,"bar0",E,E,2,N],[12,"bar1",E,E,2,N],[12,"bar2",E,E,2,N],[12,"bar3",E,E,2,N],[12,"bar4",E,E,2,N],[12,"bar5",E,E,2,N],[12,"cardbus_cis_ptr",E,E,2,N],[12,"subsystem_id",E,E,2,N],[12,"subsystem_vendor_id",E,E,2,N],[12,"expansion_rom_base_address",E,E,2,N],[12,"capabilities_ptr",E,E,2,N],[12,"max_latency",E,E,2,N],[12,"min_grant",E,E,2,N],[12,"interrupt_pin",E,E,2,N],[12,"interrupt_line",E,E,2,N],[4,"PciHeader",E,"Contents of pci config registers 0x4-0xf, structure varies…",N,N],[13,"GeneralDevice",E,E,3,N],[13,"PCItoPCIBridge",E,E,3,N],[13,"CardBus",E,E,3,N],[13,"UnknownHeaderType",E,E,3,N],[4,"BAR",E,"Base Address Registers. Minimal implementation, does not…",N,N],[13,"Memory",E,E,4,N],[13,"Io",E,E,4,N],[5,"pci_config_read_word",E,R[1018],N,[[["u8"],["u8"],["u8"],["u8"]],["u32"]]],[5,"pci_config_write_word",E,R[1018],N,[[["u8"],["u8"],["u8"],["u8"],["u32"]]]],[5,"discover",E,"Discover all pci devices, by probing the PID-VID of every…",N,[[],["vec",["pcidevice"]]]],[5,"get_ahci_controllers",E,"Gets the ahci controllers found by pci discovery.",N,[[],["vec"]]],[7,"PCI_CONFIG_PORTS",E,"A mutex around the two ports used to address pci…",N,N],[17,"CONFIG_ADDRESS",E,"The CONFIG_ADDRESS I/O location.",N,N],[17,"CONFIG_DATA",E,"The CONFIG_DATA I/O location.",N,N],[17,"MAX_BUS",E,"The highest addressable bus.",N,N],[17,"MAX_SLOT",E,"The highest addressable slot on a bus.",N,N],[17,"MAX_FUNC",E,"The highest addressable function on a slot on a bus.",N,N],[17,"MAX_REGISTER",E,"The highest addressable register on a function on a slot…",N,N],[11,"probe",E,"Checks if a device exists on given bus>slot>function.",1,[[["u8"],["u8"],["u8"]],[R[83]]]],[11,"read_config_register",E,"Reads a configuration space register.",1,[[["self"],["u8"]],["u32"]]],[11,"write_config_register",E,"Writes to a configuration space register.",1,[[["self"],["u8"],["u32"]]]],[11,"status",E,"Reads the status register.",1,[[["self"]],["u16"]]],[11,"command",E,"Reads the command register.",1,[[["self"]],["u16"]]],[7,R[1005],"kfs_ahci",E,N,N],[11,"from",R[1019],E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,R[268],E,E,1,[[["self"]],[T]]],[11,R[266],E,E,1,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,R[268],E,E,2,[[["self"]],[T]]],[11,R[266],E,E,2,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,R[268],E,E,3,[[["self"]],[T]]],[11,R[266],E,E,3,N],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,R[268],E,E,4,[[["self"]],[T]]],[11,R[266],E,E,4,N],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[16]]]],[11,"clone",E,E,1,[[["self"]],["pcidevice"]]],[11,"clone",E,E,2,[[["self"]],["pciheader00"]]],[11,"clone",E,E,3,[[["self"]],["pciheader"]]],[11,"clone",E,E,4,[[["self"]],["bar"]]]],"p":[[3,R[1020]],[3,"PciDevice"],[3,R[1021]],[4,"PciHeader"],[4,"BAR"]]};
searchIndex["kfs_clock"]={"doc":"Clock applet","i":[[3,"Rtc","kfs_clock","IBM Real Time Clock provides access to the current date…",N,N],[12,"command",E,"Command Register.",0,N],[12,"data",E,"Data Register.",0,N],[5,"get_day_of_week",E,"Turns a day of week number from RTC into an english string.",N,[[["u8"]],["str"]]],[5,"get_month",E,"Turns a month number from RTC into an english string.",N,[[["u8"]],["str"]]],[5,"main",E,E,N,[[]]],[7,R[1005],E,E,N,N],[11,"new",E,"Create a new RTC with the default IBM PC values.",0,[[],["rtc"]]],[11,"read_reg",E,"Read from a CMOS register.",0,[[["self"],["u8"]],["u8"]]],[11,"write_reg",E,"Write to the CMOS register.",0,[[["self"],["u8"],["u8"]]]],[11,"enable_update_ended_int",E,"Enable the Update Ended RTC interrupt. This will enable an…",0,[[["self"]]]],[11,"read_interrupt_kind",E,"Acknowledges an interrupt from the RTC. Necessary to…",0,[[["self"]],["u8"]]],[11,"is_12hr_clock",E,"Checks if the RTC is in 12 hours or 24 hours mode.…",0,[[["self"]],["bool"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]]],"p":[[3,"Rtc"]]};
searchIndex["kfs_sm"]={"doc":R[1023],"i":[[3,R[1022],"kfs_sm","`sm:` service interface. The main interface to the Service…",N,N],[3,"SERVICES",E,"Global mapping of Service Name -> ClientPort.",N,N],[12,R[85],E,E,0,N],[5,"get_service_length",E,"Get the length of a service encoded as an u64.",N,[[["u64"]],[R[9]]]],[5,"get_service_str",E,"Casts an &u64 into an &str.",N,[[["u64"]],["str"]]],[5,"main",E,E,N,[[]]],[7,"SERVICES",E,E,N,N],[7,R[1005],E,E,N,N],[11,R[214],E,"Initialize the UserInterface, acquiring the Pid of the…",1,[[["self"],["pid"]],[R[16],["error"]]]],[11,R[1024],E,"Get a ClientSession to this service.",1,[[["self"],["u64"]],[R[16],["error"]]]],[11,R[1025],E,"Register a new service, returning a ServerPort to the…",1,[[["self"],["u64"],["u8"],["u32"]],[R[16],["error"]]]],[11,"unregister_service",E,"Unregister a service.",1,[[["self"],["u64"]],[R[16],["error"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"deref",E,E,0,[[["self"]],["mutex"]]],[11,R[77],E,E,1,[[],["userinterface"]]],[11,"dispatch",E,E,1,N],[11,R[214],E,E,0,[[["self"]]]]],"p":[[3,"SERVICES"],[3,R[1022]]]};
searchIndex["kfs_vi"]={"doc":"Visual Compositor","i":[[3,R[305],"kfs_vi","Entry point interface.",N,N],[3,"Buffer",E,"Internal representation of a window.",N,N],[12,"top",E,E,0,N],[12,"left",E,E,0,N],[12,"width",E,E,0,N],[12,"height",E,E,0,N],[12,"mem",E,E,0,N],[3,"IBuffer",E,"IPC Window object",N,N],[12,"buffer",E,"The Buffer linked with this window object instance.",1,N],[5,"get_intersect",E,"Gets the intersection between two rectangles.",N,N],[5,"draw",E,"Draw a portion of a buffer onto the framebuffer.",N,[[["buffer"],[R[493]],["u32"],["u32"],["u32"],["u32"]]]],[5,R[1007],E,"See [Buffer::get_real_bounds].",N,N],[5,"main",E,E,N,[[]]],[0,"vbe",E,"VESA Bios Extensions Framebuffer",N,N],[3,"VBEColor",R[1008],R[1012],N,N],[12,"b",E,E,2,N],[12,"g",E,E,2,N],[12,"r",E,E,2,N],[12,"a",E,E,2,N],[3,R[1009],E,"A wrapper around a linear framebuffer. The framebuffer is…",N,N],[12,"buf",E,E,3,N],[12,"width",E,E,3,N],[12,"height",E,E,3,N],[12,"bpp",E,"Bits-per-pixel. Usually 8.",3,N],[3,R[1006],E,E,N,N],[12,R[85],E,E,4,N],[7,R[1006],E,E,N,N],[11,"rgb",E,"Creates a VBEColor from the given red/green/blue…",2,[[["u8"],["u8"],["u8"]],["vbecolor"]]],[11,"new",E,"Creates an instance of the linear framebuffer.",3,[[],[R[16],[R[493],"error"]]]],[11,"new_buffer",E,"Creates a backbuffer backed by an in-memory array.",3,N],[11,"width",E,"framebuffer width in pixels. Does not account for bpp",3,[[["self"]],[R[9]]]],[11,"height",E,"framebuffer height in pixels. Does not account for bpp",3,[[["self"]],[R[9]]]],[11,"bpp",E,R[1013],3,[[["self"]],[R[9]]]],[11,R[1014],E,R[1015],3,[[["self"],[R[9]],[R[9]]],[R[9]]]],[11,"write_px",E,"Writes a pixel in the framebuffer respecting the bgr pattern",3,[[["self"],[R[9]],["vbecolor"]]]],[11,R[1016],E,"Writes a pixel in the framebuffer respecting the bgr…",3,[[["self"],[R[9]],[R[9]],["vbecolor"]]]],[11,"get_fb",E,R[1017],3,N],[11,"clear",E,"Clears the whole screen",3,[[["self"]]]],[11,"clear_at",E,"Clears a segment of the screen.",3,[[["self"],[R[9]],[R[9]],[R[9]],[R[9]]]]],[7,"BUFFERS","kfs_vi","A list of the buffers currently alive.",N,N],[7,"BACKBUFFER_ARR",E,"The backbuffer to draw into.",N,N],[7,R[1005],E,E,N,N],[11,R[1011],E,"Create a window.",5,[[["self"],[R[258]],["handle"],["i32"],["i32"],["u32"],["u32"]],[R[16],["error"]]]],[11,"get_resolution",E,"Gets the screen resolution.",5,[[["self"]],[R[16],["error"]]]],[11,R[1007],E,"Returns the buffer's bounds within the given width/height,…",0,N],[11,"draw",E,"Blit the buffer to the framebuffer.",1,[[["self"]],[R[16],["error"]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",R[1008],E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,R[268],E,E,2,[[["self"]],[T]]],[11,R[266],E,E,2,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt","kfs_vi",E,5,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"deref",R[1008],E,4,[[["self"]],["mutex"]]],[11,"drop","kfs_vi","Redraw the zone where the buffer was when dropping it, to…",1,[[["self"]]]],[11,"clone",R[1008],E,2,[[["self"]],["vbecolor"]]],[11,R[77],"kfs_vi",E,5,[[],[R[1010]]]],[11,"dispatch",E,E,5,N],[11,"dispatch",E,E,1,N],[11,R[214],R[1008],E,4,[[["self"]]]]],"p":[[3,"Buffer"],[3,"IBuffer"],[3,"VBEColor"],[3,R[1009]],[3,R[1006]],[3,R[305]]]};
searchIndex[R[0]]={"doc":"A messy crate with various utilities shared between the…","i":[[3,R[7],R[0],R[1],N,N],[12,"data",E,R[2],0,N],[12,"pos",E,R[3],0,N],[3,R[8],E,R[1],N,N],[12,"data",E,R[2],1,N],[12,"pos",E,R[3],1,N],[5,"align_up",E,R[761],N,[[[T],[T]],[T]]],[5,R[762],E,R[763],N,[[[T],[T]],[T]]],[5,R[764],E,R[765],N,[[[R[9]],[R[9]]],[R[83],[R[9]]]]],[5,"div_ceil",E,R[766],N,[[[T],[T]],[T]]],[5,R[767],E,R[768],N,N],[5,R[769],E,R[770],N,N],[5,R[771],E,R[772],N,N],[5,R[773],E,R[774],N,N],[5,R[775],E,R[776],N,N],[0,"io",E,R[310],N,N],[3,R[21],R[15],R[311],N,N],[12,"inner",E,E,2,N],[3,R[22],E,R[312],N,N],[12,"inner",E,E,3,N],[3,"Pio",E,R[313],N,N],[12,"port",E,R[314],4,N],[12,"value",E,R[315],4,N],[8,"Io",E,R[316],N,N],[16,"Value",E,R[317],5,N],[10,"read",E,R[4],5,N],[10,"write",E,R[6],5,N],[11,"readf",E,R[5],5,N],[11,"writef",E,R[318],5,N],[11,"new",E,R[319],2,[[["i"]],[R[853]]]],[11,"read",E,R[4],2,N],[11,"readf",E,R[5],2,N],[11,"new",E,R[320],3,[[["i"]],[R[321]]]],[11,"write",E,R[6],3,N],[11,"new",E,R[322],4,[[["u16"]],["self"]]],[0,"cursor",R[0],"Simple cursor",N,N],[3,R[7],"kfs_libutils::cursor",R[1],N,N],[12,"data",E,R[2],0,N],[12,"pos",E,R[3],0,N],[3,R[8],E,R[1],N,N],[12,"data",E,R[2],1,N],[12,"pos",E,R[3],1,N],[11,"new",R[0],R[10],0,N],[11,"pos",E,R[11],0,[[["self"]],[R[9]]]],[11,R[777],E,R[778],0,N],[11,"write_u8",E,R[779],0,[[["self"],["u8"]]]],[11,R[780],E,R[781],0,[[["self"],["u16"]]]],[11,R[782],E,R[783],0,[[["self"],["u32"]]]],[11,R[784],E,R[785],0,[[["self"],["u64"]]]],[11,"write",E,R[786],0,N],[11,R[705],E,R[787],0,[[["self"],[T]]]],[11,"new",E,R[10],1,N],[11,"pos",E,R[11],1,[[["self"]],[R[9]]]],[11,"read_u8",E,R[788],1,[[["self"]],["u8"]]],[11,"read_u16",E,R[789],1,[[["self"]],["u16"]]],[11,"read_u32",E,R[790],1,[[["self"]],["u32"]]],[11,"read_u64",E,R[791],1,[[["self"]],["u64"]]],[11,"assert",E,R[792],1,N],[11,R[793],E,R[794],1,N],[11,R[795],E,R[796],1,[[["self"]],[T]]],[8,R[23],E,R[797],N,N],[11,R[798],E,R[799],6,[[["self"],["range",[R[9]]],["bool"]]]],[14,R[800],E,R[801],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",R[15],E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"read",E,"Read",4,[[["self"]],["u8"]]],[11,"write",E,"Write",4,[[["self"],["u8"]]]],[11,"read",E,"Read",4,[[["self"]],["u16"]]],[11,"write",E,"Write",4,[[["self"],["u16"]]]],[11,"read",E,"Read",4,[[["self"]],["u32"]]],[11,"write",E,"Write",4,[[["self"],["u32"]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[0],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"clone",R[15],E,4,[[["self"]],["pio"]]]],"p":[[3,R[7]],[3,R[8]],[3,R[21]],[3,R[22]],[3,"Pio"],[8,"Io"],[8,R[23]]]};
searchIndex[R[246]]={"doc":"Userspace library","i":[[0,"io",R[246],R[310],N,N],[8,"Io",R[265],R[316],N,N],[16,"Value",E,R[317],0,N],[10,"read",E,R[4],0,N],[10,"write",E,R[6],0,N],[11,"readf",E,R[5],0,N],[11,"writef",E,R[318],0,N],[3,R[21],E,R[311],N,N],[12,"inner",E,E,1,N],[3,R[22],E,R[312],N,N],[12,"inner",E,E,2,N],[3,"Pio",E,R[313],N,N],[12,"port",E,R[314],3,N],[12,"value",E,R[315],3,N],[5,"find_free_address",R[246],"Finds a free memory zone of the given size and alignment…",N,[[[R[9]],[R[9]]],[R[16],[R[9],"error"]]]],[5,R[494],E,R[495],N,[[]]],[5,R[496],E,"Function called on `panic!` invocation. Prints the panic…",N,N],[5,"rust_oom",E,"OOM handler. Causes a panic.",N,N],[5,"start",E,"Executable entrypoint. Zeroes out the BSS, calls main, and…",N,N],[5,"main",E,E,N,N],[0,"caps",E,"Kernel Capabilities declaration",N,N],[5,"kernel_flags","kfs_libuser::caps","Create a kernel flag capability. Specifies the…",N,[[["u32"],["u32"],["u8"],["u8"]],["u32"]]],[5,"map_normal_page",E,"Maps the given physical memory page at a random address on…",N,[[["u32"]],["u32"]]],[5,"ioport",E,"Allows the process to use the given IO Ports directly…",N,[[["u16"]],["u32"]]],[5,"irq_pair",E,"Allows the process to create an IRQEvent for those IRQs.…",N,[[["u16"],["u16"]],["u32"]]],[5,"application_type",E,"Declare the type of the application. 0 is a sysmodule, 1…",N,[[["u32"]],["u32"]]],[5,"kernel_release_version",E,"The minimum kernel version this process expects.",N,[[["u32"]],["u32"]]],[5,"handle_table_size",E,"Declare the maximum number of live handles this process is…",N,[[["u32"]],["u32"]]],[5,"debug_flags",E,"Declares whether this application can be debugged (e.g. it…",N,[[["bool"],["bool"]],["u32"]]],[0,"syscalls",R[246],"Syscall Wrappers",N,N],[0,"nr",R[247],R[373],N,N],[17,R[374],"kfs_libuser::syscalls::nr",E,N,N],[17,R[375],E,E,N,N],[17,R[376],E,E,N,N],[17,R[377],E,E,N,N],[17,R[378],E,E,N,N],[17,R[379],E,E,N,N],[17,R[380],E,E,N,N],[17,R[381],E,E,N,N],[17,R[382],E,E,N,N],[17,R[383],E,E,N,N],[17,R[384],E,E,N,N],[17,R[385],E,E,N,N],[17,R[386],E,E,N,N],[17,R[387],E,E,N,N],[17,R[388],E,E,N,N],[17,R[389],E,E,N,N],[17,R[390],E,E,N,N],[17,R[391],E,E,N,N],[17,R[392],E,E,N,N],[17,R[393],E,E,N,N],[17,R[394],E,E,N,N],[17,R[395],E,E,N,N],[17,R[396],E,E,N,N],[17,R[397],E,E,N,N],[17,R[398],E,E,N,N],[17,R[399],E,E,N,N],[17,R[400],E,E,N,N],[17,R[401],E,E,N,N],[17,R[402],E,E,N,N],[17,R[403],E,E,N,N],[17,R[404],E,E,N,N],[17,R[405],E,E,N,N],[17,R[406],E,E,N,N],[17,R[407],E,E,N,N],[17,R[408],E,E,N,N],[17,R[409],E,E,N,N],[17,R[410],E,E,N,N],[17,"Break",E,E,N,N],[17,R[411],E,E,N,N],[17,R[412],E,E,N,N],[17,"GetInfo",E,E,N,N],[17,R[413],E,E,N,N],[17,R[414],E,E,N,N],[17,R[415],E,E,N,N],[17,R[416],E,E,N,N],[17,R[417],E,E,N,N],[17,R[418],E,E,N,N],[17,R[419],E,E,N,N],[17,R[420],E,E,N,N],[17,R[421],E,E,N,N],[17,R[422],E,E,N,N],[17,R[423],E,E,N,N],[17,R[424],E,E,N,N],[17,"DumpInfo",E,E,N,N],[17,R[425],E,E,N,N],[17,R[426],E,E,N,N],[17,R[427],E,E,N,N],[17,R[428],E,E,N,N],[17,R[429],E,E,N,N],[17,R[430],E,E,N,N],[17,R[431],E,E,N,N],[17,R[432],E,E,N,N],[17,R[433],E,E,N,N],[17,R[434],E,E,N,N],[17,R[435],E,E,N,N],[17,R[436],E,E,N,N],[17,R[437],E,E,N,N],[17,R[438],E,E,N,N],[17,R[439],E,E,N,N],[17,R[440],E,E,N,N],[17,R[441],E,E,N,N],[17,R[442],E,E,N,N],[17,R[443],E,E,N,N],[17,R[444],E,E,N,N],[17,R[445],E,E,N,N],[17,R[446],E,E,N,N],[17,R[447],E,E,N,N],[17,R[448],E,E,N,N],[17,R[449],E,E,N,N],[17,R[450],E,E,N,N],[17,R[451],E,E,N,N],[17,R[452],E,E,N,N],[17,R[453],E,E,N,N],[17,R[454],E,E,N,N],[17,R[455],E,E,N,N],[17,R[456],E,E,N,N],[17,R[457],E,E,N,N],[17,R[458],E,E,N,N],[17,R[459],E,E,N,N],[17,R[460],E,E,N,N],[17,R[461],E,E,N,N],[17,R[462],E,E,N,N],[17,R[463],E,E,N,N],[17,R[464],E,E,N,N],[17,R[465],E,E,N,N],[17,R[466],E,E,N,N],[17,R[467],E,E,N,N],[17,R[468],E,E,N,N],[17,R[469],E,E,N,N],[17,R[470],E,E,N,N],[17,R[471],E,E,N,N],[17,R[472],E,E,N,N],[17,R[473],E,E,N,N],[17,R[474],E,E,N,N],[17,R[475],E,E,N,N],[17,R[476],E,E,N,N],[17,R[477],E,E,N,N],[17,R[478],E,E,N,N],[17,R[479],E,E,N,N],[17,R[480],E,E,N,N],[17,R[481],E,E,N,N],[17,R[482],E,E,N,N],[17,R[483],E,E,N,N],[17,R[484],E,E,N,N],[17,R[485],E,E,N,N],[17,R[486],E,E,N,N],[17,R[487],E,E,N,N],[17,R[488],E,E,N,N],[17,"MaxSvc",E,E,N,N],[3,R[81],R[247],R[324],N,N],[12,"baseaddr",E,R[325],4,N],[12,"size",E,R[326],4,N],[12,"memtype",E,R[327],4,N],[12,"memattr",E,R[328],4,N],[12,"perms",E,R[329],4,N],[12,R[330],E,R[331],4,N],[12,R[332],E,"Unknown.",4,N],[3,R[80],E,R[323],N,N],[12,"bits",E,E,5,N],[3,R[286],E,"Register backup structure. The syscall_inner will pop the…",N,N],[12,"eax",E,E,6,N],[12,"ebx",E,E,6,N],[12,"ecx",E,E,6,N],[12,"edx",E,E,6,N],[12,"esi",E,E,6,N],[12,"edi",E,E,6,N],[12,"ebp",E,E,6,N],[5,"syscall",E,"Generic syscall function.",N,[[[R[9]],[R[9]],[R[9]],[R[9]],[R[9]],[R[9]],[R[9]]],[R[16],[R[25]]]]],[5,R[802],E,R[803],N,[[[R[9]]],[R[16],[R[9],R[25]]]]],[5,R[568],E,"Query information about an address. Will fetch the…",N,[[[R[9]]],[R[16],[R[25]]]]],[5,R[804],E,"Exits the process, killing all threads.",N,N],[5,R[805],E,"Creates a thread in the current process.",N,N],[5,R[806],E,"Starts the thread for the provided handle.",N,[[["thread"]],[R[16],[R[25]]]]],[5,R[807],E,"Exits the current thread.",N,N],[5,R[808],E,"Sleeps for a specified amount of time, or yield thread.",N,[[[R[9]]],[R[16],[R[25]]]]],[5,R[809],E,"Creates a shared memory handle.",N,[[[R[9]],[R[34]],[R[34]]],[R[16],[R[248],R[25]]]]],[5,R[810],E,"Maps a shared memory.",N,[[[R[248]],[R[9]],[R[9]],[R[34]]],[R[16],[R[25]]]]],[5,R[811],E,"Unmaps a shared memory.",N,[[[R[248]],[R[9]],[R[9]]],[R[16],[R[25]]]]],[5,R[812],E,"Close the given handle.",N,[[["u32"]],[R[16],[R[25]]]]],[5,R[813],E,"Wait for an event on the given handles.",N,N],[5,R[606],E,"Creates a session to the given named port.",N,[[["str"]],[R[16],[R[250],R[25]]]]],[5,R[252],E,"Send an IPC request through the given pipe.",N,N],[5,R[814],E,"Print the given string to the kernel's debug output.",N,[[["str"]],[R[16],[R[25]]]]],[5,R[815],E,"Create an anonymous session.",N,[[["bool"],[R[9]]],[R[16],[R[25]]]]],[5,R[816],E,"Accept a connection on the given port.",N,[[[R[249]]],[R[16],[R[253],R[25]]]]],[5,R[817],E,"Reply and Receive IPC requests on the given handles.",N,N],[5,R[818],E,"Create a waitable object for the given IRQ number.",N,[[[R[9]],["u32"]],[R[16],[R[1002],R[25]]]]],[5,R[819],E,"Creates an anonymous port.",N,[[["u32"],["bool"],["str"]],[R[16],[R[25]]]]],[5,R[820],E,R[821],N,[[["str"],["u32"]],[R[16],[R[249],R[25]]]]],[5,R[822],E,"Connects to the given named port.",N,[[[R[613]]],[R[16],[R[250],R[25]]]]],[5,R[823],E,"Maps the framebuffer to a kernel-chosen address.",N,[[],[R[16],[R[25]]]]],[5,R[251],E,E,N,N],[0,R[251],E,E,N,N],[0,"types",R[246],"Core kernel types.",N,N],[3,"Handle",R[267],"A Handle is a sort of reference to a Kernel Object. Its…",N,N],[12,"0",E,E,7,N],[3,R[287],E,"A fake reference to a Handle. Has the same representation…",N,N],[12,"inner",E,"The underlying handle number.",8,N],[12,"lifetime",E,"The real handle this reference is tied to.",8,N],[3,R[288],E,"An awaitable event handle, such as an IRQ event.",N,N],[12,"0",E,E,9,N],[3,R[289],E,"The client side of an IPC session.",N,N],[12,"0",E,E,10,N],[3,R[290],E,"The server side of an IPC session.",N,N],[12,"0",E,E,11,N],[3,R[291],E,"The client side of an IPC Port. Allows connecting to an…",N,N],[12,"0",E,E,12,N],[3,R[292],E,"The server side of an IPC Port. Allows listening for…",N,N],[12,"0",E,E,13,N],[3,"Thread",E,"A Thread. Created with the [create_thread syscall].",N,N],[12,"0",E,E,14,N],[3,R[293],E,"A handle to memory that may be mapped in multiple…",N,N],[12,"0",E,E,15,N],[3,R[294],E,"A mapping to a shared memory region.",N,N],[12,"handle",E,E,16,N],[12,"addr",E,E,16,N],[12,"size",E,E,16,N],[3,"Pid",E,"Process ID, as returned by IPC.",N,N],[12,"0",E,E,17,N],[11,"new",E,"Creates a new handle from the given number. This number…",7,[[["u32"]],["handle"]]],[11,"as_ref",E,"Creates a new reference to this handle. See the…",7,[[["self"]],[R[257]]]],[11,R[252],E,"Send an IPC request to the handle, and wait for a…",10,N],[11,"into_handle",E,"Consumes the session, returning the underlying handle.…",10,[[["self"]],["handle"]]],[11,"receive",E,"Receives an IPC request from the session, waiting if none…",11,N],[11,"reply",E,"Replies to an IPC request on the given session. If the…",11,N],[11,"connect",E,"Connects to a port, returning a session on which to send…",12,[[["self"]],[R[16],[R[250],"error"]]]],[11,"accept",E,"Accepts a connection to the port, returning a server…",13,[[["self"]],[R[16],[R[253],"error"]]]],[11,"start",E,"Start the thread.",14,[[["self"]],[R[16],["error"]]]],[11,"new",E,"Creates a new Shared Memory handle. The physical memory…",15,[[[R[9]],[R[34]],[R[34]]],[R[16],[R[248],"error"]]]],[11,"map",E,"Maps the current shared memory at the given address,…",15,[[["self"],[R[9]],[R[9]],[R[34]]],[R[16],["mappedsharedmemory","error"]]]],[11,"get",E,"Get the underlying shared memory as a byte slice.",16,N],[11,"get_mut",E,"Get the underlying shared memory as a mutable byte slice.",16,N],[11,"as_ptr",E,"Gets a raw pointer to the underlying shared memory.",16,N],[11,"as_mut_ptr",E,"Gets a mutable raw pointer to the underlying shared memory.",16,N],[11,"len",E,"Gets the byte length of the mapped shared memory.",16,[[["self"]],[R[9]]]],[11,"as_shared_mem",E,"Return a reference to the underlying shared memory. Useful…",16,[[["self"]],[R[248]]]],[0,"ipc",R[246],"Core IPC Routines",N,N],[3,R[295],R[254],R[824],N,N],[12,"0",E,E,18,N],[3,R[296],E,R[825],N,N],[12,"0",E,E,19,N],[3,R[297],E,"An IPC Buffer represents a section of memory to send to…",N,N],[12,"addr",E,"Address to the value",20,N],[12,"size",E,"Size of the value",20,N],[12,"ty",E,"Buffer type",20,N],[12,"phantom",E,"Tie the buffer's lifetime to the value's ! This is very…",20,N],[3,"Message",E,"A generic IPC message, representing either an IPC Request…",N,N],[12,"ty",E,"Type of the message. This is derived from [MessageTy] and…",21,N],[12,"pid",E,"Optional PID included in the message. For outgoing…",21,N],[12,"buffers",E,"Array of IPC Buffers included in the message.",21,N],[12,"copy_handles",E,"Array of copy handles included in the message. Copy…",21,N],[12,"move_handles",E,"Array of move handles included in the message. Move…",21,N],[12,"is_request",E,"Whether this message contains an IPC request or an IPC…",21,N],[12,"cmdid_error",E,"Contains either the cmdid (if this message is a request)…",21,N],[12,"token",E,"Optional tracking token. This is used to track the origin…",21,N],[12,"raw",E,"The raw arguments included in this message.",21,N],[4,R[298],E,"Type of an IPC Buffer. Depending on the type, the kernel…",N,N],[13,"A",E,"Send Buffer.",22,N],[12,"flags",R[255],R[256],22,N],[13,"B",R[254],"Receive Buffer.",22,N],[12,"flags",R[255],R[256],22,N],[13,"X",R[254],"Pointer.",22,N],[12,"counter",R[255],"The index of the C buffer to copy this pointer into.",22,N],[13,"C",R[254],"Receive List.",22,N],[12,"has_u16_size",R[255],"If true, the size of the receive list should be written in…",22,N],[4,R[299],R[254],"Type of an IPC message.",N,N],[13,"Close",E,"Requests the other end to close the handle and any…",23,N],[13,"Request",E,"A normal request.",23,N],[13,"Control",E,"A request handled by the server handler. See [switchbrew]…",23,N],[5,"find_ty_cmdid",E,"Quickly find the type and cmdid of an IPC message for the…",N,N],[0,"macros",E,"IPC Macros",N,N],[0,"server",E,"IPC Server primitives",N,N],[3,R[300],R[269],"The event loop manager. Waits on the waitable objects…",N,N],[12,"to_add_waitables",E,"Vector of items to add to the waitable list on the next…",24,N],[3,"Align16",E,"Wrapper struct that forces the alignment to 0x10. Somewhat…",N,N],[12,"0",E,E,25,N],[3,R[301],E,"A wrapper around an Object backed by an IPC Session that…",N,N],[12,"handle",E,"Kernel Handle backing this object.",26,N],[12,"object",E,"Object instance.",26,N],[12,"buf",E,"Command buffer for this session. Ensure 16 bytes of…",26,N],[3,R[302],E,"A wrapper around a Server Port that implements the…",N,N],[12,"handle",E,"The kernel object backing this Port Handler.",27,N],[12,"phantom",E,"Type of the Object this port creates.",27,N],[5,"encode_bytes",E,"Encode an 8-character service string into an u64",N,[[["str"]],["u64"]]],[8,R[303],E,"A handle to a waitable object.",N,N],[10,R[278],E,"Gets the handleref for use in the `wait_synchronization`…",28,[[["self"]],[R[257]]]],[10,R[279],E,"Function the manager calls when this object gets signaled.",28,[[["self"],[R[258]]],[R[16],["bool","error"]]]],[8,"Object",E,"An IPC object.",N,N],[10,"dispatch",E,"Handle a request with the given cmdid.",29,N],[11,"new",E,"Creates an empty waitable manager.",24,[[],[R[258]]]],[11,"add_waitable",E,"Add a new handle for the waitable manager to wait on.",24,[[["self"],["box",["iwaitable"]]]]],[11,"run",E,"Run the event loop. This will call wait_synchronization on…",24,N],[11,"new",E,"Create a new SessionWrapper from an open ServerSession and…",26,[[[R[253]],[T]],["sessionwrapper"]]],[11,"new",E,"Registers a new PortHandler of the given name to the sm:…",27,[[["str"]],[R[16],[R[259],"error"]]]],[11,"new_managed",E,"Registers a new PortHandler of the given name to the…",27,[[["str"]],[R[16],[R[259],"error"]]]],[11,"ty",R[254],E,18,[[["self"]],["u16"]]],[11,"set_ty",E,E,18,[[["self"],["u16"]]]],[11,R[826],E,E,18,[[["self"]],["u8"]]],[11,R[827],E,E,18,[[["self"],["u8"]]]],[11,R[828],E,E,18,[[["self"]],["u8"]]],[11,R[829],E,E,18,[[["self"],["u8"]]]],[11,R[830],E,E,18,[[["self"]],["u8"]]],[11,R[831],E,E,18,[[["self"],["u8"]]]],[11,R[832],E,E,18,[[["self"]],["u8"]]],[11,R[833],E,E,18,[[["self"],["u8"]]]],[11,R[834],E,E,18,[[["self"]],["u16"]]],[11,R[835],E,E,18,[[["self"],["u16"]]]],[11,R[836],E,E,18,[[["self"]],["u8"]]],[11,R[837],E,E,18,[[["self"],["u8"]]]],[11,R[838],E,E,18,[[["self"]],["bool"]]],[11,R[839],E,E,18,[[["self"],["bool"]]]],[11,"send_pid",E,E,19,[[["self"]],["bool"]]],[11,R[840],E,E,19,[[["self"],["bool"]]]],[11,R[841],E,E,19,[[["self"]],["u8"]]],[11,R[842],E,E,19,[[["self"],["u8"]]]],[11,R[843],E,E,19,[[["self"]],["u8"]]],[11,R[844],E,E,19,[[["self"],["u8"]]]],[11,"is_type_a",E,"Checks if this buffer is a Send Buffer.",22,[[["self"]],["bool"]]],[11,"is_type_b",E,"Checks if this buffer is a Receive Buffer.",22,[[["self"]],["bool"]]],[11,"from_mut_ref",E,"Creates an IPC buffer from a mutable reference and a type.…",20,[[[T],[R[260]]],[R[261]]]],[11,"from_ref",E,"Creates an IPC buffer from a reference and a type. The…",20,[[[T],[R[260]]],[R[261]]]],[11,"from_slice",E,"Creates an IPC buffer from a mutable slice and a type. The…",20,N],[11,"from_mut_slice",E,"Creates an IPC buffer from a slice and a type. The type…",20,N],[11,"from_ptr_len",E,"Creates an IPC buffer from a raw pointer, a len and a…",20,N],[11,"from_mut_ptr_len",E,"Creates an IPC buffer from a raw mut pointer, a len and a…",20,N],[11,"buftype",E,"Gets the [IPCBufferType] of this buffer. The buffer type…",20,[[["self"]],[R[260]]]],[11,"new_request",E,"Create a new request for the given cmdid. If a token is…",21,[[[R[83],["u32"]],["u32"]],["message"]]],[11,"new_response",E,"Create a new empty reply. If the request this reply is…",21,[[[R[83],["u32"]]],["message"]]],[11,"set_ty",E,"Sets the message type.",21,[[["self"],["messagety"]],["self"]]],[11,"set_error",E,"Set the error code from a reply.",21,[[["self"],["u32"]],["self"]]],[11,"error",E,"Get the error code from a reply.",21,[[["self"]],[R[16],["error"]]]],[11,"push_raw",E,"Sets the raw data of the message.",21,[[["self"],["raw"]],["self"]]],[11,"raw",E,"Gets the raw data of the message.",21,[[["self"]],["raw"]]],[11,"token",E,"Gets the token of a message. This token is used to track…",21,[[["self"]],[R[83],["u32"]]]],[11,"push_handle_move",E,"Move a handle over IPC. Once the message is sent, the…",21,[[["self"],["handle"]],["self"]]],[11,"push_handle_copy",E,"Copy a handle over IPC. The remote process will have a…",21,[[["self"],[R[257]]],["self"]]],[11,"pop_handle_move",E,"Retrieve a moved handle from this IPC message. Those are…",21,[[["self"]],[R[16],["handle","error"]]]],[11,"pop_handle_copy",E,"Retrieve a copied handle from this IPC message. Those are…",21,[[["self"]],[R[16],["handle","error"]]]],[11,"pop_pid",E,"Retrieve the PID of the remote process (if sent at all).…",21,[[["self"]],[R[16],["pid","error"]]]],[11,"pack",E,"Packs this IPC Message to an IPC buffer.",21,N],[11,"unpack",E,"Parse the passed buffer into an IPC Message.",21,N],[0,"sm",R[246],R[1023],N,N],[3,R[304],R[270],"Main interface of the service manager. Allows registering…",N,N],[12,"0",E,E,30,N],[11,"raw_new",E,"Connects to the Service Manager.",30,[[],[R[16],["iuserinterface","error"]]]],[11,R[1024],E,"Retrieves a service registered in the service manager.",30,[[["self"],["u64"]],[R[16],[R[250],"error"]]]],[11,R[1025],E,"Registers a service registered in the service manager.",30,[[["self"],["u64"],["bool"],["u32"]],[R[16],[R[249],"error"]]]],[0,"vi",R[246],"Vi Compositor service",N,N],[3,R[305],R[271],"Main compositor interface.",N,N],[12,"0",E,E,31,N],[3,"IBuffer",E,"A handle to a window. Created through the create_buffer…",N,N],[12,"0",E,E,32,N],[11,"raw_new",E,"Connects to the vi service.",31,[[],[R[16],[R[1010],"error"]]]],[11,R[1011],E,"Create a new window of the given size at the given…",31,[[["self"],[R[248]],["i32"],["i32"],["u32"],["u32"]],[R[16],["ibuffer","error"]]]],[11,"draw",E,"Ask the compositor to redraw the window. This will cause…",32,[[["self"]],[R[16],["error"]]]],[0,"error",R[246],"Error handling",N,N],[3,R[82],R[272],R[333],N,N],[12,"0",E,E,33,N],[3,"Module",E,E,N,N],[12,"0",E,E,34,N],[3,R[306],E,"Internal libuser errors.",N,N],[12,"0",E,E,35,N],[3,"SmError",E,"Service Manager errors.",N,N],[12,"0",E,E,36,N],[4,"Error",E,"The global error type. Every error defined here can be…",N,N],[13,"Kernel",E,"A Kernel Error. Usually returned by syscalls.",37,N],[13,"Sm",E,"Service Manager error.",37,N],[13,"Libuser",E,"Internal Libuser error.",37,N],[13,"Unknown",E,"An unknown error type. Either someone returned a custom…",37,N],[17,"_DERIVE_failure_Fail_FOR_Error",E,E,N,N],[11,"from_code",E,"Create an Error from a packed error code, creating a…",37,[[["u32"]],["error"]]],[11,"as_code",E,"Pack this error into an error code. Note that the returned…",37,[[["self"]],["u32"]]],[18,"Kernel",E,E,34,N],[18,"Sm",E,E,34,N],[18,"Vi",E,E,34,N],[18,"Libuser",E,E,34,N],[18,"AddressSpaceExhausted",E,"An attempt to find available space failed.",35,N],[18,"InvalidMoveHandleCount",E,"Too many move handles were passed to an IPC message.",35,N],[18,"InvalidCopyHandleCount",E,"Too many copy handles were passed to an IPC message.",35,N],[18,"PidMissing",E,"Attempted to read PID from an IPC message containing none.",35,N],[18,"OutOfProcesses",E,"Too many processes spawned.",36,N],[18,"NotInitialized",E,"Attempted to use the service manager without initializing…",36,N],[18,"MaxSessions",E,"This service already reached the maximum amount of…",36,N],[18,"ServiceAlreadyRegistered",E,"Attempted to register a service that already exists.",36,N],[18,"OutOfServices",E,"Too many services have been created.",36,N],[18,"InvalidName",E,"The name is too long. Make sure it's only 7 characters and…",36,N],[18,"ServiceNotRegistered",E,"Attempted to unregister a service that was not previously…",36,N],[18,"PermissionDenied",E,"Process SACs do not allow accessing or hosting this service.",36,N],[18,"ServiceAccessControlTooBig",E,"The provided SACs are too big.",36,N],[0,R[262],R[246],"Heap allocator.",N,N],[3,R[307],R[274],"The libuser heap allocator.",N,N],[12,"0",E,E,38,N],[11,"expand",E,R[845],38,[[[R[704]],[R[9]]],[R[16],[R[25]]]]],[11,"new",E,"Creates an empty heap.",38,[[],[R[262]]]],[0,R[996],R[246],"Terminal rendering APIs",N,N],[3,"Pos",R[275],"Just an x and a y",N,N],[12,"x",E,E,39,N],[12,"y",E,E,39,N],[3,"Terminal",E,"A struct for logging text to the window. Renders…",N,N],[12,R[493],E,"Rendering target for this terminal.",40,N],[12,"cursor_pos",E,"Cursor pos, in pixels. Does not account for bpp.…",40,N],[12,"font",E,"The font in use for this terminal.",40,N],[12,"cached_glyphs",E,"We cache ascii glyphs to avoid rendering them every time.",40,N],[12,"advance_width",E,"Expected to be the same for every glyph since it should be…",40,N],[12,"linespace",E,"The distance between two baselines.",40,N],[12,"ascent",E,"The maximum ascent in the font.",40,N],[12,"descent",E,"The maximum descent in the font.",40,N],[4,R[308],E,"Window creation requested size.",N,N],[13,"Fullscreen",E,"Takes the full screen.",41,N],[13,"FontLines",E,"Takes a given amount of lines.",41,N],[13,"Manual",E,"Manually position the window at the given x/y, with a…",41,N],[7,"FONT",E,"The font we choose to render in",N,N],[17,"FONT_SIZE",E,"The size we choose to render in",N,N],[11,"new",E,"Creates a new Window of the requested size for terminal…",40,[[[R[282]]],[R[16],["error"]]]],[11,"draw",E,R[263],40,[[["self"]],[R[16],["error"]]]],[11,"carriage_return",E,"Move the cursor to the beginning of the current line.",40,[[["self"]]]],[11,"line_feed",E,"Move the cursor to the beginning of the next line,…",40,[[["self"]]]],[11,"advance_pos",E,"Move the cursor to the next position for drawing a…",40,[[["self"]]]],[11,"move_pos_back",E,"Move the cursor back to the previous position. If we are…",40,[[["self"]]]],[11,"scroll_screen",E,"scrolls the whole screen by one line. self.pos must be on…",40,[[["self"]]]],[11,"clear",E,"Clears the whole screen and reset cursor",40,[[["self"]]]],[11,"print_attr",E,"Prints a string to the screen with attributes",40,[[["self"],["str"],["color"],["color"]]]],[11,"display_glyph_in_box",E,"Copies a rendered character to the screen, displaying it…",40,[[["glyphbitmap"],["window"],[R[9]],[R[9]],[R[9]],["color"],["color"],["pos"]]]],[0,"window",R[246],"Window creation and drawing APIs",N,N],[3,"Color",R[276],R[1012],N,N],[12,"b",E,"Blue component",42,N],[12,"g",E,"Green component",42,N],[12,"r",E,"Red component",42,N],[12,"a",E,"Alpha component",42,N],[3,"Window",E,"A managed window.",N,N],[12,"buf",E,"The framebuffer memory shared with Vi. Drawing to this…",43,N],[12,"handle",E,"Vi handle for this window.",43,N],[12,"width",E,"Width of the window.",43,N],[12,"height",E,"Height of the window.",43,N],[12,"bpp",E,"Bits per pixel for the framebuffer.",43,N],[11,"rgb",E,"Creates a color from the r/g/b components. Alpha will be…",42,[[["u8"],["u8"],["u8"]],["color"]]],[11,"new",E,"Creates a window in the vi compositor.",43,[[["i32"],["i32"],["u32"],["u32"]],[R[16],["window","error"]]]],[11,"draw",E,R[263],43,[[["self"]],[R[16],["error"]]]],[11,"width",E,"window width in pixels. Does not account for bpp",43,[[["self"]],[R[9]]]],[11,"height",E,"window height in pixels. Does not account for bpp",43,[[["self"]],[R[9]]]],[11,"bpp",E,R[1013],43,[[["self"]],[R[9]]]],[11,R[1014],E,R[1015],43,[[["self"],[R[9]],[R[9]]],[R[9]]]],[11,"write_px",E,"Writes a pixel in the window respecting the bgr pattern",43,[[["self"],[R[9]],["color"]]]],[11,R[1016],E,"Writes a pixel in the window respecting the bgr pattern…",43,[[["self"],[R[9]],[R[9]],["color"]]]],[11,"get_buffer",E,R[1017],43,N],[11,"clear",E,"Clears the whole window, making it black.",43,[[["self"]]]],[0,"log_impl",R[246],"Implementation for the log crate",N,N],[3,R[264],R[277],"Buffer where pending writes are stored. The buffer is only…",N,N],[12,R[85],E,E,44,N],[3,"Logger",E,"Log implementation structure.",N,N],[5,"init",E,"Initializes the global logger with the svc logger.",N,[[]]],[7,R[264],E,E,N,N],[0,R[846],R[246],E,N,N],[5,R[847],"kfs_libuser::__rg_allocator_abi",E,N,N],[5,R[848],E,E,N,N],[5,R[849],E,E,N,N],[5,R[850],E,E,N,N],[7,R[851],R[246],"Global allocator. Every implicit allocation in the rust…",N,N],[8,R[309],E,"A trait for implementing arbitrary return types in the…",N,N],[10,"report",E,"Is called to get the representation of the value as status…",45,[[["self"]],["i32"]]],[14,R[591],E,"Define the capabilities array in the .kernel_caps section.…",N,N],[14,"object",E,"Auto derive Object.",N,N],[11,"from",R[265],E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,R[268],E,E,3,[[["self"]],[T]]],[11,R[266],E,E,3,N],[11,"from",R[247],E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,R[268],E,E,5,[[["self"]],[T]]],[11,R[266],E,E,5,N],[11,"from",E,E,6,[[[T]],[T]]],[11,R[12],E,E,6,[[[U]],[R[16]]]],[11,R[13],E,E,6,[[["self"]],[R[16]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[R[19]]]],[11,"from",R[267],E,7,[[[T]],[T]]],[11,R[12],E,E,7,[[[U]],[R[16]]]],[11,R[13],E,E,7,[[["self"]],[R[16]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[R[19]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[12],E,E,8,[[[U]],[R[16]]]],[11,R[13],E,E,8,[[["self"]],[R[16]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[R[19]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[12],E,E,9,[[[U]],[R[16]]]],[11,R[13],E,E,9,[[["self"]],[R[16]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[R[19]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[12],E,E,10,[[[U]],[R[16]]]],[11,R[13],E,E,10,[[["self"]],[R[16]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[R[19]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[12],E,E,11,[[[U]],[R[16]]]],[11,R[13],E,E,11,[[["self"]],[R[16]]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[R[19]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[12],E,E,12,[[[U]],[R[16]]]],[11,R[13],E,E,12,[[["self"]],[R[16]]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[18],E,E,12,[[["self"]],[T]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[17],E,E,12,[[["self"]],[R[19]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[12],E,E,13,[[[U]],[R[16]]]],[11,R[13],E,E,13,[[["self"]],[R[16]]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[18],E,E,13,[[["self"]],[T]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[17],E,E,13,[[["self"]],[R[19]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[12],E,E,14,[[[U]],[R[16]]]],[11,R[13],E,E,14,[[["self"]],[R[16]]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[18],E,E,14,[[["self"]],[T]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[17],E,E,14,[[["self"]],[R[19]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[12],E,E,15,[[[U]],[R[16]]]],[11,R[13],E,E,15,[[["self"]],[R[16]]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[18],E,E,15,[[["self"]],[T]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[17],E,E,15,[[["self"]],[R[19]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[12],E,E,16,[[[U]],[R[16]]]],[11,R[13],E,E,16,[[["self"]],[R[16]]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[18],E,E,16,[[["self"]],[T]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[17],E,E,16,[[["self"]],[R[19]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[12],E,E,17,[[[U]],[R[16]]]],[11,R[13],E,E,17,[[["self"]],[R[16]]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[18],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[R[19]]]],[11,R[268],E,E,17,[[["self"]],[T]]],[11,R[266],E,E,17,N],[11,"from",R[254],E,18,[[[T]],[T]]],[11,R[12],E,E,18,[[[U]],[R[16]]]],[11,R[13],E,E,18,[[["self"]],[R[16]]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[18],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[R[19]]]],[11,"bit",E,E,18,[[["self"],[R[9]]],["bool"]]],[11,"set_bit",E,E,18,N],[11,"from",E,E,19,[[[T]],[T]]],[11,R[12],E,E,19,[[[U]],[R[16]]]],[11,R[13],E,E,19,[[["self"]],[R[16]]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[18],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[R[19]]]],[11,"bit",E,E,19,[[["self"],[R[9]]],["bool"]]],[11,"set_bit",E,E,19,N],[11,"from",E,E,20,[[[T]],[T]]],[11,R[12],E,E,20,[[[U]],[R[16]]]],[11,R[13],E,E,20,[[["self"]],[R[16]]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[18],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[17],E,E,20,[[["self"]],[R[19]]]],[11,R[268],E,E,20,[[["self"]],[T]]],[11,R[266],E,E,20,N],[11,"from",E,E,21,[[[T]],[T]]],[11,R[12],E,E,21,[[[U]],[R[16]]]],[11,R[13],E,E,21,[[["self"]],[R[16]]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[18],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[R[19]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[12],E,E,22,[[[U]],[R[16]]]],[11,R[13],E,E,22,[[["self"]],[R[16]]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[18],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[R[19]]]],[11,R[268],E,E,22,[[["self"]],[T]]],[11,R[266],E,E,22,N],[11,"from",E,E,23,[[[T]],[T]]],[11,R[12],E,E,23,[[[U]],[R[16]]]],[11,R[13],E,E,23,[[["self"]],[R[16]]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[18],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[R[19]]]],[11,"from",R[269],E,24,[[[T]],[T]]],[11,R[12],E,E,24,[[[U]],[R[16]]]],[11,R[13],E,E,24,[[["self"]],[R[16]]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[18],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[R[19]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[12],E,E,25,[[[U]],[R[16]]]],[11,R[13],E,E,25,[[["self"]],[R[16]]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[18],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[R[19]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[12],E,E,26,[[[U]],[R[16]]]],[11,R[13],E,E,26,[[["self"]],[R[16]]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[18],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[R[19]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[12],E,E,27,[[[U]],[R[16]]]],[11,R[13],E,E,27,[[["self"]],[R[16]]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[18],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[R[19]]]],[11,"from",R[270],E,30,[[[T]],[T]]],[11,R[12],E,E,30,[[[U]],[R[16]]]],[11,R[13],E,E,30,[[["self"]],[R[16]]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[18],E,E,30,[[["self"]],[T]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[R[19]]]],[11,"from",R[271],E,31,[[[T]],[T]]],[11,R[12],E,E,31,[[[U]],[R[16]]]],[11,R[13],E,E,31,[[["self"]],[R[16]]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[18],E,E,31,[[["self"]],[T]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[R[19]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[12],E,E,32,[[[U]],[R[16]]]],[11,R[13],E,E,32,[[["self"]],[R[16]]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[18],E,E,32,[[["self"]],[T]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[R[19]]]],[11,"from",R[272],E,33,[[[T]],[T]]],[11,R[12],E,E,33,[[[U]],[R[16]]]],[11,R[13],E,E,33,[[["self"]],[R[16]]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[18],E,E,33,[[["self"]],[T]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[R[19]]]],[11,R[268],E,E,33,[[["self"]],[T]]],[11,R[266],E,E,33,N],[11,R[273],E,E,33,[[["self"]],["string"]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[12],E,E,34,[[[U]],[R[16]]]],[11,R[13],E,E,34,[[["self"]],[R[16]]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[18],E,E,34,[[["self"]],[T]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[R[19]]]],[11,R[268],E,E,34,[[["self"]],[T]]],[11,R[266],E,E,34,N],[11,"from",E,E,35,[[[T]],[T]]],[11,R[12],E,E,35,[[[U]],[R[16]]]],[11,R[13],E,E,35,[[["self"]],[R[16]]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[18],E,E,35,[[["self"]],[T]]],[11,R[14],E,E,35,[[["self"]],[T]]],[11,R[17],E,E,35,[[["self"]],[R[19]]]],[11,R[268],E,E,35,[[["self"]],[T]]],[11,R[266],E,E,35,N],[11,"from",E,E,36,[[[T]],[T]]],[11,R[12],E,E,36,[[[U]],[R[16]]]],[11,R[13],E,E,36,[[["self"]],[R[16]]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[18],E,E,36,[[["self"]],[T]]],[11,R[14],E,E,36,[[["self"]],[T]]],[11,R[17],E,E,36,[[["self"]],[R[19]]]],[11,R[268],E,E,36,[[["self"]],[T]]],[11,R[266],E,E,36,N],[11,"from",E,E,37,[[[T]],[T]]],[11,R[12],E,E,37,[[[U]],[R[16]]]],[11,R[13],E,E,37,[[["self"]],[R[16]]]],[11,"into",E,E,37,[[["self"]],[U]]],[11,R[18],E,E,37,[[["self"]],[T]]],[11,R[14],E,E,37,[[["self"]],[T]]],[11,R[17],E,E,37,[[["self"]],[R[19]]]],[11,R[273],E,E,37,[[["self"]],["string"]]],[11,"as_fail",E,E,37,[[["self"]],["fail"]]],[11,"from",R[274],E,38,[[[T]],[T]]],[11,R[12],E,E,38,[[[U]],[R[16]]]],[11,R[13],E,E,38,[[["self"]],[R[16]]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[18],E,E,38,[[["self"]],[T]]],[11,R[14],E,E,38,[[["self"]],[T]]],[11,R[17],E,E,38,[[["self"]],[R[19]]]],[11,"from",R[275],E,39,[[[T]],[T]]],[11,R[12],E,E,39,[[[U]],[R[16]]]],[11,R[13],E,E,39,[[["self"]],[R[16]]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[18],E,E,39,[[["self"]],[T]]],[11,R[14],E,E,39,[[["self"]],[T]]],[11,R[17],E,E,39,[[["self"]],[R[19]]]],[11,R[268],E,E,39,[[["self"]],[T]]],[11,R[266],E,E,39,N],[11,"from",E,E,40,[[[T]],[T]]],[11,R[12],E,E,40,[[[U]],[R[16]]]],[11,R[13],E,E,40,[[["self"]],[R[16]]]],[11,"into",E,E,40,[[["self"]],[U]]],[11,R[18],E,E,40,[[["self"]],[T]]],[11,R[14],E,E,40,[[["self"]],[T]]],[11,R[17],E,E,40,[[["self"]],[R[19]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[12],E,E,41,[[[U]],[R[16]]]],[11,R[13],E,E,41,[[["self"]],[R[16]]]],[11,"into",E,E,41,[[["self"]],[U]]],[11,R[18],E,E,41,[[["self"]],[T]]],[11,R[14],E,E,41,[[["self"]],[T]]],[11,R[17],E,E,41,[[["self"]],[R[19]]]],[11,R[268],E,E,41,[[["self"]],[T]]],[11,R[266],E,E,41,N],[11,"from",R[276],E,42,[[[T]],[T]]],[11,R[12],E,E,42,[[[U]],[R[16]]]],[11,R[13],E,E,42,[[["self"]],[R[16]]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[18],E,E,42,[[["self"]],[T]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[17],E,E,42,[[["self"]],[R[19]]]],[11,R[268],E,E,42,[[["self"]],[T]]],[11,R[266],E,E,42,N],[11,"from",E,E,43,[[[T]],[T]]],[11,R[12],E,E,43,[[[U]],[R[16]]]],[11,R[13],E,E,43,[[["self"]],[R[16]]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[18],E,E,43,[[["self"]],[T]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[17],E,E,43,[[["self"]],[R[19]]]],[11,"from",R[277],E,44,[[[T]],[T]]],[11,R[12],E,E,44,[[[U]],[R[16]]]],[11,R[13],E,E,44,[[["self"]],[R[16]]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[18],E,E,44,[[["self"]],[T]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[17],E,E,44,[[["self"]],[R[19]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[12],E,E,46,[[[U]],[R[16]]]],[11,R[13],E,E,46,[[["self"]],[R[16]]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[18],E,E,46,[[["self"]],[T]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[17],E,E,46,[[["self"]],[R[19]]]],[11,"clone",R[265],E,3,[[["self"]],["pio"]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"read",E,"Read",3,[[["self"]],["u8"]]],[11,"write",E,"Write",3,N],[11,"read",E,"Read",3,[[["self"]],["u16"]]],[11,"write",E,"Write",3,N],[11,"read",E,"Read",3,[[["self"]],["u32"]]],[11,"write",E,"Write",3,N],[11,R[62],R[247],E,5,[[["self"],[R[34]]],[R[83],[R[61]]]]],[11,"lt",E,E,5,[[["self"],[R[34]]],["bool"]]],[11,"le",E,E,5,[[["self"],[R[34]]],["bool"]]],[11,"gt",E,E,5,[[["self"],[R[34]]],["bool"]]],[11,"ge",E,E,5,[[["self"],[R[34]]],["bool"]]],[11,R[72],E,R[73],5,N],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[272],E,33,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[247],E,5,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,4,[[["self"],[R[20]]],[R[16],["error"]]]],[11,R[60],R[272],E,33,N],[11,R[60],R[247],E,5,N],[11,"sub",E,R[63],5,[[["self"],[R[34]]],[R[34]]]],[11,R[76],E,E,5,[[[T]],[R[34]]]],[11,"hash",E,E,5,N],[11,R[77],E,E,5,[[],[R[34]]]],[11,R[77],E,E,4,[[],[R[492]]]],[11,"bitand",E,R[67],5,[[["self"],[R[34]]],[R[34]]]],[11,"cmp",E,E,5,[[["self"],[R[34]]],[R[61]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16],["error"]]]],[11,R[74],E,R[75],5,N],[11,"not",E,R[66],5,[[["self"]],[R[34]]]],[11,"clone",E,E,5,[[["self"]],[R[34]]]],[11,"clone",R[272],E,33,[[["self"]],[R[25]]]],[11,R[64],R[247],R[65],5,N],[11,"fmt",R[272],E,33,[[["self"],[R[20]]],[R[16],["error"]]]],[11,R[70],R[247],R[71],5,N],[11,"bitxor",E,R[69],5,[[["self"],[R[34]]],[R[34]]]],[11,"extend",E,E,5,N],[11,"bitor",E,R[68],5,[[["self"],[R[34]]],[R[34]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"eq",R[272],E,33,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,33,[[["self"],[R[25]]],["bool"]]],[11,"eq",R[247],E,5,[[["self"],[R[34]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[34]]],["bool"]]],[11,R[278],R[269],E,26,[[["self"]],[R[257]]]],[11,R[279],E,E,26,[[["self"],[R[258]]],[R[16],["bool","error"]]]],[11,R[278],E,E,27,[[["self"]],[R[257]]]],[11,R[279],E,E,27,[[["self"],[R[258]]],[R[16],["bool","error"]]]],[11,"fmt",R[272],E,37,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[267],E,7,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,8,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,9,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,10,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,11,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,12,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,13,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,14,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,15,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,16,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[269],E,24,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,25,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,26,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,27,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[254],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,19,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,22,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,23,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,21,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[270],E,30,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[271],E,31,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[272],E,37,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,34,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,35,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,36,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[275],E,39,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,41,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[276],E,42,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,43,[[["self"],[R[20]]],[R[16]]]],[11,"eq",R[267],E,17,[[["self"],["pid"]],["bool"]]],[11,"ne",E,E,17,[[["self"],["pid"]],["bool"]]],[11,"eq",R[272],E,34,[[["self"],["module"]],["bool"]]],[11,"ne",E,E,34,[[["self"],["module"]],["bool"]]],[11,"eq",E,E,35,[[["self"],[R[280]]],["bool"]]],[11,"ne",E,E,35,[[["self"],[R[280]]],["bool"]]],[11,"eq",E,E,36,[[["self"],["smerror"]],["bool"]]],[11,"ne",E,E,36,[[["self"],["smerror"]],["bool"]]],[11,R[60],R[267],E,17,N],[11,R[60],R[272],E,34,N],[11,R[60],E,E,35,N],[11,R[60],E,E,36,N],[11,"deref",R[269],E,25,[[["self"]],[T]]],[11,"deref",R[277],E,44,[[["self"]],["mutex"]]],[11,R[211],R[269],E,25,[[["self"]],[T]]],[11,"drop",R[267],E,7,[[["self"]]]],[11,"drop",E,E,10,[[["self"]]]],[11,"drop",E,E,16,[[["self"]]]],[11,"index",R[269],E,25,N],[11,"from",R[272],E,37,[[[R[25]]],["self"]]],[11,"from",E,E,37,[[[R[280]]],["self"]]],[11,"from",E,E,37,[[["smerror"]],["self"]]],[11,R[281],R[275],E,40,[[["self"],["str"]],[R[16],["error"]]]],[11,R[281],R[277],E,46,[[["self"],["str"]],[R[16]]]],[11,"clone",R[267],E,17,[[["self"]],["pid"]]],[11,"clone",R[254],E,22,[[["self"]],[R[260]]]],[11,"clone",E,E,20,[[["self"]],[R[261]]]],[11,"clone",R[272],E,34,[[["self"]],["module"]]],[11,"clone",E,E,35,[[["self"]],[R[280]]]],[11,"clone",E,E,36,[[["self"]],["smerror"]]],[11,"clone",R[275],E,39,[[["self"]],["pos"]]],[11,"clone",E,E,41,[[["self"]],[R[282]]]],[11,"clone",R[276],E,42,[[["self"]],["color"]]],[11,R[77],R[269],E,24,[[],[R[258]]]],[11,"alloc",R[274],E,38,N],[11,"dealloc",E,E,38,N],[11,R[283],R[254],E,18,[[["self"],[R[9]],[R[9]]],[T]]],[11,R[284],E,E,18,[[["self"],[R[9]],[R[9]],[T]]]],[11,R[283],E,E,19,[[["self"],[R[9]],[R[9]]],[T]]],[11,R[284],E,E,19,[[["self"],[R[9]],[R[9]],[T]]]],[11,"name",R[272],E,37,[[["self"]],[R[83],["str"]]]],[11,"cause",E,E,37,[[["self"]],[R[83],["fail"]]]],[11,R[285],E,E,37,[[["self"]],[R[83],[R[285]]]]],[11,"enabled",R[277],E,46,[[["self"],[R[852]]],["bool"]]],[11,"log",E,E,46,[[["self"],["record"]]]],[11,"flush",E,E,46,[[["self"]]]],[11,R[214],E,E,44,[[["self"]]]],[11,"new",R[265],R[319],1,[[["i"]],[R[853]]]],[11,"read",E,R[4],1,N],[11,"readf",E,R[5],1,N],[11,"new",E,R[320],2,[[["i"]],[R[321]]]],[11,"write",E,R[6],2,N],[11,"new",E,R[322],3,[[["u16"]],["pio"]]],[18,R[56],R[247],R[489],5,N],[18,R[57],E,R[490],5,N],[18,R[58],E,R[491],5,N],[11,"empty",E,R[32],5,[[],[R[34]]]],[11,"all",E,R[33],5,[[],[R[34]]]],[11,"bits",E,R[35],5,[[["self"]],["u32"]]],[11,R[36],E,R[37],5,[[["u32"]],[R[83],[R[34]]]]],[11,R[38],E,R[39],5,[[["u32"]],[R[34]]]],[11,R[40],E,R[41],5,[[["self"]],["bool"]]],[11,"is_all",E,R[42],5,[[["self"]],["bool"]]],[11,R[43],E,R[44],5,[[["self"],[R[34]]],["bool"]]],[11,R[45],E,R[46],5,[[["self"],[R[34]]],["bool"]]],[11,"insert",E,R[47],5,N],[11,"remove",E,R[48],5,N],[11,"toggle",E,R[49],5,N],[11,"set",E,R[50],5,N],[11,R[855],R[272],R[366],33,[[["self"]],[R[9]]]],[11,R[367],E,R[368],33,[[["u32"]],[R[25]]]],[11,R[369],E,R[370],33,[[["u32"]],[R[25]]]],[11,R[371],E,R[372],33,[[["self"]],["u32"]]],[18,R[334],E,R[335],33,N],[18,R[336],E,R[337],33,N],[18,R[338],E,R[339],33,N],[18,R[340],E,R[341],33,N],[18,R[342],E,R[343],33,N],[18,R[344],E,R[345],33,N],[18,R[346],E,R[347],33,N],[18,R[348],E,R[349],33,N],[18,R[350],E,R[351],33,N],[18,R[352],E,R[353],33,N],[18,"Timeout",E,R[354],33,N],[18,R[854],E,R[355],33,N],[18,R[356],E,R[357],33,N],[18,R[358],E,R[359],33,N],[18,R[360],E,R[361],33,N],[18,R[362],E,R[363],33,N],[18,R[364],E,R[365],33,N]],"p":[[8,"Io"],[3,R[21]],[3,R[22]],[3,"Pio"],[3,R[81]],[3,R[80]],[3,R[286]],[3,"Handle"],[3,R[287]],[3,R[288]],[3,R[289]],[3,R[290]],[3,R[291]],[3,R[292]],[3,"Thread"],[3,R[293]],[3,R[294]],[3,"Pid"],[3,R[295]],[3,R[296]],[3,R[297]],[3,"Message"],[4,R[298]],[4,R[299]],[3,R[300]],[3,"Align16"],[3,R[301]],[3,R[302]],[8,R[303]],[8,"Object"],[3,R[304]],[3,R[305]],[3,"IBuffer"],[3,R[82]],[3,"Module"],[3,R[306]],[3,"SmError"],[4,"Error"],[3,R[307]],[3,"Pos"],[3,"Terminal"],[4,R[308]],[3,"Color"],[3,"Window"],[3,R[264]],[8,R[309]],[3,"Logger"]]};
searchIndex[R[24]]={"doc":"Types shared by user and kernel","i":[[3,R[78],R[24],"The type of this memory area.",N,N],[12,"0",E,E,0,N],[3,R[79],E,"Low-level attributes of a memory mapping.",N,N],[12,"bits",E,E,1,N],[3,R[80],E,R[323],N,N],[12,"bits",E,E,2,N],[3,R[81],E,R[324],N,N],[12,"baseaddr",E,R[325],3,N],[12,"size",E,R[326],3,N],[12,"memtype",E,R[327],3,N],[12,"memattr",E,R[328],3,N],[12,"perms",E,R[329],3,N],[12,R[330],E,R[331],3,N],[12,R[332],E,"Unknown.",3,N],[3,R[26],E,"A table associating a syscall name string for every…",N,N],[12,R[85],E,E,4,N],[0,"error",E,"Kernel errors",N,N],[3,R[82],R[51],R[333],N,N],[12,"0",E,E,5,N],[18,R[334],E,R[335],5,N],[18,R[336],E,R[337],5,N],[18,R[338],E,R[339],5,N],[18,R[340],E,R[341],5,N],[18,R[342],E,R[343],5,N],[18,R[344],E,R[345],5,N],[18,R[346],E,R[347],5,N],[18,R[348],E,R[349],5,N],[18,R[350],E,R[351],5,N],[18,R[352],E,R[353],5,N],[18,"Timeout",E,R[354],5,N],[18,R[854],E,R[355],5,N],[18,R[356],E,R[357],5,N],[18,R[358],E,R[359],5,N],[18,R[360],E,R[361],5,N],[18,R[362],E,R[363],5,N],[18,R[364],E,R[365],5,N],[11,R[855],E,R[366],5,[[["self"]],[R[9]]]],[11,R[367],E,R[368],5,[[["u32"]],[R[25]]]],[11,R[369],E,R[370],5,[[["u32"]],[R[25]]]],[11,R[371],E,R[372],5,[[["self"]],["u32"]]],[0,"nr",R[24],R[373],N,N],[17,R[374],"kfs_libkern::nr",E,N,N],[17,R[375],E,E,N,N],[17,R[376],E,E,N,N],[17,R[377],E,E,N,N],[17,R[378],E,E,N,N],[17,R[379],E,E,N,N],[17,R[380],E,E,N,N],[17,R[381],E,E,N,N],[17,R[382],E,E,N,N],[17,R[383],E,E,N,N],[17,R[384],E,E,N,N],[17,R[385],E,E,N,N],[17,R[386],E,E,N,N],[17,R[387],E,E,N,N],[17,R[388],E,E,N,N],[17,R[389],E,E,N,N],[17,R[390],E,E,N,N],[17,R[391],E,E,N,N],[17,R[392],E,E,N,N],[17,R[393],E,E,N,N],[17,R[394],E,E,N,N],[17,R[395],E,E,N,N],[17,R[396],E,E,N,N],[17,R[397],E,E,N,N],[17,R[398],E,E,N,N],[17,R[399],E,E,N,N],[17,R[400],E,E,N,N],[17,R[401],E,E,N,N],[17,R[402],E,E,N,N],[17,R[403],E,E,N,N],[17,R[404],E,E,N,N],[17,R[405],E,E,N,N],[17,R[406],E,E,N,N],[17,R[407],E,E,N,N],[17,R[408],E,E,N,N],[17,R[409],E,E,N,N],[17,R[410],E,E,N,N],[17,"Break",E,E,N,N],[17,R[411],E,E,N,N],[17,R[412],E,E,N,N],[17,"GetInfo",E,E,N,N],[17,R[413],E,E,N,N],[17,R[414],E,E,N,N],[17,R[415],E,E,N,N],[17,R[416],E,E,N,N],[17,R[417],E,E,N,N],[17,R[418],E,E,N,N],[17,R[419],E,E,N,N],[17,R[420],E,E,N,N],[17,R[421],E,E,N,N],[17,R[422],E,E,N,N],[17,R[423],E,E,N,N],[17,R[424],E,E,N,N],[17,"DumpInfo",E,E,N,N],[17,R[425],E,E,N,N],[17,R[426],E,E,N,N],[17,R[427],E,E,N,N],[17,R[428],E,E,N,N],[17,R[429],E,E,N,N],[17,R[430],E,E,N,N],[17,R[431],E,E,N,N],[17,R[432],E,E,N,N],[17,R[433],E,E,N,N],[17,R[434],E,E,N,N],[17,R[435],E,E,N,N],[17,R[436],E,E,N,N],[17,R[437],E,E,N,N],[17,R[438],E,E,N,N],[17,R[439],E,E,N,N],[17,R[440],E,E,N,N],[17,R[441],E,E,N,N],[17,R[442],E,E,N,N],[17,R[443],E,E,N,N],[17,R[444],E,E,N,N],[17,R[445],E,E,N,N],[17,R[446],E,E,N,N],[17,R[447],E,E,N,N],[17,R[448],E,E,N,N],[17,R[449],E,E,N,N],[17,R[450],E,E,N,N],[17,R[451],E,E,N,N],[17,R[452],E,E,N,N],[17,R[453],E,E,N,N],[17,R[454],E,E,N,N],[17,R[455],E,E,N,N],[17,R[456],E,E,N,N],[17,R[457],E,E,N,N],[17,R[458],E,E,N,N],[17,R[459],E,E,N,N],[17,R[460],E,E,N,N],[17,R[461],E,E,N,N],[17,R[462],E,E,N,N],[17,R[463],E,E,N,N],[17,R[464],E,E,N,N],[17,R[465],E,E,N,N],[17,R[466],E,E,N,N],[17,R[467],E,E,N,N],[17,R[468],E,E,N,N],[17,R[469],E,E,N,N],[17,R[470],E,E,N,N],[17,R[471],E,E,N,N],[17,R[472],E,E,N,N],[17,R[473],E,E,N,N],[17,R[474],E,E,N,N],[17,R[475],E,E,N,N],[17,R[476],E,E,N,N],[17,R[477],E,E,N,N],[17,R[478],E,E,N,N],[17,R[479],E,E,N,N],[17,R[480],E,E,N,N],[17,R[481],E,E,N,N],[17,R[482],E,E,N,N],[17,R[483],E,E,N,N],[17,R[484],E,E,N,N],[17,R[485],E,E,N,N],[17,R[486],E,E,N,N],[17,R[487],E,E,N,N],[17,R[488],E,E,N,N],[17,"MaxSvc",E,E,N,N],[7,R[26],R[24],E,N,N],[18,"Unmapped",E,"An unmapped memory region. Reading will lead to a data…",0,N],[18,"Io",E,R[27],0,N],[18,"Normal",E,R[27],0,N],[18,"CodeStatic",E,"Mapped during create_process",0,N],[18,"CodeMutable",E,"Transition from MemoryType::CodeStatic performed by…",0,N],[18,"Heap",E,"Mapped using `set_heap_size` syscall.",0,N],[18,R[293],E,"Mapped using `map_shared_memory` syscall.",0,N],[18,"Alias",E,R[28],0,N],[18,"ModuleCodeStatic",E,"Mapped using `map_process_code_memory` syscall.",0,N],[18,"ModuleCodeMutable",E,"Transition from MemoryType::ModuleCodeStatic by…",0,N],[18,"IpcBuffer0",E,"IPC buffers with descriptor flags=0.",0,N],[18,"Stack",E,R[28],0,N],[18,"ThreadLocal",E,"Mapped during `create_thread` syscall.",0,N],[18,"TransferMemoryIsolated",E,R[29],0,N],[18,"TransferMemory",E,R[29],0,N],[18,R[707],E,"Mapped using `map_process_memory` syscall.",0,N],[18,"Reserved",E,"Reserved memory area, used internally by kernel, should…",0,N],[18,"IpcBuffer1",E,"IPC buffers with descriptor flags=1.",0,N],[18,"IpcBuffer3",E,"IPC buffers with descriptor flags=3.",0,N],[18,R[723],E,"Mapped in kernel during `create_thread`. Should not be…",0,N],[18,"CodeReadOnly",E,R[30],0,N],[18,"CodeWritable",E,R[30],0,N],[18,R[52],E,"Is mapped in more than one area.",1,N],[18,R[53],E,"Is mapped through an IPC request.",1,N],[18,R[54],E,"Is a device mapping.",1,N],[18,R[55],E,"Is caching disabled in the MMU.",1,N],[11,"empty",E,R[32],1,[[],[R[31]]]],[11,"all",E,R[33],1,[[],[R[31]]]],[11,"bits",E,R[35],1,[[["self"]],["u32"]]],[11,R[36],E,R[37],1,[[["u32"]],[R[83],[R[31]]]]],[11,R[38],E,R[39],1,[[["u32"]],[R[31]]]],[11,R[40],E,R[41],1,[[["self"]],["bool"]]],[11,"is_all",E,R[42],1,[[["self"]],["bool"]]],[11,R[43],E,R[44],1,[[["self"],[R[31]]],["bool"]]],[11,R[45],E,R[46],1,[[["self"],[R[31]]],["bool"]]],[11,"insert",E,R[47],1,[[["self"],[R[31]]]]],[11,"remove",E,R[48],1,[[["self"],[R[31]]]]],[11,"toggle",E,R[49],1,[[["self"],[R[31]]]]],[11,"set",E,R[50],1,[[["self"],[R[31]],["bool"]]]],[18,R[56],E,R[489],2,N],[18,R[57],E,R[490],2,N],[18,R[58],E,R[491],2,N],[11,"empty",E,R[32],2,[[],[R[34]]]],[11,"all",E,R[33],2,[[],[R[34]]]],[11,"bits",E,R[35],2,[[["self"]],["u32"]]],[11,R[36],E,R[37],2,[[["u32"]],[R[83],[R[34]]]]],[11,R[38],E,R[39],2,[[["u32"]],[R[34]]]],[11,R[40],E,R[41],2,[[["self"]],["bool"]]],[11,"is_all",E,R[42],2,[[["self"]],["bool"]]],[11,R[43],E,R[44],2,[[["self"],[R[34]]],["bool"]]],[11,R[45],E,R[46],2,[[["self"],[R[34]]],["bool"]]],[11,"insert",E,R[47],2,[[["self"],[R[34]]]]],[11,"remove",E,R[48],2,[[["self"],[R[34]]]]],[11,"toggle",E,R[49],2,[[["self"],[R[34]]]]],[11,"set",E,R[50],2,[[["self"],[R[34]],["bool"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"from",R[51],E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,R[52],R[24],E,1,[[["self"]],["bool"]]],[11,R[53],E,E,1,[[["self"]],["bool"]]],[11,R[54],E,E,1,[[["self"]],["bool"]]],[11,R[55],E,E,1,[[["self"]],["bool"]]],[11,R[52],E,E,1,[[],["u32"]]],[11,R[53],E,E,1,[[],["u32"]]],[11,R[54],E,E,1,[[],["u32"]]],[11,R[55],E,E,1,[[],["u32"]]],[11,R[56],E,E,2,[[["self"]],["bool"]]],[11,R[57],E,E,2,[[["self"]],["bool"]]],[11,R[58],E,E,2,[[["self"]],["bool"]]],[11,R[56],E,E,2,[[],["u32"]]],[11,R[57],E,E,2,[[],["u32"]]],[11,R[58],E,E,2,[[],["u32"]]],[11,"fmt",R[51],E,5,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[24],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,3,[[["self"],[R[20]]],[R[16]]]],[11,"eq",R[51],E,5,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[25]]],["bool"]]],[11,"eq",R[24],E,0,[[["self"],[R[59]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[59]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,R[60],R[51],E,5,N],[11,R[60],R[24],E,0,N],[11,R[60],E,E,1,N],[11,R[60],E,E,2,N],[11,"cmp",E,E,1,[[["self"],[R[31]]],[R[61]]]],[11,"cmp",E,E,2,[[["self"],[R[34]]],[R[61]]]],[11,R[62],E,E,1,[[["self"],[R[31]]],[R[83],[R[61]]]]],[11,"lt",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[31]]],["bool"]]],[11,R[62],E,E,2,[[["self"],[R[34]]],[R[83],[R[61]]]]],[11,"lt",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[34]]],["bool"]]],[11,"hash",E,E,1,N],[11,"hash",E,E,2,N],[11,"sub",E,R[63],1,[[["self"],[R[31]]],[R[31]]]],[11,"sub",E,R[63],2,[[["self"],[R[34]]],[R[34]]]],[11,R[64],E,R[65],1,[[["self"],[R[31]]]]],[11,R[64],E,R[65],2,[[["self"],[R[34]]]]],[11,"not",E,R[66],1,[[["self"]],[R[31]]]],[11,"not",E,R[66],2,[[["self"]],[R[34]]]],[11,"bitand",E,R[67],1,[[["self"],[R[31]]],[R[31]]]],[11,"bitand",E,R[67],2,[[["self"],[R[34]]],[R[34]]]],[11,"bitor",E,R[68],1,[[["self"],[R[31]]],[R[31]]]],[11,"bitor",E,R[68],2,[[["self"],[R[34]]],[R[34]]]],[11,"bitxor",E,R[69],1,[[["self"],[R[31]]],[R[31]]]],[11,"bitxor",E,R[69],2,[[["self"],[R[34]]],[R[34]]]],[11,R[70],E,R[71],1,[[["self"],[R[31]]]]],[11,R[70],E,R[71],2,[[["self"],[R[34]]]]],[11,R[72],E,R[73],1,[[["self"],[R[31]]]]],[11,R[72],E,R[73],2,[[["self"],[R[34]]]]],[11,R[74],E,R[75],1,[[["self"],[R[31]]]]],[11,R[74],E,R[75],2,[[["self"],[R[34]]]]],[11,"deref",E,E,4,N],[11,"extend",E,E,1,[[["self"],[T]]]],[11,"extend",E,E,2,[[["self"],[T]]]],[11,R[76],E,E,1,[[[T]],[R[31]]]],[11,R[76],E,E,2,[[[T]],[R[34]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"clone",R[51],E,5,[[["self"]],[R[25]]]],[11,"clone",R[24],E,0,[[["self"]],[R[59]]]],[11,"clone",E,E,1,[[["self"]],[R[31]]]],[11,"clone",E,E,2,[[["self"]],[R[34]]]],[11,R[77],E,E,0,[[],[R[59]]]],[11,R[77],E,E,1,[[],[R[31]]]],[11,R[77],E,E,2,[[],[R[34]]]],[11,R[77],E,E,3,[[],[R[492]]]],[11,R[214],E,E,4,[[["self"]]]]],"p":[[3,R[78]],[3,R[79]],[3,R[80]],[3,R[81]],[3,R[26]],[3,R[82]]]};
searchIndex[R[497]]={"doc":"KFS","i":[[5,"force_double_fault",R[497],"Forces a double fault by stack overflowing.",N,[[]]],[5,"main",E,"The kernel's `main`.",N,[[]]],[5,"start",E,"The entry point of our kernel.",N,N],[5,"common_start",E,"CRT0 starts here.",N,N],[5,R[494],E,R[495],N,[[]]],[5,"do_panic",E,"The kernel panic function.",N,N],[5,R[496],E,"Function called on `panic!` invocation.",N,N],[0,"paging",E,"Paging.",N,N],[3,R[706],R[499],"The flags of a mapping.",N,N],[12,"bits",E,E,0,N],[4,R[118],E,R[514],N,N],[13,R[120],E,R[515],1,N],[13,"Guarded",E,R[516],1,N],[13,R[945],E,R[517],1,N],[5,"read_cr2",E,R[521],N,[[],[R[101]]]],[0,"process_memory",E,"The management of a process' memory",N,N],[3,R[707],R[526],"The struct representing a process' memory, stored in the…",N,N],[12,"userspace_bookkeping",E,"The list of mappings in this address space.",2,N],[12,"table_hierarchy",E,"The architecture-dependent paging hierarchy.",2,N],[12,"heap_base_address",E,"The start of the heap of this process. The heap is managed…",2,N],[4,R[379],E,R[523],N,N],[13,R[120],E,R[524],3,N],[13,"Used",E,R[525],3,N],[4,R[708],E,"Page tables selector.",N,N],[13,"Active",E,"The process's hierarchy is already the currently active one.",4,N],[13,"Inactive",E,"The process's hierarchy an inactive one.",4,N],[11,"from_active_page_tables",E,"Creates a ProcessMemory referencing the current page…",2,[[],["self"]]],[11,R[503],E,"If these tables are the one currently in use, we return…",2,[[["self"]],["dynamichierarchy"]]],[11,R[500],E,"Maps a single physical regions to a given virtual address.…",2,[[["self"],[R[501]],[R[101]],[R[498]]],[R[16],[R[25]]]]],[11,"create_regular_mapping",E,"Allocates the physical regions, and maps them to specified…",2,[[["self"],[R[101]],[R[9]],[R[498]]],[R[16],[R[25]]]]],[11,"map_shared_mapping",E,"Maps a previously created shared mapping to specified…",2,[[["self"],["arc",["vec"]],[R[101]],[R[498]]],[R[16],[R[25]]]]],[11,"guard",E,"Guards a range of addresses",2,[[["self"],[R[101]],[R[9]]],[R[16],[R[25]]]]],[11,"unmap",E,"Deletes a mapping in the page tables.",2,[[["self"],[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,R[568],E,R[502],2,[[["self"],[R[101]]],[R[529]]]],[11,"shrink_mapping",E,"Shrink the mapping at `address` to `new_size`.",2,[[["self"],[R[101]],[R[9]]],[R[16],[R[83],R[25]]]]],[11,"expand_mapping",E,"Expand the mapping at `address` to `new_size`.",2,[[["self"],[R[101]],[R[9]]],[R[16],[R[25]]]]],[11,R[531],E,R[532],2,[[["self"],[R[9]]],[R[16],[R[101],R[25]]]]],[11,R[509],E,"Retrieves the mapping that `address` falls into, and…",2,[[["self"],[R[101]],[R[9]]],[R[16],[R[510],R[25]]]]],[11,"resize_heap",E,"Resize the heap of this process, just like a brk. It can…",2,[[["self"],[R[9]]],[R[16],[R[101],R[25]]]]],[11,R[519],E,"Switches to this process memory",2,[[["self"]]]],[0,"kernel_memory",R[499],"The management of kernel memory",N,N],[3,R[709],R[618],"A struct that acts on KernelLand and RecursiveTablesLand.",N,N],[12,"tables",E,"The currently active page tables.",5,N],[5,"get_kernel_memory",E,"Locks the KERNEL_MEMORY",N,[[],[R[704],["kernelmemory"]]]],[7,"KERNEL_MEMORY",E,"A mutex protecting the KernelMemory manager.",N,N],[11,"find_virtual_space_aligned",E,"Finds a hole in the virtual space at least 'length' long,…",5,[[["self"],[R[9]],[R[9]]],[R[16],[R[101],R[25]]]]],[11,"find_virtual_space",E,"Finds a hole in the virtual space at least 'length' long.",5,[[["self"],[R[9]]],[R[16],[R[101],R[25]]]]],[11,R[500],E,"Maps a single physical regions to a given virtual address.",5,[[["self"],[R[501]],[R[101]],[R[498]]]]],[11,"map_phys_region",E,"Maps a single physical region anywhere.",5,[[["self"],[R[501]],[R[498]]],[R[101]]]],[11,"map_phys_regions",E,"Maps a list of physical region anywhere.",5,N],[11,"map_frame_iterator_to",E,"Maps a list of physical region yielded by an iterator.",5,[[["self"],["i"],[R[101]],[R[498]]]]],[11,"map_frame_iterator",E,"Maps a list of physical region yielded by the iterator.…",5,[[["self"],["i"],[R[498]]],[R[101]]]],[11,R[164],E,"Allocates and maps a single page, choosing a spot in VMEM…",5,[[["self"]],[R[101]]]],[11,R[161],E,"Allocates non-contiguous frames, and map them at the given…",5,[[["self"],[R[101]],[R[9]],[R[498]]]]],[11,"get_pages",E,"Allocates and maps the given length, chosing a spot in…",5,[[["self"],[R[9]]],[R[101]]]],[11,"guard",E,"Guards a range of addresses.",5,[[["self"],[R[101]],[R[9]]]]],[11,"mapping_state",E,R[502],5,[[["self"],[R[101]]],[R[106],[R[98]]]]],[11,"unmap",E,"Deletes a mapping in the page tables. This functions…",5,[[["self"],[R[101]],[R[9]]]]],[11,"unmap_no_dealloc",E,"Deletes a mapping in the page tables, but does not free…",5,[[["self"],[R[101]],[R[9]]]]],[11,"reserve_kernel_land_frames",E,"Marks all frames mapped in KernelLand as reserve This is…",5,[[["self"]]]],[11,R[503],E,"Safe access to the active page tables.",5,[[["self"]],["activehierarchy"]]],[11,"dump_kernelland_state",E,"Prints the state of the KernelLand by parsing the page…",5,[[["self"]]]],[0,"lands",R[499],"Module describing the split between the UserSpace and…",N,N],[3,R[242],R[619],"The virtual memory belonging to kernel",N,N],[3,R[935],E,"The virtual memory belonging to user",N,N],[3,R[759],E,"The virtual memory pointing to active page tables by…",N,N],[5,R[941],E,"Assertions to check that Kernel/User pages falls on…",N,[[]]],[8,R[241],E,R[954],N,N],[18,"START",E,R[504],6,N],[18,"END",E,R[505],6,N],[11,R[182],E,R[504],6,[[],[R[101]]]],[11,R[183],E,R[505],6,[[],[R[101]]]],[11,"length",E,"The length of this land.",6,[[],[R[9]]]],[11,R[955],E,"The index in page directory of the first table of this land.",6,[[],[R[9]]]],[11,R[956],E,"The index in page directory of the last table of this land.",6,[[],[R[9]]]],[11,"contains_address",E,"Is the address contained in this Land ?",6,[[[R[101]]],["bool"]]],[11,"contains_region",E,"Is the region fully contained in this Land ?",6,[[[R[101]],[R[9]]],["bool"]]],[11,"check_contains_address",E,"Checks that a given address falls in this land, or return…",6,[[[R[101]]],[R[16],[R[25]]]]],[11,"check_contains_region",E,"Checks that a given region falls in this land, or return…",6,[[[R[101]],[R[9]]],[R[16],[R[25]]]]],[0,R[506],R[499],"Mapping",N,N],[3,"Mapping",R[620],"A memory mapping. Stores the address, the length, and the…",N,N],[12,R[513],E,"The first address of this mapping.",7,N],[12,"length",E,"The length of this mapping.",7,N],[12,"mtype",E,"The type of this mapping, and frames it maps.",7,N],[12,"flags",E,"The access rights of this mapping.",7,N],[4,R[114],E,"The types that a UserSpace mapping can be in.",N,N],[13,R[120],E,"Available, nothing is stored there. Accessing to it will…",8,N],[13,"Guarded",E,"Guarded, like Available, but nothing can be allocated…",8,N],[13,"Regular",E,"Regular, a region known only by this process. Access…",8,N],[13,"Shared",E,"Shared, a region that can be mapped in multiple processes.…",8,N],[13,"SystemReserved",E,"SystemReserved, used to denote the KernelLand and other…",8,N],[11,"new_regular",E,"Tries to construct a regular mapping.",7,[[[R[101]],["vec",[R[501]]],[R[498]]],[R[16],[R[506],R[25]]]]],[11,"new_shared",E,"Tries to construct a shared mapping.",7,[[[R[101]],["arc",["vec"]],[R[498]]],[R[16],[R[506],R[25]]]]],[11,"new_guard",E,"Tries to construct a guarded mapping.",7,[[[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,"new_available",E,"Tries to construct an available mapping.",7,[[[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,"new_system_reserved",E,"Tries to construct a system reserved mapping.",7,[[[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,R[513],E,R[507],7,[[["self"]],[R[101]]]],[11,"length",E,R[507],7,[[["self"]],[R[9]]]],[11,"mtype_ref",E,"Returns a reference to the type of this mapping.",7,[[["self"]],[R[156]]]],[11,"mtype",E,R[508],7,[[["self"]],[R[156]]]],[11,"flags",E,R[508],7,[[["self"]],[R[498]]]],[0,"cross_process",R[499],"Cross Process Mapping",N,N],[3,R[710],R[621],"A struct representing a UserLand mapping temporarily…",N,N],[12,"kernel_address",E,"The KernelLand address it was remapped to. Has the desired…",9,N],[12,"len",E,"Stores the desired length.",9,N],[12,R[506],E,"The mapping we remapped from.",9,N],[11,R[509],E,"Creates a `CrossProcessMapping`.",9,[[[R[506]],[R[9]],[R[9]]],[R[16],[R[510],R[25]]]]],[11,"addr",E,"The address of the region asked to be remapped.",9,[[["self"]],[R[101]]]],[11,"len",E,"The length of the region asked to be remapped.",9,[[["self"]],[R[9]]]],[0,"error",R[499],"Errors specific to memory management",N,N],[4,"MmError",R[511],"An error related to Memory Management",N,N],[13,"OccupiedMapping",E,E,10,N],[12,R[513],R[512],E,10,N],[12,"length",E,E,10,N],[12,R[285],E,E,10,N],[13,"DoesNotSpanMapping",R[511],E,10,N],[12,R[513],R[512],E,10,N],[12,"length",E,E,10,N],[12,R[285],E,E,10,N],[13,"SpansSeveralMappings",R[511],E,10,N],[12,R[513],R[512],E,10,N],[12,"length",E,E,10,N],[12,R[285],E,E,10,N],[13,"WasAvailable",R[511],E,10,N],[12,R[513],R[512],E,10,N],[12,R[285],E,E,10,N],[13,"SharedMapping",R[511],E,10,N],[12,R[285],R[512],E,10,N],[13,"InvalidMapping",R[511],E,10,N],[12,R[285],R[512],E,10,N],[13,R[538],R[511],E,10,N],[17,"_DERIVE_failure_Fail_FOR_MmError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_MmError",E,E,N,N],[0,"hierarchical_table",R[499],"Arch-independent traits for architectures that implement…",N,N],[3,"NoFlush",R[520],"Flusher that doesn't flush.",N,N],[3,R[232],E,"This is just a wrapper for a pointer to a table. It…",N,N],[12,"0",E,E,11,N],[12,"1",E,E,11,N],[4,R[118],E,R[514],N,N],[13,R[120],E,R[515],1,N],[13,"Guarded",E,R[516],1,N],[13,R[945],E,R[517],1,N],[8,R[711],E,"A hierarchical paging is composed of entries. All entries…",N,N],[16,"EntryFlagsType",E,"An entry comports some flags. They are often represented…",12,N],[10,R[128],E,R[129],12,[[["self"]],["bool"]]],[10,R[130],E,R[131],12,[[["self"]],[R[106],[R[98]]]]],[10,R[942],E,R[132],12,[[["self"]],["bool"]]],[10,"flags",E,R[133],12,N],[10,R[134],E,R[135],12,[[["self"]],[R[106],[R[98]]]]],[10,"set",E,R[136],12,N],[10,R[137],E,R[138],12,[[["self"]]]],[8,R[238],E,"A hierarchical paging is composed of tables. All tables…",N,N],[16,"EntryType",E,"The Entry our table has",13,N],[16,"CacheFlusherType",E,"A Flusher that should be called on table modifications",13,N],[16,"ChildTableType",E,"If we're a parent table, the type of our child tables. If…",13,N],[10,R[198],E,"gets the raw array of entries",13,N],[11,"zero",E,R[948],13,[[["self"]]]],[11,"guard_all_entries",E,"Makes all entries guarded",13,[[["self"]]]],[11,R[949],E,"Creates a mapping on the nth entry of a table",13,N],[11,R[950],E,R[518],13,[[["self"],[R[9]]]]],[11,"unmap_nth_entry",E,R[518],13,[[["self"],[R[9]]]]],[10,R[647],E,"Called to check if this table's entries should be treated…",13,[[],[R[9]]]],[11,"entry_vm_size",E,"the size an entry in this table spans in virtual memory.…",13,[[],[R[9]]]],[10,R[648],E,"Gets a reference to a child page table.",13,[[["self"],[R[9]]],[R[106],[R[147]]]]],[10,R[649],E,"Allocates a child page table, zero it and add an entry…",13,[[["self"],[R[9]]],[R[147]]]],[11,"get_child_table_or_create",E,"Gets the child page table at given index, or creates it if…",13,[[["self"],[R[9]]],[R[106],[R[147]]]]],[8,R[712],E,"Most implementations of paging have are accelerated with a…",N,N],[10,R[651],E,"Flushes the whole cache.",14,[[]]],[8,R[713],E,"A trait operating on a whole hierarchy of tables.",N,N],[16,"TopLevelTableType",E,"The type of the top level table.",15,N],[10,R[652],E,"Gets a reference to the top level table, either through…",15,[[["self"]],[R[147]]]],[11,R[653],E,"Creates a mapping in the page tables with the given flags.",15,[[["self"],["i"],[R[101]],[R[498]]]]],[11,"guard",E,"Creates a span of guard pages",15,[[["self"],[R[101]],[R[9]]]]],[11,"unmap",E,"Unmaps a range of virtual address. On every frames mapped…",15,[[["self"],[R[101]],[R[9]],["c"]]]],[11,R[654],E,"Iters in the page tables, applying closure on every…",15,[[["self"],[R[101]],[R[9]],["c"]]]],[11,R[149],E,"Finds a virtual space hole that is at least length long,…",15,[[["self"],[R[9]],[R[101]],[R[101]],[R[9]]],[R[83],[R[101]]]]],[8,R[714],E,"A trait implemented by innactive table hierarchies.…",N,N],[10,"new",E,"Creates a hierarchy. Allocates at least a top level…",16,[[],["self"]]],[10,R[519],E,"Switches to this hierarchy,",16,[[["self"]]]],[11,"destroy",E,"De-allocates all physical memory used by tables of this…",16,[[["self"]]]],[10,R[655],E,"Performs a shallow copy of the top level-directory section…",16,[[["self"]]]],[10,R[656],E,"Checks if this inactive hierarchy is actually the…",16,[[["self"]],["bool"]]],[10,R[657],E,"Returns the currently active hierarchy as an inactive…",16,[[],["self"]]],[11,"unwrap",R[499],R[139],1,[[["self"]],[T]]],[11,"map",E,R[140],1,[[["self"],["f"]],[R[106]]]],[11,R[141],E,R[142],1,[[["self"]],[R[83]]]],[11,"new",R[520],"Wraps the given pointer in a `SmartHierarchicalTable`.",11,N],[0,"arch",R[499],"Arch-specific implementations of paging",N,N],[0,"i386","kfs_kernel::paging::arch","Paging implementation on i386",N,N],[5,R[936],R[522],R[937],N,[[],["bool"]]],[5,R[154],E,"Not used anymore, bootstrap's job",N,[[[R[98]]]]],[5,R[938],E,R[939],N,[[]]],[5,"swap_cr3",E,R[940],N,[[[R[98]]],[R[98]]]],[5,"read_cr3",E,"Reads the value of cr3, retrieving the current page…",N,[[],[R[98]]]],[5,"read_cr2",E,R[521],N,[[],[R[101]]]],[0,"entry",E,R[116],N,N],[3,R[715],R[622],R[104],N,N],[12,"bits",E,E,17,N],[3,R[716],E,R[117],N,N],[12,"0",E,E,18,N],[17,R[121],E,"The part of an entry that encodes the physical address.",N,N],[18,R[205],E,E,17,N],[18,R[57],E,E,17,N],[18,R[122],E,E,17,N],[18,R[123],E,E,17,N],[18,R[203],E,E,17,N],[18,R[204],E,E,17,N],[18,"DIRTY",E,E,17,N],[18,R[124],E,E,17,N],[18,"GLOBAL",E,E,17,N],[18,R[125],E,E,17,N],[18,R[667],E,E,17,N],[18,R[127],E,E,17,N],[11,"empty",E,R[32],17,[[],[R[144]]]],[11,"all",E,R[33],17,[[],[R[144]]]],[11,"bits",E,R[35],17,[[["self"]],["u32"]]],[11,R[36],E,R[37],17,[[["u32"]],[R[83],[R[144]]]]],[11,R[38],E,R[39],17,[[["u32"]],[R[144]]]],[11,R[40],E,R[41],17,[[["self"]],["bool"]]],[11,"is_all",E,R[42],17,[[["self"]],["bool"]]],[11,R[43],E,R[44],17,[[["self"],[R[144]]],["bool"]]],[11,R[45],E,R[46],17,[[["self"],[R[144]]],["bool"]]],[11,"insert",E,R[47],17,[[["self"],[R[144]]]]],[11,"remove",E,R[48],17,[[["self"],[R[144]]]]],[11,"toggle",E,R[49],17,[[["self"],[R[144]]]]],[11,"set",E,R[50],17,[[["self"],[R[144]],["bool"]]]],[0,"table",R[522],"i386 Page Tables hierarchy",N,N],[3,"Table",R[623],"A page table or directory in memory.",N,N],[12,R[198],E,"The array of entries making up this table.",19,N],[3,R[231],E,"A currently active page table.",N,N],[12,"0",E,E,20,N],[3,R[230],E,"A currently active page directory.",N,N],[12,"0",E,E,21,N],[3,R[760],E,"The currently active hierarchy of directory and tables.…",N,N],[3,R[234],E,"A currently inactive page table.",N,N],[12,"0",E,E,22,N],[3,R[233],E,"A currently inactive page directory.",N,N],[12,"0",E,E,23,N],[3,R[717],E,"A currently inactive hierarchy of directory and tables.",N,N],[12,R[102],E,"The address we must put in cr3 to switch to these pages.",24,N],[3,R[943],E,R[944],N,N],[17,R[946],E,R[947],N,N],[11,R[951],E,R[952],21,[[["self"],[R[9]]],[R[106],[R[9]]]]],[17,R[533],R[522],R[534],N,N],[17,R[953],E,"The number of entries a page table has. On i386 a page…",N,N],[0,"bookkeeping",R[499],"Bookkeeping of mappings in UserLand",N,N],[3,R[718],R[527],"A bookkeeping is just a list of Mappings",N,N],[12,"mappings",E,"The list of mappings of this process.",25,N],[4,R[379],E,R[523],N,N],[13,R[120],E,R[524],3,N],[13,"Used",E,R[525],3,N],[11,R[506],R[526],"Returns a reference to the underlying mapping.",3,[[["self"]],[R[506]]]],[11,"new",R[527],"Constructs a UserspaceBookkeeping",25,[[],["self"]]],[11,"mapping_at_or_following",E,R[528],25,[[["self"],[R[101]]],[R[83],[R[506]]]]],[11,"mapping_at_or_preceding",E,R[528],25,[[["self"],[R[101]]],[R[83],[R[506]]]]],[11,"mapping_at",E,R[530],25,[[["self"],[R[101]]],[R[529]]]],[11,"occupied_mapping_at",E,R[530],25,[[["self"],[R[101]]],[R[16],[R[506],R[25]]]]],[11,"is_vacant",E,"Checks that a given range is unoccupied.",25,[[["self"],[R[101]],[R[9]]],[R[16],["bool",R[25]]]]],[11,"check_vacant",E,"Asserts that a given range is unoccupied",25,[[["self"],[R[101]],[R[9]]],[R[16],[R[25]]]]],[11,"add_mapping",E,"Adds a mapping to the list of tracked mappings",25,[[["self"],[R[506]]],[R[16],[R[25]]]]],[11,"remove_mapping",E,"Removes a mapping from the tracked mappings, and returns it.",25,[[["self"],[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,"remove_mapping_split",E,"Removes part of a mapping from the tracked mappings, and…",25,[[["self"],[R[101]],[R[9]]],[R[16],[R[506],R[25]]]]],[11,R[531],E,R[532],25,[[["self"],[R[9]]],[R[16],[R[101],R[25]]]]],[17,R[533],R[499],R[534],N,N],[18,R[56],E,"Mapping is readable.",0,N],[18,R[57],E,"Mapping is writable.",0,N],[18,R[58],E,"Mapping is executable.",0,N],[18,R[122],E,"Mapping can be accessed from userland, with the same…",0,N],[11,"empty",E,R[32],0,[[],[R[498]]]],[11,"all",E,R[33],0,[[],[R[498]]]],[11,"bits",E,R[35],0,[[["self"]],["u32"]]],[11,R[36],E,R[37],0,[[["u32"]],[R[83],[R[498]]]]],[11,R[38],E,R[39],0,[[["u32"]],[R[498]]]],[11,R[40],E,R[41],0,[[["self"]],["bool"]]],[11,"is_all",E,R[42],0,[[["self"]],["bool"]]],[11,R[43],E,R[44],0,[[["self"],[R[498]]],["bool"]]],[11,R[45],E,R[46],0,[[["self"],[R[498]]],["bool"]]],[11,"insert",E,R[47],0,[[["self"],[R[498]]]]],[11,"remove",E,R[48],0,[[["self"],[R[498]]]]],[11,"toggle",E,R[49],0,[[["self"],[R[498]]]]],[11,"set",E,R[50],0,[[["self"],[R[498]],["bool"]]]],[11,"k_r",E,"Shorthand for READABLE",0,[[],[R[498]]]],[11,"k_w",E,"Shorthand for WRITABLE",0,[[],[R[498]]]],[11,"k_rw",E,"Shorthand for READABLE | WRITABLE",0,[[],[R[498]]]],[11,"k_rx",E,"Shorthand for READABLE | EXECUTABLE",0,[[],[R[498]]]],[11,"u_r",E,"Shorthand for USER_ACCESSIBLE | READABLE",0,[[],[R[498]]]],[11,"u_w",E,R[535],0,[[],[R[498]]]],[11,"u_rw",E,R[535],0,[[],[R[498]]]],[11,"u_rx",E,R[535],0,[[],[R[498]]]],[0,"event",R[497],"The core event handling primitives of KFS.",N,N],[3,"IRQEvent",R[624],"An event waiting for an IRQ.",N,N],[12,"state",E,"The global state of the IRQ this event is listening on.…",26,N],[12,"ack",E,"Acknowledgement counter for this IRQEvent instance. Each…",26,N],[3,"IRQState",E,"Global state of an IRQ.",N,N],[12,"irqnum",E,"The irq number this state represents. Only used for debug…",27,N],[12,"counter",E,"The number of time this IRQ was triggered from kernel boot.",27,N],[12,"waiting_processes",E,"List of processes waiting on this IRQ. When this IRQ is…",27,N],[5,"wait",E,"Waits for an event to occur on one of the given Waitable…",N,[[["intoiter"]],[R[16],["waitable",R[565]]]]],[5,"dispatch_event",E,"Signal the scheduler and waiters that an IRQ has been…",N,[[[R[9]]]]],[5,"wait_event",E,"Creates an IRQEvent waiting for the given IRQ number.",N,[[[R[9]]],["irqevent"]]],[7,"IRQ_STATES",E,"Global state for all the IRQ handled by the PIC.",N,N],[8,"Waitable",E,"A waitable item.",N,N],[10,R[658],E,"Checks whether the Waitable was signalled.",28,[[["self"]],["bool"]]],[10,R[659],E,"Register the waitable with the scheduler.",28,[[["self"]]]],[11,"new",E,"Create a new IRQState for the given IRQ number, with the…",27,[[[R[9]]],["irqstate"]]],[0,"error",R[497],"UserspaceError and KernelError",N,N],[3,R[719],R[536],R[333],N,N],[12,"0",E,E,29,N],[4,R[720],E,E,N,N],[13,"Add",E,E,30,N],[13,"Sub",E,E,30,N],[13,"Mul",E,E,30,N],[13,"Div",E,E,30,N],[13,"Mod",E,E,30,N],[13,"Pow",E,E,30,N],[4,R[82],E,"Kernel Error.",N,N],[13,"PhysicalMemoryExhaustion",E,E,31,N],[12,R[285],R[537],E,31,N],[13,"VirtualMemoryExhaustion",R[536],E,31,N],[12,R[285],R[537],E,31,N],[13,R[340],R[536],E,31,N],[12,R[513],R[537],E,31,N],[12,"length",E,E,31,N],[12,R[285],E,E,31,N],[13,R[338],R[536],E,31,N],[12,"size",R[537],E,31,N],[12,R[285],E,E,31,N],[13,"AlignmentError",R[536],E,31,N],[12,"given",R[537],E,31,N],[12,"needed",E,E,31,N],[12,R[285],E,E,31,N],[13,"WouldOverflow",R[536],E,31,N],[12,"lhs",R[537],E,31,N],[12,"rhs",E,E,31,N],[12,"operation",E,E,31,N],[12,R[285],E,E,31,N],[13,"ZeroLengthError",R[536],E,31,N],[12,R[285],R[537],E,31,N],[13,"MmError",R[536],E,31,N],[13,"ProcessKilled",E,E,31,N],[12,R[285],R[537],E,31,N],[13,"ThreadAlreadyStarted",R[536],E,31,N],[12,R[285],R[537],E,31,N],[13,R[352],R[536],E,31,N],[12,R[285],R[537],E,31,N],[13,R[356],R[536],E,31,N],[12,"value",R[537],E,31,N],[12,"maximum",E,E,31,N],[12,R[285],E,E,31,N],[13,R[334],R[536],E,31,N],[12,"kcap",R[537],E,31,N],[12,R[285],E,E,31,N],[13,R[364],R[536],E,31,N],[12,R[285],R[537],E,31,N],[13,R[538],R[536],E,31,N],[17,"_DERIVE_failure_Fail_FOR_KernelError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_KernelError",E,E,N,N],[0,"log_impl",R[497],"A simple log implementation based on env_logger",N,N],[3,"Logger",R[542],E,N,N],[12,"filter",E,E,32,N],[5,"early_init",E,"Initializes the Logger in a heapless environment.",N,[[]]],[5,"init",E,"Reinitializes the logger using the cmdline. This requires…",N,[[]]],[0,"filter",E,"Filtering for log records.",N,N],[3,"Filter",R[540],"A log filter.",N,N],[12,R[539],E,E,33,N],[12,"filter",E,E,33,N],[3,"Builder",E,"A builder for a log filter.",N,N],[12,R[539],E,E,34,N],[12,"filter",E,E,34,N],[3,R[721],E,E,N,N],[12,"name",E,E,35,N],[12,"level",E,E,35,N],[5,"parse_spec",E,"Parse a logging specification string (e.g:…",N,N],[5,"enabled",E,E,N,N],[0,"inner",E,E,N,N],[3,"Filter",R[625],E,N,N],[12,"inner",E,E,36,N],[11,"new",E,E,36,[[["str"]],[R[16],["filter","string"]]]],[11,"is_match",E,E,36,[[["self"],["str"]],["bool"]]],[11,"filter",R[540],"Returns the maximum `LevelFilter` that this filter…",33,[[["self"]],[R[541]]]],[11,"matches",E,"Checks if this record matches the configured filter.",33,[[["self"],["record"]],["bool"]]],[11,"enabled",E,"Determines if a log message with the specified metadata…",33,[[["self"],[R[852]]],["bool"]]],[11,"new",E,"Initializes the filter builder with defaults.",34,[[],["builder"]]],[11,"filter_module",E,"Initializes the filter builder from an environment. Adds a…",34,[[["self"],["str"],[R[541]]],["self"]]],[11,"filter_level",E,"Adds a directive to the filter for all modules.",34,[[["self"],[R[541]]],["self"]]],[11,"filter",E,"Adds a directive to the filter.",34,[[["self"],[R[83],["str"]],[R[541]]],["self"]]],[11,"parse",E,"Parses the directives string.",34,[[["self"],["str"]],["self"]]],[11,"build",E,"Build a log filter.",34,[[["self"]],["filter"]]],[7,"LOGGER",R[542],E,N,N],[0,"i386",R[497],R[873],N,N],[3,R[223],R[545],R[874],N,N],[12,"link",E,E,37,N],[12,R[875],E,E,37,N],[12,"esp0",E,E,37,N],[12,"ss0",E,E,37,N],[12,R[876],E,E,37,N],[12,"esp1",E,E,37,N],[12,"ss1",E,E,37,N],[12,R[877],E,E,37,N],[12,"esp2",E,E,37,N],[12,"ss2",E,E,37,N],[12,R[878],E,E,37,N],[12,"cr3",E,E,37,N],[12,"eip",E,E,37,N],[12,"eflags",E,E,37,N],[12,"eax",E,E,37,N],[12,"ecx",E,E,37,N],[12,"edx",E,E,37,N],[12,"ebx",E,E,37,N],[12,"esp",E,E,37,N],[12,"ebp",E,E,37,N],[12,"esi",E,E,37,N],[12,"edi",E,E,37,N],[12,"es",E,E,37,N],[12,R[879],E,E,37,N],[12,"cs",E,E,37,N],[12,R[880],E,E,37,N],[12,"ss",E,E,37,N],[12,R[881],E,E,37,N],[12,"ds",E,E,37,N],[12,R[882],E,E,37,N],[12,"fs",E,E,37,N],[12,R[883],E,E,37,N],[12,"gs",E,E,37,N],[12,R[884],E,E,37,N],[12,R[886],E,E,37,N],[12,R[885],E,E,37,N],[12,R[888],E,E,37,N],[12,R[887],E,E,37,N],[3,R[722],E,"Wrapper around TssStruct ensuring it is kept at the page…",N,N],[12,"0",E,E,38,N],[4,R[224],E,R[889],N,N],[13,"Ring0",E,R[890],39,N],[13,"Ring1",E,R[891],39,N],[13,"Ring2",E,R[892],39,N],[13,"Ring3",E,R[893],39,N],[5,"tss_struct_size",E,E,N,[[]]],[0,R[569],E,"i386 registers reading",N,N],[5,"eip","kfs_kernel::i386::registers","Gets the current $eip.",N,[[],[R[9]]]],[0,"eflags",E,"Processor state stored in the EFLAGS register.",N,N],[3,"EFlags",R[626],"The EFLAGS register.",N,N],[12,"bits",E,E,40,N],[5,"read",E,"Returns the current value of the EFLAGS register.",N,[[],["eflags"]]],[5,R[795],E,"Returns the raw current value of the EFLAGS register.",N,[[],["u32"]]],[5,"write",E,"Writes the EFLAGS register, preserves reserved bits.",N,[[["eflags"]]]],[5,R[705],E,"Writes the EFLAGS register.",N,[[["u32"]]]],[18,"ID",E,"Processor feature identification flag.",40,N],[18,R[668],E,"Indicates that an external, maskable interrupt is pending.",40,N],[18,R[669],E,"Virtual image of the INTERRUPT_FLAG bit.",40,N],[18,R[670],E,"Enable automatic alignment checking if CR0.AM is set. Only…",40,N],[18,R[671],E,"Enable the virtual-8086 mode.",40,N],[18,R[672],E,"Allows to restart an instruction following an instrucion…",40,N],[18,R[673],E,"Used by `iret` in hardware task switch mode to determine…",40,N],[18,R[674],E,"The high bit of the I/O Privilege Level field.",40,N],[18,R[684],E,"The low bit of the I/O Privilege Level field.",40,N],[18,R[675],E,"Set by hardware to indicate that the sign bit of the…",40,N],[18,R[676],E,"Determines the order in which strings are processed.",40,N],[18,R[677],E,"Enable interrupts.",40,N],[18,R[678],E,"Enable single-step mode for debugging.",40,N],[18,R[679],E,R[543],40,N],[18,R[680],E,R[543],40,N],[18,R[681],E,R[544],40,N],[18,R[682],E,"Set by hardware if last result has an even number of 1…",40,N],[18,R[683],E,R[544],40,N],[11,"empty",E,R[32],40,[[],["eflags"]]],[11,"all",E,R[33],40,[[],["eflags"]]],[11,"bits",E,R[35],40,[[["self"]],["u32"]]],[11,R[36],E,R[37],40,[[["u32"]],[R[83],["eflags"]]]],[11,R[38],E,R[39],40,[[["u32"]],["eflags"]]],[11,R[40],E,R[41],40,[[["self"]],["bool"]]],[11,"is_all",E,R[42],40,[[["self"]],["bool"]]],[11,R[43],E,R[44],40,[[["self"],["eflags"]],["bool"]]],[11,R[45],E,R[46],40,[[["self"],["eflags"]],["bool"]]],[11,"insert",E,R[47],40,[[["self"],["eflags"]]]],[11,"remove",E,R[48],40,[[["self"],["eflags"]]]],[11,"toggle",E,R[49],40,[[["self"],["eflags"]]]],[11,"set",E,R[50],40,[[["self"],["eflags"],["bool"]]]],[0,"stack",R[545],"Kernel stack",N,N],[3,R[723],R[627],"A structure representing a kernel stack.",N,N],[12,R[983],E,"The aligned address at the beginning of the stack.",41,N],[3,R[724],E,"The minimal information needed to perform a stack dump.",N,N],[12,"esp",E,"The initial top of the stack.",42,N],[12,"ebp",E,"The initial bottom of the first stack frame.",42,N],[12,"eip",E,"The initial pc.",42,N],[5,"dump_stack",E,"Dumps the stack from the given information, displaying it…",N,[[["stackdumpsource"],[R[83]]]]],[5,"dump_stack_from_slice",E,"Dumps a stack, displaying it in a frame-by-frame format.",N,N],[17,R[984],E,"The size of a kernel stack in pages, not accounting for…",N,N],[17,R[985],E,"The size of a kernel stack in pages, with the page guard.",N,N],[17,"STACK_ALIGNMENT",E,R[986],N,N],[11,R[987],E,"Allocates the kernel stack of a process.",41,[[],[R[16],[R[546],R[25]]]]],[11,"align_to_stack_bottom",E,"Aligns down a pointer to what would be the beginning of…",41,[[[R[9]]],[R[9]]]],[11,"get_current_stack_bottom",E,"Gets the bottom of the stack by `and`ing `$esp` with…",41,[[],[R[9]]]],[11,"get_current_stack",E,"Retrieves the current stack from `$esp`.",41,[[],[R[546]]]],[18,R[988],E,"We keep 2 poison pointers for fake `saved ebp` and `saved…",41,N],[11,R[989],E,R[990],41,[[["self"]]]],[11,R[991],E,"Get the address of the beginning of usable stack.",41,[[["self"]],[R[9]]]],[11,"dump_current_stack",E,"Dumps the stack, displaying it in a frame-by-frame format.",41,[[[R[83]]]]],[11,"new",E,"Creates a StackDumpSource from :",42,[[[R[9]],[R[9]],[R[9]]],["self"]]],[0,"multiboot",R[545],"Multiboot Information",N,N],[5,"get_boot_information","kfs_kernel::i386::multiboot","Get a pointer to the multiboot information structure.",N,[[],[R[187]]]],[5,"try_get_boot_information",E,"Tries to get a pointer to the multiboot information…",N,[[],[R[83],[R[187]]]]],[5,"init",E,"Initializes the boot information module, allowing the…",N,[[[R[187]]]]],[7,"BOOT_INFO",E,"Stores the address of the multiboot.",N,N],[0,"structures",R[545],"Representations of various x86 specific structures and…",N,N],[0,"gdt",R[547],R[868],N,N],[3,R[222],R[628],R[869],N,N],[12,"0",E,E,43,N],[11,"new",E,R[870],43,[[["u16"],[R[86]]],[R[88]]]],[11,"index",E,R[871],43,[[["self"]],["u16"]]],[11,"rpl",E,R[872],43,[[["self"]],[R[86]]]],[11,"is_ldt",E,"If true, this descriptor is backed by the LDT. If false,…",43,[[["self"]],["bool"]]],[0,"idt",R[547],"Provides types for the Interrupt Descriptor Table and its…",N,N],[3,"Idt",R[629],"An Interrupt Descriptor Table with 256 entries.",N,N],[12,"divide_by_zero",E,"A divide by zero exception (`#DE`) occurs when the…",44,N],[12,"debug",E,"When the debug-exception mechanism is enabled, a `#DB`…",44,N],[12,"non_maskable_interrupt",E,"An non maskable interrupt exception (NMI) occurs as a…",44,N],[12,"breakpoint",E,"A breakpoint (`#BP`) exception occurs when an `INT3`…",44,N],[12,"overflow",E,"An overflow exception (`#OF`) occurs as a result of…",44,N],[12,"bound_range_exceeded",E,"A bound-range exception (`#BR`) exception can occur as a…",44,N],[12,"invalid_opcode",E,"An invalid opcode exception (`#UD`) occurs when an attempt…",44,N],[12,"device_not_available",E,"A device not available exception (`#NM`) occurs under any…",44,N],[12,"double_fault",E,"A double fault (`#DF`) exception can occur when a second…",44,N],[12,"coprocessor_segment_overrun",E,"This interrupt vector is reserved. It is for a…",44,N],[12,"invalid_tss",E,"An invalid TSS exception (`#TS`) occurs only as a result…",44,N],[12,"segment_not_present",E,"An segment-not-present exception (`#NP`) occurs when an…",44,N],[12,"stack_segment_fault",E,"An stack segment exception (`#SS`) can occur in the…",44,N],[12,"general_protection_fault",E,"A general protection fault (`#GP`) can occur in various…",44,N],[12,"page_fault",E,"A page fault (`#PF`) can occur during a memory access in…",44,N],[12,"reserved_1",E,"vector nr. 15",44,N],[12,"x87_floating_point",E,"The x87 Floating-Point Exception-Pending exception (`#MF`)…",44,N],[12,"alignment_check",E,"An alignment check exception (`#AC`) occurs when an…",44,N],[12,"machine_check",E,"The machine check exception (`#MC`) is model specific.…",44,N],[12,"simd_floating_point",E,"The SIMD Floating-Point Exception (`#XF`) is used to…",44,N],[12,"virtualization",E,"vector nr. 20",44,N],[12,"reserved_2",E,"vector nr. 21-29",44,N],[12,"security_exception",E,"The Security Exception (`#SX`) signals security-sensitive…",44,N],[12,"reserved_3",E,"vector nr. 31",44,N],[12,R[562],E,"User-defined interrupts can be initiated either by system…",44,N],[3,"IdtEntry",E,"An Interrupt Descriptor Table entry.",N,N],[12,"pointer_low",E,"Low word of the interrupt handler's virtual address. In an…",45,N],[12,"gdt_selector",E,"A segment selector.",45,N],[12,"zero",E,"Unused.",45,N],[12,"options",E,"Option bitfield.",45,N],[12,"pointer_high",E,"High word of the interrupt handler's virtual address.",45,N],[12,"phantom",E,"Type-safety guarantee: ensure that the function handler…",45,N],[3,R[725],E,"Represents the options field of an IDT entry.",N,N],[12,"0",E,E,46,N],[3,R[726],E,"Represents the exception stack frame pushed by the CPU on…",N,N],[12,"instruction_pointer",E,"This value points to the instruction that should be…",47,N],[12,"code_segment",E,"The code segment selector, padded with zeros.",47,N],[12,"cpu_flags",E,"The flags register before the interrupt handler was invoked.",47,N],[12,"stack_pointer",E,"The stack pointer at the time of the interrupt.",47,N],[12,"stack_segment",E,"The stack segment descriptor at the time of the interrupt…",47,N],[3,R[727],E,"Describes an page fault error code.",N,N],[12,"bits",E,E,48,N],[4,"GateType",E,"Represents the type of an IDT descriptor (called a gate).",N,N],[13,"TaskGate32",E,E,49,N],[13,R[861],E,E,49,N],[13,R[862],E,E,49,N],[13,R[866],E,E,49,N],[13,R[867],E,E,49,N],[5,"const_assert_idt",E,E,N,[[]]],[5,"const_assert_idtentry",E,E,N,[[]]],[6,"HandlerFunc",E,"A handler function for an interrupt or an exception…",N,N],[6,"HandlerFuncWithErrCode",E,"A handler function for an exception that pushes an error…",N,N],[6,"PageFaultHandlerFunc",E,"A page fault handler function that pushes a page fault…",N,N],[11,"init",E,"Creates a new IDT filled with non-present entries.",44,[[["self"]]]],[11,"load",E,"Loads the IDT in the CPU using the `lidt` command.",44,[[["self"]]]],[11,"missing",E,"Creates a non-present IDT entry (but sets the must-be-one…",45,[[],["self"]]],[11,"set_interrupt_gate_addr",E,R[548],45,[[["self"],["u32"]],[R[549]]]],[11,"set_handler_task_gate_addr",E,"Set a task gate for the IDT entry and sets the present bit.",45,[[["self"],["u32"]]]],[11,R[551],E,R[548],45,[[["self"],[R[550]]],[R[549]]]],[11,R[552],E,R[553],45,[[["self"],[R[550]]]]],[11,R[551],E,R[548],45,[[["self"],[R[554]]],[R[549]]]],[11,R[552],E,R[553],45,[[["self"],[R[554]]]]],[11,R[551],E,R[548],45,[[["self"],[R[555]]],[R[549]]]],[11,R[552],E,R[553],45,[[["self"],[R[555]]]]],[11,"gate_type",E,"Type of the interrupt handler. Its value determines the…",46,[[["self"]],[R[694]]]],[11,"privilege_level",E,E,46,[[["self"]],[R[86]]]],[11,"is_present",E,E,46,[[["self"]],["bool"]]],[11,"set_is_present",E,E,46,[[["self"],["bool"]]]],[11,"minimal",E,"Creates a minimal options field with all the must-be-one…",46,[[],["self"]]],[11,"set_gate_type",E,"Set the kind of gate this IdtEntry represents.",46,[[["self"],[R[694]]],["self"]]],[11,"set_privilege_level",E,"Set the required privilege level (DPL) for invoking the…",46,[[["self"],[R[86]]],["self"]]],[11,"set_present_interrupt",E,R[556],46,[[["self"],["bool"]],["self"]]],[11,"set_present_task",E,R[556],46,[[["self"],["bool"]],["self"]]],[11,"disable_interrupts",E,"Let the CPU disable hardware interrupts when the handler…",46,[[["self"],["bool"]],["self"]]],[18,R[685],E,"If this flag is set, the page fault was caused by a…",48,N],[18,R[686],E,"If this flag is set, the memory access that caused the…",48,N],[18,R[687],E,"If this flag is set, an access in user mode (CPL=3) caused…",48,N],[18,R[688],E,"If this flag is set, the page fault is a result of the…",48,N],[18,R[689],E,"If this flag is set, it indicates that the access that…",48,N],[11,"empty",E,R[32],48,[[],[R[557]]]],[11,"all",E,R[33],48,[[],[R[557]]]],[11,"bits",E,R[35],48,[[["self"]],["u32"]]],[11,R[36],E,R[37],48,[[["u32"]],[R[83],[R[557]]]]],[11,R[38],E,R[39],48,[[["u32"]],[R[557]]]],[11,R[40],E,R[41],48,[[["self"]],["bool"]]],[11,"is_all",E,R[42],48,[[["self"]],["bool"]]],[11,R[43],E,R[44],48,[[["self"],[R[557]]],["bool"]]],[11,R[45],E,R[46],48,[[["self"],[R[557]]],["bool"]]],[11,"insert",E,R[47],48,[[["self"],[R[557]]]]],[11,"remove",E,R[48],48,[[["self"],[R[557]]]]],[11,"toggle",E,R[49],48,[[["self"],[R[557]]]]],[11,"set",E,R[50],48,[[["self"],[R[557]],["bool"]]]],[0,R[558],R[545],"Arch-specific process switch functions",N,N],[3,R[728],R[630],"The hardware context of a paused thread. It contains just…",N,N],[12,"esp",E,"The top of the stack, where all other registers are saved.",50,N],[5,R[558],E,"Performs the process switch, switching from currently…",N,[[["arc",[R[559]]],["arc",[R[559]]]],["arc",[R[559]]]]],[5,"prepare_for_first_schedule",E,"Prepares the thread for its first schedule by writing…",N,[[[R[559]],[R[9]],[R[9]]]]],[5,"first_schedule",E,"The function ret'd on, on a thread's first schedule - as…",N,[[]]],[5,"jump_to_entrypoint",E,"Jumps to Userspace, and run a userspace program.",N,N],[0,"gdt",R[545],R[857],N,N],[3,R[729],R[631],"Safety wrapper that manages the lifetime of GDT tables.",N,N],[12,"unloaded_table",E,"Inactive descriptor table. Changes to the GDT are done on…",51,N],[3,R[92],E,"VirtualAddress of the TSS structure of the main task. Has…",N,N],[12,R[85],E,E,52,N],[3,R[219],E,"A structure containing our GDT.",N,N],[12,"table",E,"The GDT table, a growable array of DescriptorTableEntry.",53,N],[3,R[220],E,"An entry in the GDT/LDT.",N,N],[12,"0",E,E,54,N],[4,R[221],E,"Lists the valid values of System Descriptor Types.",N,N],[13,R[858],E,E,55,N],[13,"Ldt",E,E,55,N],[13,R[859],E,E,55,N],[13,R[860],E,E,55,N],[13,R[863],E,E,55,N],[13,R[864],E,E,55,N],[13,R[865],E,E,55,N],[5,"init_gdt",E,"Initializes the GDT.",N,[[]]],[5,"push_task_segment",E,"Push a task segment.",N,[[[R[210]]],[R[88]]]],[5,"get_main_iopb",E,"Get the IOPB of the Main Task.",N,N],[7,"GDT",E,"The global GDT. Needs to be initialized with init_gdt().",N,N],[7,R[916],E,R[917],N,N],[7,R[92],E,E,N,N],[11,"load",E,"Create a GdtManager from a DescriptorTable and segment…",51,[[[R[96]],["u16"],["u16"],["u16"]],["gdtmanager"]]],[11,"commit",E,"Commit the changes in the currently unloaded table.",51,[[["self"],["u16"],["u16"],["u16"]]]],[11,"new",E,"Create an empty GDT. This will not include the null entry,…",53,[[],[R[96]]]],[11,"set_from_loaded",E,"Fill the current DescriptorTable with a copy of the…",53,[[["self"]]]],[11,"push",E,"Push a new entry to the table, returning a segment…",53,[[["self"],[R[94]]],[R[88]]]],[11,R[918],E,"Load this descriptor table into the GDTR, and set the…",53,[[["self"],["u16"],["u16"],["u16"]],[R[89]]]],[11,R[919],E,"Returns an empty descriptor. Using this descriptor is an…",54,[[],[R[94]]]],[11,"new",E,R[95],54,[[["u32"],["u32"],["bool"],[R[86]]],[R[94]]]],[11,R[920],E,"Creates an empty GDT system descriptor of the given type.",54,[[[R[213]],["u32"],["u32"],[R[86]]],[R[94]]]],[11,"new_ldt",E,R[921],54,[[[R[96]],[R[86]]],[R[94]]]],[11,"new_tss",E,R[922],54,[[[R[210]],[R[86]],[R[9]]],[R[94]]]],[11,R[923],E,"Gets the byte length of the entry, minus 1.",54,[[["self"]],["u32"]]],[11,R[924],E,"Sets the entry's byte length to the given number plus one.…",54,[[["self"],["u32"]]]],[11,"get_base",E,"Gets the base address of the entry.",54,[[["self"]],["u32"]]],[11,"set_base",E,"Sets the base address of the entry.",54,[[["self"],["u32"]]]],[11,R[925],E,"CPU sets this bit to true when the segment is accessed.",54,[[["self"]],["bool"]]],[11,R[926],E,E,54,[[["self"]],["bool"]]],[11,R[927],E,E,54,[[["self"]],["bool"]]],[11,R[928],E,"Determines whether the segment is a code segment or a data…",54,[[["self"]],["bool"]]],[11,R[929],E,"The privilege level associated with this segment.",54,[[["self"]],[R[86]]]],[11,R[930],E,"A segment needs to be present to have an effect. Using a…",54,[[["self"]],["bool"]]],[11,R[931],E,R[560],54,[[["self"]],["bool"]]],[11,R[932],E,R[560],54,[[["self"],["bool"]]]],[11,"is_32bit",E,"If true, this is a 32-bit segment. If false, it is a…",54,[[["self"]],["bool"]]],[0,"pio",R[545],"Port IO",N,N],[3,"Pio","kfs_kernel::i386::pio",R[313],N,N],[12,"port",E,R[314],56,N],[12,"value",E,R[315],56,N],[0,R[894],R[545],R[895],N,N],[0,"tables",R[561],R[896],N,N],[3,R[225],R[633],R[897],N,N],[12,"limit",E,R[898],57,N],[12,"base",E,"Physical address of the memory region containing the DT.",57,N],[5,"lgdt",E,R[899],N,[[[R[89]]]]],[5,"sgdt",E,"Store GDT table.",N,[[],[R[89]]]],[5,"lldt",E,R[900],N,[[[R[88]]]]],[5,"ltr",E,R[901],N,[[[R[88]]]]],[5,"lidt",E,R[902],N,[[[R[89]]]]],[0,R[903],R[561],R[904],N,N],[5,"set_cs","kfs_kernel::i386::instructions::segmentation",R[905],N,[[[R[88]]]]],[5,"load_ss",E,R[906],N,[[[R[88]]]]],[5,"load_ds",E,R[907],N,[[[R[88]]]]],[5,"load_es",E,R[908],N,[[[R[88]]]]],[5,"load_fs",E,R[909],N,[[[R[88]]]]],[5,"load_gs",E,R[910],N,[[[R[88]]]]],[5,"cs",E,R[911],N,[[],[R[88]]]],[0,R[562],R[561],R[912],N,N],[5,"sti","kfs_kernel::i386::instructions::interrupts",R[913],N,[[]]],[5,"cli",E,R[914],N,[[]]],[5,"hlt",E,"Waits until an interrupt is fired",N,[[]]],[5,"are_enabled",E,"Returns whether interrupts are enabled.",N,[[],["bool"]]],[5,"without_interrupts",E,"Run a closue with disabled interrupts.",N,[[["f"]],["r"]]],[11,"from_u8",R[545],R[915],39,[[["u8"]],[R[86]]]],[11,"new",E,"Creates a new TssStruct.",37,[[],[R[210]]]],[11,"set_esp0_stack",E,"Set the stack pointer used to handle interrupts occuring…",37,[[["self"],["u32"]]]],[11,"set_ip",E,"Set the IP of the current task struct. When we hardware…",37,[[["self"],["u32"]]]],[11,"new",E,"Create a new AlignedTssStruct, using boxing to avoid…",38,[[[R[210]]],["box",["alignedtssstruct"]]]],[0,R[562],R[497],"Interrupt handling.",N,N],[3,"IDT",R[564],"IDT address. Initialized in `init()`.",N,N],[12,R[85],E,E,58,N],[5,"check_thread_killed",E,"Checks if our thread was killed, in which case unschedule…",N,[[]]],[5,"panic_on_exception",E,"Panics with an informative message.",N,N],[5,"divide_by_zero_handler",E,"Divide by zero interruption handler. Kills the process…",N,[[[R[563]]]]],[5,"debug_handler",E,"Debug interruption handler. Kills the process…",N,[[[R[563]]]]],[5,"non_maskable_interrupt_handler",E,"Non maskable interruption handler. Unconditionally panics…",N,[[[R[563]]]]],[5,"breakpoint_handler",E,"Breakpoint interruption handler. Does nothing.",N,[[[R[563]]]]],[5,"overflow_handler",E,"Overflow interruption handler. Kills the process…",N,[[[R[563]]]]],[5,"bound_range_exceeded_handler",E,"Bound range exceeded interruption handler. Kills the…",N,[[[R[563]]]]],[5,"invalid_opcode_handler",E,"Invalid opcode interruption handler. Kills the process…",N,[[[R[563]]]]],[5,"device_not_available_handler",E,"Device not available interruption handler. Kills the…",N,[[[R[563]]]]],[5,"double_fault_handler",E,"Double fault handler. Panics the kernel unconditionally.",N,[[]]],[5,"invalid_tss_handler",E,"Invalid tss interruption handler. Panics the kernel…",N,[[[R[563]],["u32"]]]],[5,"segment_not_present_handler",E,"Segment not present interruption handler. Kills the…",N,[[[R[563]],["u32"]]]],[5,"stack_segment_fault_handler",E,"Stack segment fault handler. Kills the process…",N,[[[R[563]],["u32"]]]],[5,"general_protection_fault_handler",E,"General protection fault handler. Kills the process…",N,[[[R[563]],["u32"]]]],[5,"page_fault_handler",E,"Page fault handler. Kills the process unconditionally.",N,[[[R[563]],[R[557]]]]],[5,"x87_floating_point_handler",E,"X87 floating point interruption handler. Kills the process…",N,[[[R[563]]]]],[5,"alignment_check_handler",E,"Alignment check interruption handler. Kills the process…",N,[[[R[563]],["u32"]]]],[5,"machine_check_handler",E,"Machine check interruption handler. Panics the kernel…",N,[[[R[563]]]]],[5,"simd_floating_point_handler",E,"SIMD exception handler. Kills the process unconditionally.",N,[[[R[563]]]]],[5,"virtualization_handler",E,"Virtualization exception handler. Kills the process…",N,[[[R[563]]]]],[5,"security_exception_handler",E,"Security exception handler. Panics the kernel…",N,[[[R[563]],["u32"]]]],[5,"syscall_handler",E,"This is the function called on int 0x80.",N,[[]]],[5,"init",E,"Initialize the interrupt subsystem. Sets up the PIC and…",N,[[]]],[0,"irq",E,"IRQ Handling",N,N],[5,"timer_handler","kfs_kernel::interrupts::irq",E,N,[[[R[563]]]]],[7,"IRQ_HANDLERS",E,"Array of interrupt handlers. The position in the array…",N,N],[0,"syscalls",R[564],"Syscall implementations",N,N],[3,R[286],R[634],"Represents a register backup. The syscall wrapper…",N,N],[12,"eax",E,E,59,N],[12,"ebx",E,E,59,N],[12,"ecx",E,E,59,N],[12,"edx",E,E,59,N],[12,"esi",E,E,59,N],[12,"edi",E,E,59,N],[12,"ebp",E,E,59,N],[5,R[802],E,R[803],N,[[[R[9]]],[R[16],[R[9],R[565]]]]],[5,R[823],E,"Maps the vga frame buffer mmio in userspace memory",N,[[],[R[16],[R[565]]]]],[5,R[818],E,"Create an event handle for the given IRQ number. Waiting…",N,[[[R[9]],["u32"]],[R[16],[R[9],R[565]]]]],[5,R[813],E,"Waits for one of the handles to signal an event.",N,[[[R[566]],[R[9]]],[R[16],[R[9],R[565]]]]],[5,R[814],E,"Print the passed string to the serial port.",N,[[[R[566]]],[R[16],[R[565]]]]],[5,R[804],E,"Kills our own process.",N,[[],[R[16],[R[565]]]]],[5,R[822],E,"Connects to the given ClientPort.",N,[[["u32"]],[R[16],[R[9],R[565]]]]],[5,R[807],E,"Kills our own thread.",N,[[],[R[16],[R[565]]]]],[5,R[805],E,"Creates a thread in the current process. The thread can…",N,[[[R[9]],[R[9]],[R[9]],["u32"],["u32"]],[R[16],[R[9],R[565]]]]],[5,R[806],E,"Starts a previously created thread.",N,[[["u32"]],[R[16],[R[565]]]]],[5,R[606],E,"Connects to the given named port. The name should be a…",N,[[[R[566]]],[R[16],[R[9],R[565]]]]],[5,R[820],E,"Creates a new ServerPort for the given named port. The…",N,[[[R[566]],["u32"]],[R[16],[R[9],R[565]]]]],[5,R[816],E,"Waits for an incoming connection on the given ServerPort…",N,[[["u32"]],[R[16],[R[9],R[565]]]]],[5,R[252],E,"Send an IPC request through the ClientSession, and blocks…",N,[[[R[567]],["u32"]],[R[16],[R[565]]]]],[5,R[817],E,"If ReplyTarget is not zero, a reply from the given buffer…",N,[[[R[567]],[R[566]],["u32"],[R[9]]],[R[16],[R[9],R[565]]]]],[5,R[812],E,"Closed the passed handle.",N,[[["u32"]],[R[16],[R[565]]]]],[5,R[808],E,"Sleep for a specified amount of time, or yield thread.",N,[[[R[9]]],[R[16],[R[565]]]]],[5,R[819],E,R[611],N,[[["u32"],["bool"],[R[566]]],[R[16],[R[565]]]]],[5,R[809],E,"Allocate a new SharedMemory region. This is a memory…",N,[[["u32"],["u32"],["u32"]],[R[16],[R[9],R[565]]]]],[5,R[810],E,"Maps the block supplied by the handle. The required…",N,[[["u32"],[R[9]],[R[9]],["u32"]],[R[16],[R[565]]]]],[5,R[811],E,"Unmaps this shared memory region. This cannot be used to…",N,[[["u32"],[R[9]],[R[9]]],[R[16],[R[565]]]]],[5,R[568],E,"Query information about an address. Will always fetch the…",N,[[[R[567],[R[492]]],[R[9]],[R[9]]],[R[16],[R[9],R[565]]]]],[5,R[815],E,R[607],N,[[["bool"],[R[9]]],[R[16],[R[565]]]]],[5,"syscall_handler_inner",E,"Syscall dispatcher. Dispatches to the various syscall…",N,[[[R[569]]]]],[11,"apply0",E,R[570],59,[[["self"],[R[16],[R[565]]]]]],[11,"apply1",E,R[570],59,[[["self"],[R[16],[R[9],R[565]]]]]],[11,"apply2",E,R[570],59,[[["self"],[R[16],[R[565]]]]]],[11,"apply3",E,R[570],59,[[["self"],[R[16],[R[565]]]]]],[11,"apply4",E,R[570],59,[[["self"],[R[16],[R[565]]]]]],[7,"IDT",R[564],E,N,N],[0,"frame_allocator",R[497],"Physical memory manager.",N,N],[3,R[244],R[573],R[574],N,N],[5,"init",E,R[575],N,[[[R[187]]]]],[5,R[576],E,R[577],N,[[[R[98]]]]],[0,"physical_mem_region",E,R[571],N,N],[3,R[571],R[635],"A span of adjacent physical frames. A frame is [PAGE_SIZE].",N,N],[12,"frames",E,"The number of frames in this region.",60,N],[12,R[182],E,"The (physical) address of the start of this region.",60,N],[12,"should_free_on_drop",E,"Denotes if the frames held in this region should be freed…",60,N],[3,R[730],E,"An iterator over a physical region. Yields the address of…",N,N],[12,"0",E,E,61,N],[12,"1",E,E,61,N],[11,R[513],E,"Get the start address of this PhysicalMemRegion",60,[[["self"]],[R[98]]]],[11,"size",E,"Get the size this PhysicalMemRegion spans",60,[[["self"]],[R[9]]]],[11,"on_fixed_mmio",E,"Constructs a `PhysicalMemRegion` by circumventing the…",60,[[[R[98]],[R[9]]],["self"]]],[11,"reconstruct",E,R[572],60,[[[R[98]],[R[9]]],["self"]]],[11,"reconstruct_no_dealloc",E,R[572],60,[[[R[98]],[R[9]]],["self"]]],[0,"i386",R[573],"Architecture specific-behaviour i386 implementation of the…",N,N],[3,R[731],R[636],"A frame allocator backed up by a giant bitmap.",N,N],[12,R[957],E,R[184],62,N],[12,R[958],E,"All operations have to check that the Allocator has been…",62,N],[3,R[244],E,R[574],N,N],[5,R[960],E,R[961],N,[[[R[9]]],[R[9]]]],[5,R[962],E,R[963],N,[[[R[9]]],[R[9]]]],[5,"init",E,R[575],N,[[[R[187]]]]],[5,R[975],E,R[976],N,N],[5,R[977],E,R[978],N,N],[5,R[576],E,R[577],N,[[[R[98]]]]],[7,"FRAME_ALLOCATOR",E,R[959],N,N],[17,R[968],E,"The offset part in a [PhysicalAddress]. ``` let…",N,N],[17,R[969],E,"The frame part in [PhysicalAddress]. ``` let phys_address…",N,N],[17,R[970],E,"The right shift to perform to a Physical address to get…",N,N],[17,R[971],E,R[972],N,N],[17,R[973],E,"In the the bitmap, 1 means the frame is free.",N,N],[17,R[974],E,"In the the bitmap, 0 means the frame is occupied.",N,N],[11,"new",E,"Called to initialize the [FRAME_ALLOCATOR] global.",62,[[],["self"]]],[0,"private",R[573],"Private FrameAllocator API",N,N],[8,R[732],"kfs_kernel::frame_allocator::private","An arch-specifig FrameAllocator must expose the following…",N,N],[10,R[663],E,"Marks a region as deallocated. Called when a…",63,[[[R[501]]]]],[10,R[664],E,"Checks if a region is marked allocated.",63,[[[R[98]],[R[9]]],["bool"]]],[10,R[665],E,"Checks if a region is marked reserved.",63,[[[R[98]],[R[9]]],["bool"]]],[8,R[733],R[573],"An arch-specific FrameAllocator must expose the following…",N,N],[10,R[660],E,"Allocates a single PhysicalMemRegion. Frames are…",64,[[[R[9]]],[R[16],[R[501],R[25]]]]],[10,R[661],E,R[662],64,[[[R[9]]],[R[16],["vec",R[25]]]]],[11,"allocate_frame",E,"Allocates a single physical frame.",64,[[],[R[16],[R[501],R[25]]]]],[0,"heap_allocator",R[497],"Virtual heap allocator.",N,N],[3,R[307],R[637],"Simple wrapper around linked_list_allocator, growing heap…",N,N],[12,"0",E,E,65,N],[5,"rust_oom",E,"Called when the kernel heap allocator detects Out Of…",N,N],[17,"RESERVED_HEAP_SIZE",E,"Maximum size of our Kernel Heap.",N,N],[11,"expand",E,R[845],65,[[["self"],[R[9]]]]],[11,"init",E,"Create a new Heap of `RESERVED_HEAP_SIZE` bytes.",65,[[],[R[695],["heap"]]]],[11,"new",E,"Creates a new heap based off of loader settings.",65,[[],[R[262]]]],[0,"devices",R[497],"Device drivers",N,N],[0,"rs232",R[580],"RS-232 serial port driver",N,N],[3,"ComPort",R[638],"The base IO port of a COM",N,N],[12,"0",E,E,66,N],[3,R[734],E,"A foreground and a background combination",N,N],[12,"fg",E,"foreground color",67,N],[12,"bg",E,"background color",67,N],[3,R[735],E,"A COM output. Wraps the IO ports of this COM, and provides…",N,N],[12,"data_port",E,"The DATA IO port of this COM",68,N],[12,R[1004],E,"The STATUS IO port of this COM",68,N],[3,R[737],E,R[856],N,N],[4,R[736],E,"The possible colors for serial",N,N],[13,"Black",E,E,69,N],[13,"Red",E,E,69,N],[13,"Green",E,E,69,N],[13,"Yellow",E,E,69,N],[13,"Blue",E,E,69,N],[13,"Magenta",E,E,69,N],[13,"Cyan",E,E,69,N],[13,"LightGray",E,E,69,N],[13,"Default",E,E,69,N],[13,"DarkGray",E,E,69,N],[13,"LightRed",E,E,69,N],[13,"LightGreen",E,E,69,N],[13,"LightYellow",E,E,69,N],[13,"LightBlue",E,E,69,N],[13,"LightMagenta",E,E,69,N],[13,"LightCyan",E,E,69,N],[13,"White",E,E,69,N],[7,"G_SERIAL",E,"The serial logger.",N,N],[17,"COM1",E,"COM1: I/O port 0x3F8, IRQ 4",N,N],[17,"COM2",E,"COM2: I/O port 0x2F8, IRQ 3",N,N],[17,"COM3",E,"COM3: I/O port 0x3E8, IRQ 4",N,N],[17,"COM4",E,"COM4: I/O port 0x2E8, IRQ 3",N,N],[11,"fg",E,"Creates a color attribute with `fg` foreground and default…",67,[[[R[578]]],[R[579]]]],[11,"fg_bg",E,"Creates a color attribute with `fg` foreground and `bg`…",67,[[[R[578]],[R[578]]],[R[579]]]],[11,R[77],E,"Creates a color attribute with default foreground and…",67,[[],[R[579]]]],[11,"new",E,"Creates a COM port from it's base IO address.",68,[[["comport"]],["serialinternal",["pio"]]]],[11,"send_string",E,"Outputs a string to this COM.",68,[[["self"],["str"]]]],[11,R[590],E,"Re-take the lock protecting multiple access to the device.",70,[[["self"]]]],[0,"pit",R[580],"Programmable Interval Timer",N,N],[3,R[581],R[639],"The mutex wrapping the ports",N,N],[12,R[85],E,E,71,N],[3,R[738],E,"The port 0x61 flags we use.",N,N],[12,"bits",E,E,72,N],[3,"PITPorts",E,"We put the PIT ports in a structure to have them under a…",N,N],[12,"port_chan_0",E,E,73,N],[12,"port_chan_2",E,E,73,N],[12,"port_cmd",E,E,73,N],[12,"port_61",E,E,73,N],[3,R[739],E,"Channel 2",N,N],[12,"ports",E,"A reference to the PITPorts structure.",74,N],[3,"WaitFor",E,"A stream of event that trigger every `ms` amount of…",N,N],[12,"every_ms",E,"Approximation of number of ms spent between triggers.",75,N],[12,"parent_event",E,"The IRQ that we wait on (IRQ #0).",75,N],[12,"spins_needed",E,"Number of IRQ #0 triggers to wait for. Derived from…",75,N],[4,R[740],E,"Used internally to select which channel to apply…",N,N],[13,"Channel0",E,"Operation should apply to Channel 0.",76,N],[13,"Channel2",E,"Operation should apply to Channel 2.",76,N],[5,R[583],E,R[584],N,[[[R[9]]]]],[5,"wait_ms",E,"Returns a stream of event that trigger every `ms` amount…",N,N],[5,"init_channel_0",E,"Initialize the channel 0 to send recurring irqs.",N,[[]]],[7,R[581],E,E,N,N],[17,"OSCILLATOR_FREQ",E,"The oscillator frequency when not divided, in hertz.",N,N],[17,"CHAN_0_FREQUENCY",E,"The frequency of channel 0 irqs, in hertz. One every 10…",N,N],[17,"CHAN_0_DIVISOR",E,"The channel 0 reset value",N,N],[18,R[690],E,E,72,N],[18,R[691],E,E,72,N],[18,"GATE_2",E,E,72,N],[18,R[692],E,E,72,N],[18,"OTHER_2",E,E,72,N],[18,"OTHER_3",E,E,72,N],[18,"OTHER_6",E,E,72,N],[18,"OTHER_7",E,E,72,N],[11,"empty",E,R[32],72,[[],[R[582]]]],[11,"all",E,R[33],72,[[],[R[582]]]],[11,"bits",E,R[35],72,[[["self"]],["u8"]]],[11,R[36],E,R[37],72,[[["u8"]],[R[83],[R[582]]]]],[11,R[38],E,R[39],72,[[["u8"]],[R[582]]]],[11,R[40],E,R[41],72,[[["self"]],["bool"]]],[11,"is_all",E,R[42],72,[[["self"]],["bool"]]],[11,R[43],E,R[44],72,[[["self"],[R[582]]],["bool"]]],[11,R[45],E,R[46],72,[[["self"],[R[582]]],["bool"]]],[11,"insert",E,R[47],72,[[["self"],[R[582]]]]],[11,"remove",E,R[48],72,[[["self"],[R[582]]]]],[11,"toggle",E,R[49],72,[[["self"],[R[582]]]]],[11,"set",E,R[50],72,[[["self"],[R[582]],["bool"]]]],[11,"write_reload_value",E,"Writes a reload value in lobyte/hibyte access mode",73,[[["self"],[R[700]],["u16"]]]],[11,"init",E,"Sets mode #0 for Channel 2.",74,[[["pitports"]],["pitchannel2"]]],[11,"start_countdown",E,"Sets the countdown reset value by writing to channel 2…",74,[[["self"],["u16"]]]],[11,"is_countdown_finished",E,"Checks if the countdown is finished",74,[[["self"]],["bool"]]],[11,"wait_countdown_is_finished",E,"Waits until countdown is finished",74,[[["self"]]]],[11,R[583],E,R[584],74,[[["self"],[R[9]]]]],[0,"pic",R[580],"Driver for the 8259 Programmable Interrupt Controller.",N,N],[3,"ICW1",R[640],"The first control word sent to the PIC.",N,N],[12,"bits",E,E,77,N],[3,R[741],E,"A single PIC8259 device.",N,N],[12,"port_cmd",E,"The PIC's COMMAND IO port.",78,N],[12,"port_data",E,"The PIC's DATA IO port.",78,N],[3,"Pic",E,"A master/slave PIC setup, as commonly found on IBM PCs.",N,N],[12,"master",E,"The master PIC.",79,N],[12,"slave",E,"The slave PIC, cascaded on line 2 of `.master`",79,N],[5,"get",E,"Acquires a reference to the PIC, initializing it if it…",N,[[],["pic"]]],[5,"init",E,"Initializes the PIC if it has not yet been initialized.…",N,[[]]],[7,"PIC",E,"The PIC manager.",N,N],[17,"ICW4_8086",E,"ICW4: 8086/88 (MCS-80/85) mode.",N,N],[18,"ICW4",E,"If this bit is set, ICW4 has to be read. If ICW4 is not…",77,N],[18,"SINGLE",E,"Single. Means that this is the only 8259A in the system.…",77,N],[18,R[693],E,"Call Address Interval. Used only in 8085, not 8086.…",77,N],[18,"LEVEL",E,"If LEVEL = 1, then the 8259A will operate in the level…",77,N],[18,"INIT",E,"Should always be set to 1.",77,N],[11,"empty",E,R[32],77,[[],["icw1"]]],[11,"all",E,R[33],77,[[],["icw1"]]],[11,"bits",E,R[35],77,[[["self"]],["u8"]]],[11,R[36],E,R[37],77,[[["u8"]],[R[83],["icw1"]]]],[11,R[38],E,R[39],77,[[["u8"]],["icw1"]]],[11,R[40],E,R[41],77,[[["self"]],["bool"]]],[11,"is_all",E,R[42],77,[[["self"]],["bool"]]],[11,R[43],E,R[44],77,[[["self"],["icw1"]],["bool"]]],[11,R[45],E,R[46],77,[[["self"],["icw1"]],["bool"]]],[11,"insert",E,R[47],77,[[["self"],["icw1"]]]],[11,"remove",E,R[48],77,[[["self"],["icw1"]]]],[11,"toggle",E,R[49],77,[[["self"],["icw1"]]]],[11,"set",E,R[50],77,[[["self"],["icw1"],["bool"]]]],[11,"new",E,"Creates a new PIC, and initializes it.",79,[[],["pic"]]],[11,"mask",E,"Mask the given IRQ number. Will redirect the call to the…",79,[[["self"],["u8"]]]],[11,R[585],E,R[586],79,[[["self"],["u8"]]]],[11,"new",E,"Setup the 8259 pic. Redirect the IRQ to the chosen…",78,[[["u16"],["bool"],["u8"]],["internalpic"]]],[11,R[585],E,R[586],78,[[["self"]]]],[11,"mask",E,"Mask the given IRQ",78,[[["self"],["u8"]]]],[0,"sync",R[497],"Synchronization primitives used by KFS",N,N],[3,"Once",R[641],"A synchronization primitive which can be used to run a…",N,N],[12,"state",E,E,80,N],[12,"data",E,E,80,N],[3,"RwLock",E,"A reader-writer lock",N,N],[12,"lock",E,E,81,N],[12,"data",E,E,81,N],[3,R[742],E,"A guard to which the protected data can be read",N,N],[12,"lock",E,E,82,N],[12,"data",E,E,82,N],[3,R[743],E,"A guard to which the protected data can be written",N,N],[12,"lock",E,E,83,N],[12,"data",E,E,83,N],[3,"SpinLock",E,"This type provides MUTual EXclusion based on spinning.",N,N],[12,"lock",E,E,84,N],[12,"data",E,E,84,N],[3,R[744],E,"A guard to which the protected data can be accessed",N,N],[12,"lock",E,E,85,N],[12,"data",E,E,85,N],[3,R[745],E,"SpinLock that disables IRQ.",N,N],[12,"internal",E,"SpinLock we wrap.",86,N],[3,R[746],E,"The SpinLockIrq lock guard.",N,N],[12,"0",E,E,87,N],[12,"1",E,E,87,N],[5,"permanently_disable_interrupts",E,"Permanently disables the interrupts. Forever.",N,[[]]],[6,"Mutex",E,R[587],N,N],[6,"MutexGuard",E,R[587],N,N],[7,"INTERRUPT_DISARM",E,"Boolean to [permanently_disable_interrupts].",N,N],[8,"Lock",E,"Abstraction around various kind of locks.",N,N],[10,"lock",E,"Locks the lock until the returned guard is dropped. The…",88,[[["self"]],["guard"]]],[11,"new",E,"Creates a new spinlockirq wrapping the supplied data.",86,[[[T]],["spinlockirq"]]],[11,R[601],E,"Consumes this SpinLockIRQ, returning the underlying data.",86,[[["self"]],[T]]],[11,"lock",E,R[588],86,[[["self"]],[R[589]]]],[11,"try_lock",E,R[588],86,[[["self"]],[R[83],[R[589]]]]],[11,R[590],E,"Force unlocks the lock.",86,[[["self"]]]],[0,"process",R[497],"Process",N,N],[3,R[592],R[599],R[593],N,N],[12,R[594],E,R[595],89,N],[12,R[596],E,R[597],89,N],[12,"ioports",E,R[598],89,N],[3,R[747],E,"The struct representing a process. There's one for every…",N,N],[12,"pid",E,"The unique id of this process.",90,N],[12,"name",E,"A name for this process.",90,N],[12,"pmemory",E,"The memory view of this process. Shared among the threads.",90,N],[12,"phandles",E,"The handles of this process. Shared among the threads.",90,N],[12,"threads",E,"The threads of this process. A ProcessStruct with no…",90,N],[12,"killed",E,"Marks when the process is dying.",90,N],[12,R[591],E,"Permissions of this process.",90,N],[12,"thread_maternity",E,"An array of the created but not yet started threads.",90,N],[3,R[748],E,"The struct representing a thread. A process may own…",N,N],[12,"state",E,"The state of this thread.",91,N],[12,"kstack",E,"The kernel stack it uses for handling syscalls/irqs.",91,N],[12,"hwcontext",E,"The saved hardware context, for getting it running again…",91,N],[12,"process",E,"The process that this thread belongs to.",91,N],[12,"arg",E,"Argument passed to the entrypoint on first schedule.",91,N],[3,R[749],E,"Holds the table associating userspace handle numbers to a…",N,N],[12,"table",E,"Internal mapping from a handle number to a Kernel Object.",92,N],[12,"counter",E,"The next handle's ID.",92,N],[3,R[750],E,"Stores a ThreadState atomically.",N,N],[12,"0",E,E,93,N],[4,"Handle",E,"A handle to a userspace-accessible resource.",N,N],[13,R[288],E,"An event on which we can wait. Could be an IRQ, or a…",94,N],[13,R[292],E,"The server side of an IPC port. See [crate::ipc::port] for…",94,N],[13,R[291],E,"The client side of an IPC port. See [crate::ipc::port] for…",94,N],[13,R[290],E,"The server side of an IPC session. See…",94,N],[13,R[289],E,"The client side of an IPC session. See…",94,N],[13,"Thread",E,"A thread.",94,N],[13,R[293],E,"A shared memory region. The handle holds on to the…",94,N],[4,R[751],E,"The state of a thread.",N,N],[13,"Running",E,"Currently on the CPU.",95,N],[13,"Scheduled",E,"Scheduled to be running.",95,N],[13,"Stopped",E,"Not in the scheduled queue, waiting for an event.",95,N],[13,"Killed",E,"Dying, will be unscheduled and dropped at syscall boundary.",95,N],[0,R[591],E,"Process Capability handling",N,N],[3,R[592],R[642],R[593],N,N],[12,R[594],E,R[595],89,N],[12,R[596],E,R[597],89,N],[12,"ioports",E,R[598],89,N],[3,R[752],E,"Wrapper around a bitfield that only prints the indices of…",N,N],[12,"0",E,E,96,N],[17,"KERNEL_FLAGS",E,"Allowed CPUID and thread priorities.",N,N],[17,"SYSCALL_MASK",E,"Shifted mask of allowed syscalls.",N,N],[17,"MAP_IO_OR_NORMAL_RANGE",E,"Map an IO or physical memory page into process address…",N,N],[17,"MAP_NORMAL_PAGE",E,"Map a normal page.",N,N],[17,"INTERRUPT_PAIR",E,"Allow creating an interrupt for the given IRQ pair.",N,N],[17,"APPLICATION_TYPE",E,"Type of application (sysmodule, applet, application)",N,N],[17,"KERNEL_RELEASE_VERSION",E,"Minimum kernel release.",N,N],[17,"HANDLE_TABLE_SIZE",E,"Max amount of handle for the process.",N,N],[17,"DEBUG_FLAGS",E,"Flags allowing app to debug or be debugged.",N,N],[17,"IO_PORTS_ALLOWED",E,"IOPorts the process is allowed to talk to",N,N],[17,"MAX_SVC",E,"The highest defined svc.",N,N],[17,"KACS_NO_DUPLICATES",E,"Mask of kernel capabilities that cannot appear twice in a…",N,N],[11,"parse_kcaps",R[599],"Parse the kernel capabilities, in the NPDM format. More…",89,N],[7,"NEXT_PROCESS_ID",E,"Next available PID.",N,N],[11,"as_waitable",E,"Gets the handle as a [Waitable], or return a…",94,[[["self"]],[R[16],["waitable",R[565]]]]],[11,"as_client_port",E,"Casts the handle as a [ClientPort], or returns a…",94,[[["self"]],[R[16],[R[613],R[565]]]]],[11,"as_server_session",E,"Casts the handle as a [ServerSession], or returns a…",94,[[["self"]],[R[16],[R[253],R[565]]]]],[11,"as_client_session",E,"Casts the handle as a [ClientSession], or returns a…",94,[[["self"]],[R[16],[R[250],R[565]]]]],[11,"as_thread_handle",E,"Casts the handle as a Weak<[ThreadStruct]>, or returns a…",94,[[["self"]],[R[16],["weak",R[565]]]]],[11,"as_shared_memory",E,"Casts the handle as an Arc<Vec<[PhysicalMemRegion]>, or…",94,[[["self"]],[R[16],["arc",R[565]]]]],[11,"add_handle",E,"Add a handle to the handle table, returning the userspace…",92,[[["self"],["arc",["handle"]]],["u32"]]],[11,R[278],E,"Gets the Kernel Handle associated with the given userspace…",92,[[["self"],["u32"]],[R[16],["arc",R[565]]]]],[11,"delete_handle",E,"Deletes the mapping from the given userspace handle…",92,[[["self"],["u32"]],[R[16],["arc",R[565]]]]],[11,"from_primitive",E,"ThreadState is stored in the ThreadStruct as an…",95,[[[R[9]]],[R[600]]]],[11,"new",E,E,93,[[[R[600]]],["threadstateatomic"]]],[11,R[601],E,E,93,[[["self"]],[R[600]]]],[11,"load",E,E,93,[[["self"],[R[61]]],[R[600]]]],[11,"store",E,E,93,[[["self"],[R[600]],[R[61]]]]],[11,"swap",E,E,93,[[["self"],[R[600]],[R[61]]],[R[600]]]],[11,"compare_and_swap",E,E,93,[[["self"],[R[600]],[R[600]],[R[61]]],[R[600]]]],[11,"compare_exchange",E,E,93,[[["self"],[R[600]],[R[600]],[R[61]],[R[61]]],[R[16],[R[600],R[600]]]]],[11,"compare_exchange_weak",E,E,93,[[["self"],[R[600]],[R[600]],[R[61]],[R[61]]],[R[16],[R[600],R[600]]]]],[11,"fetch_update",E,E,93,[[["self"],["f"],[R[61]],[R[61]]],[R[16],[R[600],R[600]]]]],[11,"new",E,"Creates a new process.",90,[[["string"],[R[83]]],[R[16],["arc",R[25]]]]],[11,R[604],E,"Creates the very first process at boot. Called internally…",90,[[],["arc",[R[603]]]]],[11,"kill_process",E,"Kills a process by killing all of its threads.",90,[[["arc"]]]],[11,"new",E,"Creates a new thread.",91,[[["arc"],[R[101]],[R[101]],[R[9]]],[R[16],["weak",R[25]]]]],[11,"create_first_thread",E,"Creates the very first process and thread at boot.",91,[[],["arc",[R[559]]]]],[11,"start",E,"Takes a reference to a thread, removes it from the…",91,[[["weak"]],[R[16],[R[25]]]]],[11,"kill",E,"Sets the thread to the `Killed` state.",91,[[["arc"]]]],[0,"scheduler",R[497],"The Completly Unfair Scheduler",N,N],[5,"try_get_current_thread","kfs_kernel::scheduler","Gets the current ThreadStruct, incrementing its refcount.…",N,[[],[R[83],["arc"]]]],[5,"get_current_thread",E,"Gets the current ThreadStruct, incrementing its refcount.",N,[[],["arc",[R[559]]]]],[5,"try_get_current_process",E,R[602],N,[[],[R[83],["arc"]]]],[5,"get_current_process",E,R[602],N,[[],["arc",[R[603]]]]],[5,"set_current_thread",E,"Sets the current ThreadStruct.",N,[[["arc",[R[559]]],["f"]],["r"]]],[5,"add_to_schedule_queue",E,"Adds a thread at the end of the schedule queue, and…",N,[[["arc",[R[559]]]]]],[5,"is_in_schedule_queue",E,"Checks if a thread is already either in the schedule queue…",N,[[[R[589]],["arc"]],["bool"]]],[5,"unschedule",E,"Removes the current thread from the schedule queue, and…",N,[[["lock"],["guard"]],[R[16],[R[565]]]]],[5,R[604],E,"Creates the very first process at boot. The created…",N,[[]]],[5,"schedule",E,"Performs a process switch.",N,[[]]],[5,"find_next_thread_to_run",E,"Parses the queue to find the first unlocked process.…",N,N],[5,"internal_schedule",E,"Internal impl of the process switch, used by schedule and…",N,[[["lock"],["bool"]],["guard"]]],[5,"scheduler_first_schedule",E,"The function called when a thread was scheduled for the…",N,[[["arc",[R[559]]],["f"]]]],[7,"CURRENT_THREAD",E,"An Arc to the currently running thread.",N,N],[7,"SCHEDULE_QUEUE",E,"The schedule queue",N,N],[0,"mem",R[497],"Basic functionality for dealing with memory.",N,N],[3,R[226],R[643],R[933],N,N],[12,"0",E,E,97,N],[3,R[227],E,R[934],N,N],[12,"0",E,E,98,N],[3,R[753],E,"A pointer to read-only userspace memory. Prevents…",N,N],[12,"0",E,E,99,N],[3,R[754],E,"A pointer to read-write userspace memory. Prevents…",N,N],[12,"0",E,E,100,N],[3,"FatPtr",E,"Internal rust representation of a DST pointer.",N,N],[12,"data",E,"A pointer to the underlying slice.",101,N],[12,"len",E,"The length of the slice, in number of elements.",101,N],[5,R[964],E,R[965],N,[[[R[9]]],[R[9]]]],[5,R[966],E,R[967],N,[[[R[9]]],[R[9]]]],[5,"count_pages",E,"Counts the number of pages `size` takes",N,[[[R[9]]],[R[9]]]],[11,"addr",E,R[97],98,[[["self"]],[R[9]]]],[11,"addr",E,R[97],97,[[["self"]],[R[9]]]],[11,R[605],E,"Tries to add an offset to a PhysicalAddress, returning a…",97,[[["self"],[R[9]]],[R[16],[R[98],R[25]]]]],[11,"floor",E,R[99],97,[[["self"]],[R[98]]]],[11,"ceil",E,R[100],97,[[["self"]],[R[98]]]],[11,R[605],E,"Tries to add an offset to a VirtualAddress, returning a…",98,[[["self"],[R[9]]],[R[16],[R[101],R[25]]]]],[11,"floor",E,R[99],98,[[["self"]],[R[101]]]],[11,"ceil",E,R[100],98,[[["self"]],[R[101]]]],[11,"from_raw_parts",E,"Forms a UserSpacePtr slice from a pointer and a length.…",99,N],[11,"from_raw_parts_mut",E,"Forms a UserSpacePtrMut slice from a pointer and a length.…",100,N],[0,"ipc",R[497],"IPC primitives",N,N],[3,R[614],R[608],E,N,N],[12,R[85],E,E,102,N],[5,"create_named_port",E,R[821],N,N],[5,R[606],E,"Connects to a named port.",N,N],[0,"session",E,"IPC Sessions",N,N],[3,R[755],R[644],"Wrapper around the currently active session and the…",N,N],[12,"active_request",E,"The request currently being serviced. Sessions are…",103,N],[12,"incoming_requests",E,"Pending Requests.",103,N],[3,"Session",E,"Shared part of a Session.",N,N],[12,"internal",E,"Pending requests and currently active request are there.",104,N],[12,R[609],E,"List of threads waiting for a request.",104,N],[12,R[610],E,"Count of live ServerSessions. Once it drops to 0, all…",104,N],[3,R[289],E,"The client side of a Session.",N,N],[12,"0",E,E,105,N],[3,R[290],E,"The server side of a Session.",N,N],[12,"0",E,E,106,N],[3,R[295],E,R[824],N,N],[12,"0",E,E,107,N],[3,R[296],E,R[825],N,N],[12,"0",E,E,108,N],[3,"Request",E,"An incoming IPC request.",N,N],[12,"sender_buf",E,"Address of the mirror-mapped (in-kernel) IPC buffer.…",109,N],[12,"sender_bufsize",E,"Size of the IPC buffer.",109,N],[12,"sender",E,"Thread that sent this request. It should be woken up when…",109,N],[12,"answered",E,"A really really broken excuse for a condvar. The thread…",109,N],[5,"new",E,R[607],N,N],[5,"buf_map",E,"Send an IPC Buffer from the sender into the receiver.",N,N],[5,"pass_message",E,"Send a message from the sender to the receiver. This is…",N,N],[11,"ty",E,E,107,[[["self"]],["u16"]]],[11,R[826],E,E,107,[[["self"]],["u8"]]],[11,R[827],E,E,107,[[["self"],["u8"]]]],[11,R[828],E,E,107,[[["self"]],["u8"]]],[11,R[829],E,E,107,[[["self"],["u8"]]]],[11,R[830],E,E,107,[[["self"]],["u8"]]],[11,R[831],E,E,107,[[["self"],["u8"]]]],[11,R[832],E,E,107,[[["self"]],["u8"]]],[11,R[833],E,E,107,[[["self"],["u8"]]]],[11,R[834],E,E,107,[[["self"]],["u16"]]],[11,R[835],E,E,107,[[["self"],["u16"]]]],[11,R[836],E,E,107,[[["self"]],["u8"]]],[11,R[837],E,E,107,[[["self"],["u8"]]]],[11,R[838],E,E,107,[[["self"]],["bool"]]],[11,R[839],E,E,107,[[["self"],["bool"]]]],[11,"send_pid",E,E,108,[[["self"]],["bool"]]],[11,R[840],E,E,108,[[["self"],["bool"]]]],[11,R[841],E,E,108,[[["self"]],["u8"]]],[11,R[842],E,E,108,[[["self"],["u8"]]]],[11,R[843],E,E,108,[[["self"]],["u8"]]],[11,R[844],E,E,108,[[["self"],["u8"]]]],[11,"client",E,R[612],104,[[["arc"]],[R[250]]]],[11,"server",E,"Returns a ServerSession from this Port.",104,[[["arc"]],[R[253]]]],[11,"send_request",E,"Send an IPC request through the client pipe. Takes a…",105,[[["self"],[R[567]]],[R[16],[R[565]]]]],[11,"receive",E,"Receive an IPC request through the server pipe. Takes a…",106,[[["self"],[R[567]]],[R[16],[R[565]]]]],[11,"reply",E,"Replies to the currently active IPC request on the server…",106,[[["self"],[R[566]]],[R[16],[R[565]]]]],[0,"port",R[608],"IPC Port",N,N],[3,"Port",R[645],"An endpoint which can be connected to.",N,N],[12,"incoming_connections",E,"List of incoming connection requests.",110,N],[12,R[609],E,"List of threads waiting for a connection request.",110,N],[12,R[610],E,"Number of active ServerPort. When it drops to 0, future…",110,N],[3,R[291],E,"The client side of a Port.",N,N],[12,"0",E,E,111,N],[3,R[292],E,"The server side of a Port.",N,N],[12,"0",E,E,112,N],[3,R[756],E,"Represents a connection request from the creator thread.",N,N],[12,"session",E,"Session that this connection request is for.",113,N],[12,"creator",E,"Thread that wants to connect to this Port.",113,N],[5,"new",E,R[611],N,N],[11,"client",E,R[612],110,[[["arc"]],[R[613]]]],[11,"server",E,"Returns a ServerPort from this Port.",110,[[["arc"]],[R[249]]]],[11,"accept",E,"Accept a new connection on the Port.",112,[[["self"]],[R[16],[R[253],R[565]]]]],[11,"connect",E,"Connects to this port.",111,[[["self"]],[R[16],[R[250],R[565]]]]],[7,R[614],R[608],E,N,N],[0,R[979],R[497],"Loads Kernel Built-ins.",N,N],[3,R[757],R[646],"Represents a grub module once mapped in kernel memory",N,N],[12,"mapping_addr",E,"The address of the mapping, in KernelLand.",114,N],[12,"start",E,"The start of the module in the mapping, if it was not page…",114,N],[12,"len",E,"The length of the module.",114,N],[12,"elf",E,"The module parsed as an ElfFile.",114,N],[5,"map_grub_module",E,"Maps a grub module, which already lives in reserved…",N,[[["moduletag"]],[R[16],[R[615],R[25]]]]],[5,"get_kacs",E,"Gets the desired kernel access controls for a process…",N,[[[R[615]]],[R[83]]]],[5,"load_builtin",E,"Loads the given kernel built-in into the given page table.…",N,[[[R[616]],[R[615]]],[R[9]]]],[5,R[980],E,R[981],N,[[[R[616]],[R[982]],["elffile"]]]],[0,"utils",R[497],"Generic useful functions",N,N],[0,"io",R[617],R[310],N,N],[8,"Io",R[632],R[316],N,N],[16,"Value",E,R[317],115,N],[10,"read",E,R[4],115,N],[10,"write",E,R[6],115,N],[11,"readf",E,R[5],115,N],[11,"writef",E,R[318],115,N],[3,R[21],E,R[311],N,N],[12,"inner",E,E,116,N],[3,R[22],E,R[312],N,N],[12,"inner",E,E,117,N],[3,"Pio",E,R[313],N,N],[12,"port",E,R[314],56,N],[12,"value",E,R[315],56,N],[5,"align_up",R[617],R[761],N,[[[T],[T]],[T]]],[5,R[762],E,R[763],N,[[[T],[T]],[T]]],[5,R[764],E,R[765],N,[[[R[9]],[R[9]]],[R[83],[R[9]]]]],[5,"div_ceil",E,R[766],N,[[[T],[T]],[T]]],[5,R[767],E,R[768],N,N],[5,R[769],E,R[770],N,N],[8,R[23],E,R[797],N,N],[11,R[798],E,R[799],118,N],[5,R[771],E,R[772],N,N],[5,R[773],E,R[774],N,N],[5,R[775],E,R[776],N,N],[3,R[7],E,R[1],N,N],[12,"data",E,R[2],119,N],[12,"pos",E,R[3],119,N],[3,R[8],E,R[1],N,N],[12,"data",E,R[2],120,N],[12,"pos",E,R[3],120,N],[14,R[800],E,R[801],N,N],[8,R[758],E,"A trait for things that can be splitted in two parts",N,N],[10,R[666],E,"Split the given object in two at a given offset.",121,[[["self"],[R[9]]],[R[16],[R[83],R[25]]]]],[11,"right_split",E,"Splits the given object in two at the given offset.",121,[[["self"],[R[9]]],[R[16],[R[83],R[25]]]]],[0,"checks",R[497],"Checked maths functions returning useful errors.",N,N],[5,"check_aligned","kfs_kernel::checks","checks that a certain value meets the given alignment.",N,[[[R[9]],[R[9]]],[R[16],[R[25]]]]],[5,"check_nonzero_length",E,"checks that a length is not 0.",N,[[[R[9]]],[R[16],[R[25]]]]],[5,"add_or_error",E,"adds to usize, and returns an KernelError if it would…",N,[[[R[9]],[R[9]]],[R[16],[R[9],R[25]]]]],[5,"sub_or_error",E,"subtracts to usize, and returns an KernelError if it would…",N,[[[R[9]],[R[9]]],[R[16],[R[9],R[25]]]]],[0,R[846],R[497],E,N,N],[5,R[847],"kfs_kernel::__rg_allocator_abi",E,N,N],[5,R[848],E,E,N,N],[5,R[849],E,E,N,N],[5,R[850],E,E,N,N],[7,R[851],R[497],"The global heap allocator.",N,N],[11,"from",R[499],E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,R[268],E,E,0,[[["self"]],[T]]],[11,R[266],E,E,0,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",R[526],E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"from",R[618],E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,"from",R[619],E,122,[[[T]],[T]]],[11,R[12],E,E,122,[[[U]],[R[16]]]],[11,R[13],E,E,122,[[["self"]],[R[16]]]],[11,"into",E,E,122,[[["self"]],[U]]],[11,R[18],E,E,122,[[["self"]],[T]]],[11,R[14],E,E,122,[[["self"]],[T]]],[11,R[17],E,E,122,[[["self"]],[R[19]]]],[11,"from",E,E,123,[[[T]],[T]]],[11,R[12],E,E,123,[[[U]],[R[16]]]],[11,R[13],E,E,123,[[["self"]],[R[16]]]],[11,"into",E,E,123,[[["self"]],[U]]],[11,R[18],E,E,123,[[["self"]],[T]]],[11,R[14],E,E,123,[[["self"]],[T]]],[11,R[17],E,E,123,[[["self"]],[R[19]]]],[11,"from",E,E,124,[[[T]],[T]]],[11,R[12],E,E,124,[[[U]],[R[16]]]],[11,R[13],E,E,124,[[["self"]],[R[16]]]],[11,"into",E,E,124,[[["self"]],[U]]],[11,R[18],E,E,124,[[["self"]],[T]]],[11,R[14],E,E,124,[[["self"]],[T]]],[11,R[17],E,E,124,[[["self"]],[R[19]]]],[11,"from",R[620],E,7,[[[T]],[T]]],[11,R[12],E,E,7,[[[U]],[R[16]]]],[11,R[13],E,E,7,[[["self"]],[R[16]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[R[19]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[12],E,E,8,[[[U]],[R[16]]]],[11,R[13],E,E,8,[[["self"]],[R[16]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[R[19]]]],[11,"from",R[621],E,9,[[[T]],[T]]],[11,R[12],E,E,9,[[[U]],[R[16]]]],[11,R[13],E,E,9,[[["self"]],[R[16]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[R[19]]]],[11,"from",R[511],E,10,[[[T]],[T]]],[11,R[12],E,E,10,[[[U]],[R[16]]]],[11,R[13],E,E,10,[[["self"]],[R[16]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[R[19]]]],[11,R[273],E,E,10,[[["self"]],["string"]]],[11,"as_fail",E,E,10,[[["self"]],["fail"]]],[11,"from",R[520],E,125,[[[T]],[T]]],[11,R[12],E,E,125,[[[U]],[R[16]]]],[11,R[13],E,E,125,[[["self"]],[R[16]]]],[11,"into",E,E,125,[[["self"]],[U]]],[11,R[18],E,E,125,[[["self"]],[T]]],[11,R[14],E,E,125,[[["self"]],[T]]],[11,R[17],E,E,125,[[["self"]],[R[19]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[12],E,E,11,[[[U]],[R[16]]]],[11,R[13],E,E,11,[[["self"]],[R[16]]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[R[19]]]],[11,"from",R[622],E,17,[[[T]],[T]]],[11,R[12],E,E,17,[[[U]],[R[16]]]],[11,R[13],E,E,17,[[["self"]],[R[16]]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[18],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[R[19]]]],[11,R[268],E,E,17,[[["self"]],[T]]],[11,R[266],E,E,17,N],[11,"from",E,E,18,[[[T]],[T]]],[11,R[12],E,E,18,[[[U]],[R[16]]]],[11,R[13],E,E,18,[[["self"]],[R[16]]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[18],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[R[19]]]],[11,R[268],E,E,18,[[["self"]],[T]]],[11,R[266],E,E,18,N],[11,"from",R[623],E,19,[[[T]],[T]]],[11,R[12],E,E,19,[[[U]],[R[16]]]],[11,R[13],E,E,19,[[["self"]],[R[16]]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[18],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[R[19]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[12],E,E,20,[[[U]],[R[16]]]],[11,R[13],E,E,20,[[["self"]],[R[16]]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[18],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[17],E,E,20,[[["self"]],[R[19]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[12],E,E,21,[[[U]],[R[16]]]],[11,R[13],E,E,21,[[["self"]],[R[16]]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[18],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[R[19]]]],[11,"from",E,E,126,[[[T]],[T]]],[11,R[12],E,E,126,[[[U]],[R[16]]]],[11,R[13],E,E,126,[[["self"]],[R[16]]]],[11,"into",E,E,126,[[["self"]],[U]]],[11,R[18],E,E,126,[[["self"]],[T]]],[11,R[14],E,E,126,[[["self"]],[T]]],[11,R[17],E,E,126,[[["self"]],[R[19]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[12],E,E,22,[[[U]],[R[16]]]],[11,R[13],E,E,22,[[["self"]],[R[16]]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[18],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[R[19]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[12],E,E,23,[[[U]],[R[16]]]],[11,R[13],E,E,23,[[["self"]],[R[16]]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[18],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[R[19]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[12],E,E,24,[[[U]],[R[16]]]],[11,R[13],E,E,24,[[["self"]],[R[16]]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[18],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[R[19]]]],[11,"from",E,E,127,[[[T]],[T]]],[11,R[12],E,E,127,[[[U]],[R[16]]]],[11,R[13],E,E,127,[[["self"]],[R[16]]]],[11,"into",E,E,127,[[["self"]],[U]]],[11,R[18],E,E,127,[[["self"]],[T]]],[11,R[14],E,E,127,[[["self"]],[T]]],[11,R[17],E,E,127,[[["self"]],[R[19]]]],[11,"from",R[527],E,25,[[[T]],[T]]],[11,R[12],E,E,25,[[[U]],[R[16]]]],[11,R[13],E,E,25,[[["self"]],[R[16]]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[18],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[R[19]]]],[11,"from",R[624],E,26,[[[T]],[T]]],[11,R[12],E,E,26,[[[U]],[R[16]]]],[11,R[13],E,E,26,[[["self"]],[R[16]]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[18],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[R[19]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[12],E,E,27,[[[U]],[R[16]]]],[11,R[13],E,E,27,[[["self"]],[R[16]]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[18],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[R[19]]]],[11,"from",R[536],E,29,[[[T]],[T]]],[11,R[12],E,E,29,[[[U]],[R[16]]]],[11,R[13],E,E,29,[[["self"]],[R[16]]]],[11,"into",E,E,29,[[["self"]],[U]]],[11,R[18],E,E,29,[[["self"]],[T]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[17],E,E,29,[[["self"]],[R[19]]]],[11,R[268],E,E,29,[[["self"]],[T]]],[11,R[266],E,E,29,N],[11,R[273],E,E,29,[[["self"]],["string"]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[12],E,E,30,[[[U]],[R[16]]]],[11,R[13],E,E,30,[[["self"]],[R[16]]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[18],E,E,30,[[["self"]],[T]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[R[19]]]],[11,R[268],E,E,30,[[["self"]],[T]]],[11,R[266],E,E,30,N],[11,R[273],E,E,30,[[["self"]],["string"]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[12],E,E,31,[[[U]],[R[16]]]],[11,R[13],E,E,31,[[["self"]],[R[16]]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[18],E,E,31,[[["self"]],[T]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[R[19]]]],[11,R[273],E,E,31,[[["self"]],["string"]]],[11,"as_fail",E,E,31,[[["self"]],["fail"]]],[11,"from",R[542],E,32,[[[T]],[T]]],[11,R[12],E,E,32,[[[U]],[R[16]]]],[11,R[13],E,E,32,[[["self"]],[R[16]]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[18],E,E,32,[[["self"]],[T]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[R[19]]]],[11,"from",R[540],E,33,[[[T]],[T]]],[11,R[12],E,E,33,[[[U]],[R[16]]]],[11,R[13],E,E,33,[[["self"]],[R[16]]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[18],E,E,33,[[["self"]],[T]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[R[19]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[12],E,E,34,[[[U]],[R[16]]]],[11,R[13],E,E,34,[[["self"]],[R[16]]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[18],E,E,34,[[["self"]],[T]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[R[19]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[12],E,E,35,[[[U]],[R[16]]]],[11,R[13],E,E,35,[[["self"]],[R[16]]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[18],E,E,35,[[["self"]],[T]]],[11,R[14],E,E,35,[[["self"]],[T]]],[11,R[17],E,E,35,[[["self"]],[R[19]]]],[11,"from",R[625],E,36,[[[T]],[T]]],[11,R[12],E,E,36,[[[U]],[R[16]]]],[11,R[13],E,E,36,[[["self"]],[R[16]]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[18],E,E,36,[[["self"]],[T]]],[11,R[14],E,E,36,[[["self"]],[T]]],[11,R[17],E,E,36,[[["self"]],[R[19]]]],[11,R[273],E,E,36,[[["self"]],["string"]]],[11,"from",R[545],E,37,[[[T]],[T]]],[11,R[12],E,E,37,[[[U]],[R[16]]]],[11,R[13],E,E,37,[[["self"]],[R[16]]]],[11,"into",E,E,37,[[["self"]],[U]]],[11,R[18],E,E,37,[[["self"]],[T]]],[11,R[14],E,E,37,[[["self"]],[T]]],[11,R[17],E,E,37,[[["self"]],[R[19]]]],[11,R[268],E,E,37,[[["self"]],[T]]],[11,R[266],E,E,37,N],[11,"from",E,E,38,[[[T]],[T]]],[11,R[12],E,E,38,[[[U]],[R[16]]]],[11,R[13],E,E,38,[[["self"]],[R[16]]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[18],E,E,38,[[["self"]],[T]]],[11,R[14],E,E,38,[[["self"]],[T]]],[11,R[17],E,E,38,[[["self"]],[R[19]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[12],E,E,39,[[[U]],[R[16]]]],[11,R[13],E,E,39,[[["self"]],[R[16]]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[18],E,E,39,[[["self"]],[T]]],[11,R[14],E,E,39,[[["self"]],[T]]],[11,R[17],E,E,39,[[["self"]],[R[19]]]],[11,R[268],E,E,39,[[["self"]],[T]]],[11,R[266],E,E,39,N],[11,"from",R[626],E,40,[[[T]],[T]]],[11,R[12],E,E,40,[[[U]],[R[16]]]],[11,R[13],E,E,40,[[["self"]],[R[16]]]],[11,"into",E,E,40,[[["self"]],[U]]],[11,R[18],E,E,40,[[["self"]],[T]]],[11,R[14],E,E,40,[[["self"]],[T]]],[11,R[17],E,E,40,[[["self"]],[R[19]]]],[11,R[268],E,E,40,[[["self"]],[T]]],[11,R[266],E,E,40,N],[11,"from",R[627],E,41,[[[T]],[T]]],[11,R[12],E,E,41,[[[U]],[R[16]]]],[11,R[13],E,E,41,[[["self"]],[R[16]]]],[11,"into",E,E,41,[[["self"]],[U]]],[11,R[18],E,E,41,[[["self"]],[T]]],[11,R[14],E,E,41,[[["self"]],[T]]],[11,R[17],E,E,41,[[["self"]],[R[19]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[12],E,E,42,[[[U]],[R[16]]]],[11,R[13],E,E,42,[[["self"]],[R[16]]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[18],E,E,42,[[["self"]],[T]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[17],E,E,42,[[["self"]],[R[19]]]],[11,"from",R[628],E,43,[[[T]],[T]]],[11,R[12],E,E,43,[[[U]],[R[16]]]],[11,R[13],E,E,43,[[["self"]],[R[16]]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[18],E,E,43,[[["self"]],[T]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[17],E,E,43,[[["self"]],[R[19]]]],[11,R[268],E,E,43,[[["self"]],[T]]],[11,R[266],E,E,43,N],[11,"from",R[629],E,44,[[[T]],[T]]],[11,R[12],E,E,44,[[[U]],[R[16]]]],[11,R[13],E,E,44,[[["self"]],[R[16]]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[18],E,E,44,[[["self"]],[T]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[17],E,E,44,[[["self"]],[R[19]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[12],E,E,45,[[[U]],[R[16]]]],[11,R[13],E,E,45,[[["self"]],[R[16]]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[18],E,E,45,[[["self"]],[T]]],[11,R[14],E,E,45,[[["self"]],[T]]],[11,R[17],E,E,45,[[["self"]],[R[19]]]],[11,R[268],E,E,45,[[["self"]],[T]]],[11,R[266],E,E,45,N],[11,"from",E,E,46,[[[T]],[T]]],[11,R[12],E,E,46,[[[U]],[R[16]]]],[11,R[13],E,E,46,[[["self"]],[R[16]]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[18],E,E,46,[[["self"]],[T]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[17],E,E,46,[[["self"]],[R[19]]]],[11,R[268],E,E,46,[[["self"]],[T]]],[11,R[266],E,E,46,N],[11,"bit",E,E,46,[[["self"],[R[9]]],["bool"]]],[11,"set_bit",E,E,46,N],[11,"from",E,E,47,[[[T]],[T]]],[11,R[12],E,E,47,[[[U]],[R[16]]]],[11,R[13],E,E,47,[[["self"]],[R[16]]]],[11,"into",E,E,47,[[["self"]],[U]]],[11,R[18],E,E,47,[[["self"]],[T]]],[11,R[14],E,E,47,[[["self"]],[T]]],[11,R[17],E,E,47,[[["self"]],[R[19]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[12],E,E,48,[[[U]],[R[16]]]],[11,R[13],E,E,48,[[["self"]],[R[16]]]],[11,"into",E,E,48,[[["self"]],[U]]],[11,R[18],E,E,48,[[["self"]],[T]]],[11,R[14],E,E,48,[[["self"]],[T]]],[11,R[17],E,E,48,[[["self"]],[R[19]]]],[11,R[268],E,E,48,[[["self"]],[T]]],[11,R[266],E,E,48,N],[11,"from",E,E,49,[[[T]],[T]]],[11,R[12],E,E,49,[[[U]],[R[16]]]],[11,R[13],E,E,49,[[["self"]],[R[16]]]],[11,"into",E,E,49,[[["self"]],[U]]],[11,R[18],E,E,49,[[["self"]],[T]]],[11,R[14],E,E,49,[[["self"]],[T]]],[11,R[17],E,E,49,[[["self"]],[R[19]]]],[11,R[268],E,E,49,[[["self"]],[T]]],[11,R[266],E,E,49,N],[11,"from",R[630],E,50,[[[T]],[T]]],[11,R[12],E,E,50,[[[U]],[R[16]]]],[11,R[13],E,E,50,[[["self"]],[R[16]]]],[11,"into",E,E,50,[[["self"]],[U]]],[11,R[18],E,E,50,[[["self"]],[T]]],[11,R[14],E,E,50,[[["self"]],[T]]],[11,R[17],E,E,50,[[["self"]],[R[19]]]],[11,"from",R[631],E,51,[[[T]],[T]]],[11,R[12],E,E,51,[[[U]],[R[16]]]],[11,R[13],E,E,51,[[["self"]],[R[16]]]],[11,"into",E,E,51,[[["self"]],[U]]],[11,R[18],E,E,51,[[["self"]],[T]]],[11,R[14],E,E,51,[[["self"]],[T]]],[11,R[17],E,E,51,[[["self"]],[R[19]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[12],E,E,52,[[[U]],[R[16]]]],[11,R[13],E,E,52,[[["self"]],[R[16]]]],[11,"into",E,E,52,[[["self"]],[U]]],[11,R[18],E,E,52,[[["self"]],[T]]],[11,R[14],E,E,52,[[["self"]],[T]]],[11,R[17],E,E,52,[[["self"]],[R[19]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[12],E,E,53,[[[U]],[R[16]]]],[11,R[13],E,E,53,[[["self"]],[R[16]]]],[11,"into",E,E,53,[[["self"]],[U]]],[11,R[18],E,E,53,[[["self"]],[T]]],[11,R[14],E,E,53,[[["self"]],[T]]],[11,R[17],E,E,53,[[["self"]],[R[19]]]],[11,R[268],E,E,53,[[["self"]],[T]]],[11,R[266],E,E,53,N],[11,"from",E,E,54,[[[T]],[T]]],[11,R[12],E,E,54,[[[U]],[R[16]]]],[11,R[13],E,E,54,[[["self"]],[R[16]]]],[11,"into",E,E,54,[[["self"]],[U]]],[11,R[18],E,E,54,[[["self"]],[T]]],[11,R[14],E,E,54,[[["self"]],[T]]],[11,R[17],E,E,54,[[["self"]],[R[19]]]],[11,R[268],E,E,54,[[["self"]],[T]]],[11,R[266],E,E,54,N],[11,"from",E,E,55,[[[T]],[T]]],[11,R[12],E,E,55,[[[U]],[R[16]]]],[11,R[13],E,E,55,[[["self"]],[R[16]]]],[11,"into",E,E,55,[[["self"]],[U]]],[11,R[18],E,E,55,[[["self"]],[T]]],[11,R[14],E,E,55,[[["self"]],[T]]],[11,R[17],E,E,55,[[["self"]],[R[19]]]],[11,R[268],E,E,55,[[["self"]],[T]]],[11,R[266],E,E,55,N],[11,"from",R[632],E,56,[[[T]],[T]]],[11,R[12],E,E,56,[[[U]],[R[16]]]],[11,R[13],E,E,56,[[["self"]],[R[16]]]],[11,"into",E,E,56,[[["self"]],[U]]],[11,R[18],E,E,56,[[["self"]],[T]]],[11,R[14],E,E,56,[[["self"]],[T]]],[11,R[17],E,E,56,[[["self"]],[R[19]]]],[11,R[268],E,E,56,[[["self"]],[T]]],[11,R[266],E,E,56,N],[11,"from",R[633],E,57,[[[T]],[T]]],[11,R[12],E,E,57,[[[U]],[R[16]]]],[11,R[13],E,E,57,[[["self"]],[R[16]]]],[11,"into",E,E,57,[[["self"]],[U]]],[11,R[18],E,E,57,[[["self"]],[T]]],[11,R[14],E,E,57,[[["self"]],[T]]],[11,R[17],E,E,57,[[["self"]],[R[19]]]],[11,R[268],E,E,57,[[["self"]],[T]]],[11,R[266],E,E,57,N],[11,"from",R[564],E,58,[[[T]],[T]]],[11,R[12],E,E,58,[[[U]],[R[16]]]],[11,R[13],E,E,58,[[["self"]],[R[16]]]],[11,"into",E,E,58,[[["self"]],[U]]],[11,R[18],E,E,58,[[["self"]],[T]]],[11,R[14],E,E,58,[[["self"]],[T]]],[11,R[17],E,E,58,[[["self"]],[R[19]]]],[11,"from",R[634],E,59,[[[T]],[T]]],[11,R[12],E,E,59,[[[U]],[R[16]]]],[11,R[13],E,E,59,[[["self"]],[R[16]]]],[11,"into",E,E,59,[[["self"]],[U]]],[11,R[18],E,E,59,[[["self"]],[T]]],[11,R[14],E,E,59,[[["self"]],[T]]],[11,R[17],E,E,59,[[["self"]],[R[19]]]],[11,"from",R[573],E,128,[[[T]],[T]]],[11,R[12],E,E,128,[[[U]],[R[16]]]],[11,R[13],E,E,128,[[["self"]],[R[16]]]],[11,"into",E,E,128,[[["self"]],[U]]],[11,R[18],E,E,128,[[["self"]],[T]]],[11,R[14],E,E,128,[[["self"]],[T]]],[11,R[17],E,E,128,[[["self"]],[R[19]]]],[11,"from",R[635],E,60,[[[T]],[T]]],[11,R[12],E,E,60,[[[U]],[R[16]]]],[11,R[13],E,E,60,[[["self"]],[R[16]]]],[11,"into",E,E,60,[[["self"]],[U]]],[11,R[18],E,E,60,[[["self"]],[T]]],[11,R[14],E,E,60,[[["self"]],[T]]],[11,R[17],E,E,60,[[["self"]],[R[19]]]],[11,"into_iter",E,E,61,[[["self"]],["i"]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[12],E,E,61,[[[U]],[R[16]]]],[11,R[13],E,E,61,[[["self"]],[R[16]]]],[11,"into",E,E,61,[[["self"]],[U]]],[11,R[18],E,E,61,[[["self"]],[T]]],[11,R[14],E,E,61,[[["self"]],[T]]],[11,R[17],E,E,61,[[["self"]],[R[19]]]],[11,R[268],E,E,61,[[["self"]],[T]]],[11,R[266],E,E,61,N],[11,"from",R[636],E,62,[[[T]],[T]]],[11,R[12],E,E,62,[[[U]],[R[16]]]],[11,R[13],E,E,62,[[["self"]],[R[16]]]],[11,"into",E,E,62,[[["self"]],[U]]],[11,R[18],E,E,62,[[["self"]],[T]]],[11,R[14],E,E,62,[[["self"]],[T]]],[11,R[17],E,E,62,[[["self"]],[R[19]]]],[11,"from",R[637],E,65,[[[T]],[T]]],[11,R[12],E,E,65,[[[U]],[R[16]]]],[11,R[13],E,E,65,[[["self"]],[R[16]]]],[11,"into",E,E,65,[[["self"]],[U]]],[11,R[18],E,E,65,[[["self"]],[T]]],[11,R[14],E,E,65,[[["self"]],[T]]],[11,R[17],E,E,65,[[["self"]],[R[19]]]],[11,"from",R[638],E,66,[[[T]],[T]]],[11,R[12],E,E,66,[[[U]],[R[16]]]],[11,R[13],E,E,66,[[["self"]],[R[16]]]],[11,"into",E,E,66,[[["self"]],[U]]],[11,R[18],E,E,66,[[["self"]],[T]]],[11,R[14],E,E,66,[[["self"]],[T]]],[11,R[17],E,E,66,[[["self"]],[R[19]]]],[11,R[268],E,E,66,[[["self"]],[T]]],[11,R[266],E,E,66,N],[11,"from",E,E,67,[[[T]],[T]]],[11,R[12],E,E,67,[[[U]],[R[16]]]],[11,R[13],E,E,67,[[["self"]],[R[16]]]],[11,"into",E,E,67,[[["self"]],[U]]],[11,R[18],E,E,67,[[["self"]],[T]]],[11,R[14],E,E,67,[[["self"]],[T]]],[11,R[17],E,E,67,[[["self"]],[R[19]]]],[11,R[268],E,E,67,[[["self"]],[T]]],[11,R[266],E,E,67,N],[11,R[273],E,E,67,[[["self"]],["string"]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[12],E,E,68,[[[U]],[R[16]]]],[11,R[13],E,E,68,[[["self"]],[R[16]]]],[11,"into",E,E,68,[[["self"]],[U]]],[11,R[18],E,E,68,[[["self"]],[T]]],[11,R[14],E,E,68,[[["self"]],[T]]],[11,R[17],E,E,68,[[["self"]],[R[19]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[12],E,E,70,[[[U]],[R[16]]]],[11,R[13],E,E,70,[[["self"]],[R[16]]]],[11,"into",E,E,70,[[["self"]],[U]]],[11,R[18],E,E,70,[[["self"]],[T]]],[11,R[14],E,E,70,[[["self"]],[T]]],[11,R[17],E,E,70,[[["self"]],[R[19]]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[12],E,E,69,[[[U]],[R[16]]]],[11,R[13],E,E,69,[[["self"]],[R[16]]]],[11,"into",E,E,69,[[["self"]],[U]]],[11,R[18],E,E,69,[[["self"]],[T]]],[11,R[14],E,E,69,[[["self"]],[T]]],[11,R[17],E,E,69,[[["self"]],[R[19]]]],[11,R[268],E,E,69,[[["self"]],[T]]],[11,R[266],E,E,69,N],[11,"from",R[639],E,71,[[[T]],[T]]],[11,R[12],E,E,71,[[[U]],[R[16]]]],[11,R[13],E,E,71,[[["self"]],[R[16]]]],[11,"into",E,E,71,[[["self"]],[U]]],[11,R[18],E,E,71,[[["self"]],[T]]],[11,R[14],E,E,71,[[["self"]],[T]]],[11,R[17],E,E,71,[[["self"]],[R[19]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[12],E,E,72,[[[U]],[R[16]]]],[11,R[13],E,E,72,[[["self"]],[R[16]]]],[11,"into",E,E,72,[[["self"]],[U]]],[11,R[18],E,E,72,[[["self"]],[T]]],[11,R[14],E,E,72,[[["self"]],[T]]],[11,R[17],E,E,72,[[["self"]],[R[19]]]],[11,R[268],E,E,72,[[["self"]],[T]]],[11,R[266],E,E,72,N],[11,"from",E,E,73,[[[T]],[T]]],[11,R[12],E,E,73,[[[U]],[R[16]]]],[11,R[13],E,E,73,[[["self"]],[R[16]]]],[11,"into",E,E,73,[[["self"]],[U]]],[11,R[18],E,E,73,[[["self"]],[T]]],[11,R[14],E,E,73,[[["self"]],[T]]],[11,R[17],E,E,73,[[["self"]],[R[19]]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[12],E,E,74,[[[U]],[R[16]]]],[11,R[13],E,E,74,[[["self"]],[R[16]]]],[11,"into",E,E,74,[[["self"]],[U]]],[11,R[18],E,E,74,[[["self"]],[T]]],[11,R[14],E,E,74,[[["self"]],[T]]],[11,R[17],E,E,74,[[["self"]],[R[19]]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[12],E,E,75,[[[U]],[R[16]]]],[11,R[13],E,E,75,[[["self"]],[R[16]]]],[11,"into",E,E,75,[[["self"]],[U]]],[11,R[18],E,E,75,[[["self"]],[T]]],[11,R[14],E,E,75,[[["self"]],[T]]],[11,R[17],E,E,75,[[["self"]],[R[19]]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[12],E,E,76,[[[U]],[R[16]]]],[11,R[13],E,E,76,[[["self"]],[R[16]]]],[11,"into",E,E,76,[[["self"]],[U]]],[11,R[18],E,E,76,[[["self"]],[T]]],[11,R[14],E,E,76,[[["self"]],[T]]],[11,R[17],E,E,76,[[["self"]],[R[19]]]],[11,R[268],E,E,76,[[["self"]],[T]]],[11,R[266],E,E,76,N],[11,"from",R[640],E,77,[[[T]],[T]]],[11,R[12],E,E,77,[[[U]],[R[16]]]],[11,R[13],E,E,77,[[["self"]],[R[16]]]],[11,"into",E,E,77,[[["self"]],[U]]],[11,R[18],E,E,77,[[["self"]],[T]]],[11,R[14],E,E,77,[[["self"]],[T]]],[11,R[17],E,E,77,[[["self"]],[R[19]]]],[11,R[268],E,E,77,[[["self"]],[T]]],[11,R[266],E,E,77,N],[11,"from",E,E,78,[[[T]],[T]]],[11,R[12],E,E,78,[[[U]],[R[16]]]],[11,R[13],E,E,78,[[["self"]],[R[16]]]],[11,"into",E,E,78,[[["self"]],[U]]],[11,R[18],E,E,78,[[["self"]],[T]]],[11,R[14],E,E,78,[[["self"]],[T]]],[11,R[17],E,E,78,[[["self"]],[R[19]]]],[11,"from",E,E,79,[[[T]],[T]]],[11,R[12],E,E,79,[[[U]],[R[16]]]],[11,R[13],E,E,79,[[["self"]],[R[16]]]],[11,"into",E,E,79,[[["self"]],[U]]],[11,R[18],E,E,79,[[["self"]],[T]]],[11,R[14],E,E,79,[[["self"]],[T]]],[11,R[17],E,E,79,[[["self"]],[R[19]]]],[11,"from",R[641],E,80,[[[T]],[T]]],[11,R[12],E,E,80,[[[U]],[R[16]]]],[11,R[13],E,E,80,[[["self"]],[R[16]]]],[11,"into",E,E,80,[[["self"]],[U]]],[11,R[18],E,E,80,[[["self"]],[T]]],[11,R[14],E,E,80,[[["self"]],[T]]],[11,R[17],E,E,80,[[["self"]],[R[19]]]],[11,"from",E,E,81,[[[T]],[T]]],[11,R[12],E,E,81,[[[U]],[R[16]]]],[11,R[13],E,E,81,[[["self"]],[R[16]]]],[11,"into",E,E,81,[[["self"]],[U]]],[11,R[18],E,E,81,[[["self"]],[T]]],[11,R[14],E,E,81,[[["self"]],[T]]],[11,R[17],E,E,81,[[["self"]],[R[19]]]],[11,"from",E,E,82,[[[T]],[T]]],[11,R[12],E,E,82,[[[U]],[R[16]]]],[11,R[13],E,E,82,[[["self"]],[R[16]]]],[11,"into",E,E,82,[[["self"]],[U]]],[11,R[18],E,E,82,[[["self"]],[T]]],[11,R[14],E,E,82,[[["self"]],[T]]],[11,R[17],E,E,82,[[["self"]],[R[19]]]],[11,"from",E,E,83,[[[T]],[T]]],[11,R[12],E,E,83,[[[U]],[R[16]]]],[11,R[13],E,E,83,[[["self"]],[R[16]]]],[11,"into",E,E,83,[[["self"]],[U]]],[11,R[18],E,E,83,[[["self"]],[T]]],[11,R[14],E,E,83,[[["self"]],[T]]],[11,R[17],E,E,83,[[["self"]],[R[19]]]],[11,"from",E,E,84,[[[T]],[T]]],[11,R[12],E,E,84,[[[U]],[R[16]]]],[11,R[13],E,E,84,[[["self"]],[R[16]]]],[11,"into",E,E,84,[[["self"]],[U]]],[11,R[18],E,E,84,[[["self"]],[T]]],[11,R[14],E,E,84,[[["self"]],[T]]],[11,R[17],E,E,84,[[["self"]],[R[19]]]],[11,"from",E,E,85,[[[T]],[T]]],[11,R[12],E,E,85,[[[U]],[R[16]]]],[11,R[13],E,E,85,[[["self"]],[R[16]]]],[11,"into",E,E,85,[[["self"]],[U]]],[11,R[18],E,E,85,[[["self"]],[T]]],[11,R[14],E,E,85,[[["self"]],[T]]],[11,R[17],E,E,85,[[["self"]],[R[19]]]],[11,"from",E,E,86,[[[T]],[T]]],[11,R[12],E,E,86,[[[U]],[R[16]]]],[11,R[13],E,E,86,[[["self"]],[R[16]]]],[11,"into",E,E,86,[[["self"]],[U]]],[11,R[18],E,E,86,[[["self"]],[T]]],[11,R[14],E,E,86,[[["self"]],[T]]],[11,R[17],E,E,86,[[["self"]],[R[19]]]],[11,"from",E,E,87,[[[T]],[T]]],[11,R[12],E,E,87,[[[U]],[R[16]]]],[11,R[13],E,E,87,[[["self"]],[R[16]]]],[11,"into",E,E,87,[[["self"]],[U]]],[11,R[18],E,E,87,[[["self"]],[T]]],[11,R[14],E,E,87,[[["self"]],[T]]],[11,R[17],E,E,87,[[["self"]],[R[19]]]],[11,"from",R[599],E,89,[[[T]],[T]]],[11,R[12],E,E,89,[[[U]],[R[16]]]],[11,R[13],E,E,89,[[["self"]],[R[16]]]],[11,"into",E,E,89,[[["self"]],[U]]],[11,R[18],E,E,89,[[["self"]],[T]]],[11,R[14],E,E,89,[[["self"]],[T]]],[11,R[17],E,E,89,[[["self"]],[R[19]]]],[11,"from",E,E,90,[[[T]],[T]]],[11,R[12],E,E,90,[[[U]],[R[16]]]],[11,R[13],E,E,90,[[["self"]],[R[16]]]],[11,"into",E,E,90,[[["self"]],[U]]],[11,R[18],E,E,90,[[["self"]],[T]]],[11,R[14],E,E,90,[[["self"]],[T]]],[11,R[17],E,E,90,[[["self"]],[R[19]]]],[11,"from",E,E,91,[[[T]],[T]]],[11,R[12],E,E,91,[[[U]],[R[16]]]],[11,R[13],E,E,91,[[["self"]],[R[16]]]],[11,"into",E,E,91,[[["self"]],[U]]],[11,R[18],E,E,91,[[["self"]],[T]]],[11,R[14],E,E,91,[[["self"]],[T]]],[11,R[17],E,E,91,[[["self"]],[R[19]]]],[11,"from",E,E,92,[[[T]],[T]]],[11,R[12],E,E,92,[[[U]],[R[16]]]],[11,R[13],E,E,92,[[["self"]],[R[16]]]],[11,"into",E,E,92,[[["self"]],[U]]],[11,R[18],E,E,92,[[["self"]],[T]]],[11,R[14],E,E,92,[[["self"]],[T]]],[11,R[17],E,E,92,[[["self"]],[R[19]]]],[11,"from",E,E,93,[[[T]],[T]]],[11,R[12],E,E,93,[[[U]],[R[16]]]],[11,R[13],E,E,93,[[["self"]],[R[16]]]],[11,"into",E,E,93,[[["self"]],[U]]],[11,R[18],E,E,93,[[["self"]],[T]]],[11,R[14],E,E,93,[[["self"]],[T]]],[11,R[17],E,E,93,[[["self"]],[R[19]]]],[11,"from",E,E,94,[[[T]],[T]]],[11,R[12],E,E,94,[[[U]],[R[16]]]],[11,R[13],E,E,94,[[["self"]],[R[16]]]],[11,"into",E,E,94,[[["self"]],[U]]],[11,R[18],E,E,94,[[["self"]],[T]]],[11,R[14],E,E,94,[[["self"]],[T]]],[11,R[17],E,E,94,[[["self"]],[R[19]]]],[11,"from",E,E,95,[[[T]],[T]]],[11,R[12],E,E,95,[[[U]],[R[16]]]],[11,R[13],E,E,95,[[["self"]],[R[16]]]],[11,"into",E,E,95,[[["self"]],[U]]],[11,R[18],E,E,95,[[["self"]],[T]]],[11,R[14],E,E,95,[[["self"]],[T]]],[11,R[17],E,E,95,[[["self"]],[R[19]]]],[11,R[268],E,E,95,[[["self"]],[T]]],[11,R[266],E,E,95,N],[11,"from",R[642],E,96,[[[T]],[T]]],[11,R[12],E,E,96,[[[U]],[R[16]]]],[11,R[13],E,E,96,[[["self"]],[R[16]]]],[11,"into",E,E,96,[[["self"]],[U]]],[11,R[18],E,E,96,[[["self"]],[T]]],[11,R[14],E,E,96,[[["self"]],[T]]],[11,R[17],E,E,96,[[["self"]],[R[19]]]],[11,"from",R[643],E,97,[[[T]],[T]]],[11,R[12],E,E,97,[[[U]],[R[16]]]],[11,R[13],E,E,97,[[["self"]],[R[16]]]],[11,"into",E,E,97,[[["self"]],[U]]],[11,R[18],E,E,97,[[["self"]],[T]]],[11,R[14],E,E,97,[[["self"]],[T]]],[11,R[17],E,E,97,[[["self"]],[R[19]]]],[11,R[268],E,E,97,[[["self"]],[T]]],[11,R[266],E,E,97,N],[11,R[273],E,E,97,[[["self"]],["string"]]],[11,"from",E,E,98,[[[T]],[T]]],[11,R[12],E,E,98,[[[U]],[R[16]]]],[11,R[13],E,E,98,[[["self"]],[R[16]]]],[11,"into",E,E,98,[[["self"]],[U]]],[11,R[18],E,E,98,[[["self"]],[T]]],[11,R[14],E,E,98,[[["self"]],[T]]],[11,R[17],E,E,98,[[["self"]],[R[19]]]],[11,R[268],E,E,98,[[["self"]],[T]]],[11,R[266],E,E,98,N],[11,R[273],E,E,98,[[["self"]],["string"]]],[11,"from",E,E,99,[[[T]],[T]]],[11,R[12],E,E,99,[[[U]],[R[16]]]],[11,R[13],E,E,99,[[["self"]],[R[16]]]],[11,"into",E,E,99,[[["self"]],[U]]],[11,R[18],E,E,99,[[["self"]],[T]]],[11,R[14],E,E,99,[[["self"]],[T]]],[11,R[17],E,E,99,[[["self"]],[R[19]]]],[11,R[268],E,E,99,[[["self"]],[T]]],[11,R[266],E,E,99,N],[11,"from",E,E,100,[[[T]],[T]]],[11,R[12],E,E,100,[[[U]],[R[16]]]],[11,R[13],E,E,100,[[["self"]],[R[16]]]],[11,"into",E,E,100,[[["self"]],[U]]],[11,R[18],E,E,100,[[["self"]],[T]]],[11,R[14],E,E,100,[[["self"]],[T]]],[11,R[17],E,E,100,[[["self"]],[R[19]]]],[11,R[268],E,E,100,[[["self"]],[T]]],[11,R[266],E,E,100,N],[11,"from",E,E,101,[[[T]],[T]]],[11,R[12],E,E,101,[[[U]],[R[16]]]],[11,R[13],E,E,101,[[["self"]],[R[16]]]],[11,"into",E,E,101,[[["self"]],[U]]],[11,R[18],E,E,101,[[["self"]],[T]]],[11,R[14],E,E,101,[[["self"]],[T]]],[11,R[17],E,E,101,[[["self"]],[R[19]]]],[11,"from",R[608],E,102,[[[T]],[T]]],[11,R[12],E,E,102,[[[U]],[R[16]]]],[11,R[13],E,E,102,[[["self"]],[R[16]]]],[11,"into",E,E,102,[[["self"]],[U]]],[11,R[18],E,E,102,[[["self"]],[T]]],[11,R[14],E,E,102,[[["self"]],[T]]],[11,R[17],E,E,102,[[["self"]],[R[19]]]],[11,"from",R[644],E,103,[[[T]],[T]]],[11,R[12],E,E,103,[[[U]],[R[16]]]],[11,R[13],E,E,103,[[["self"]],[R[16]]]],[11,"into",E,E,103,[[["self"]],[U]]],[11,R[18],E,E,103,[[["self"]],[T]]],[11,R[14],E,E,103,[[["self"]],[T]]],[11,R[17],E,E,103,[[["self"]],[R[19]]]],[11,"from",E,E,104,[[[T]],[T]]],[11,R[12],E,E,104,[[[U]],[R[16]]]],[11,R[13],E,E,104,[[["self"]],[R[16]]]],[11,"into",E,E,104,[[["self"]],[U]]],[11,R[18],E,E,104,[[["self"]],[T]]],[11,R[14],E,E,104,[[["self"]],[T]]],[11,R[17],E,E,104,[[["self"]],[R[19]]]],[11,"from",E,E,105,[[[T]],[T]]],[11,R[12],E,E,105,[[[U]],[R[16]]]],[11,R[13],E,E,105,[[["self"]],[R[16]]]],[11,"into",E,E,105,[[["self"]],[U]]],[11,R[18],E,E,105,[[["self"]],[T]]],[11,R[14],E,E,105,[[["self"]],[T]]],[11,R[17],E,E,105,[[["self"]],[R[19]]]],[11,R[268],E,E,105,[[["self"]],[T]]],[11,R[266],E,E,105,N],[11,"from",E,E,106,[[[T]],[T]]],[11,R[12],E,E,106,[[[U]],[R[16]]]],[11,R[13],E,E,106,[[["self"]],[R[16]]]],[11,"into",E,E,106,[[["self"]],[U]]],[11,R[18],E,E,106,[[["self"]],[T]]],[11,R[14],E,E,106,[[["self"]],[T]]],[11,R[17],E,E,106,[[["self"]],[R[19]]]],[11,R[268],E,E,106,[[["self"]],[T]]],[11,R[266],E,E,106,N],[11,"from",E,E,107,[[[T]],[T]]],[11,R[12],E,E,107,[[[U]],[R[16]]]],[11,R[13],E,E,107,[[["self"]],[R[16]]]],[11,"into",E,E,107,[[["self"]],[U]]],[11,R[18],E,E,107,[[["self"]],[T]]],[11,R[14],E,E,107,[[["self"]],[T]]],[11,R[17],E,E,107,[[["self"]],[R[19]]]],[11,"bit",E,E,107,[[["self"],[R[9]]],["bool"]]],[11,"set_bit",E,E,107,N],[11,"from",E,E,108,[[[T]],[T]]],[11,R[12],E,E,108,[[[U]],[R[16]]]],[11,R[13],E,E,108,[[["self"]],[R[16]]]],[11,"into",E,E,108,[[["self"]],[U]]],[11,R[18],E,E,108,[[["self"]],[T]]],[11,R[14],E,E,108,[[["self"]],[T]]],[11,R[17],E,E,108,[[["self"]],[R[19]]]],[11,"bit",E,E,108,[[["self"],[R[9]]],["bool"]]],[11,"set_bit",E,E,108,N],[11,"from",E,E,109,[[[T]],[T]]],[11,R[12],E,E,109,[[[U]],[R[16]]]],[11,R[13],E,E,109,[[["self"]],[R[16]]]],[11,"into",E,E,109,[[["self"]],[U]]],[11,R[18],E,E,109,[[["self"]],[T]]],[11,R[14],E,E,109,[[["self"]],[T]]],[11,R[17],E,E,109,[[["self"]],[R[19]]]],[11,"from",R[645],E,110,[[[T]],[T]]],[11,R[12],E,E,110,[[[U]],[R[16]]]],[11,R[13],E,E,110,[[["self"]],[R[16]]]],[11,"into",E,E,110,[[["self"]],[U]]],[11,R[18],E,E,110,[[["self"]],[T]]],[11,R[14],E,E,110,[[["self"]],[T]]],[11,R[17],E,E,110,[[["self"]],[R[19]]]],[11,"from",E,E,111,[[[T]],[T]]],[11,R[12],E,E,111,[[[U]],[R[16]]]],[11,R[13],E,E,111,[[["self"]],[R[16]]]],[11,"into",E,E,111,[[["self"]],[U]]],[11,R[18],E,E,111,[[["self"]],[T]]],[11,R[14],E,E,111,[[["self"]],[T]]],[11,R[17],E,E,111,[[["self"]],[R[19]]]],[11,R[268],E,E,111,[[["self"]],[T]]],[11,R[266],E,E,111,N],[11,"from",E,E,112,[[[T]],[T]]],[11,R[12],E,E,112,[[[U]],[R[16]]]],[11,R[13],E,E,112,[[["self"]],[R[16]]]],[11,"into",E,E,112,[[["self"]],[U]]],[11,R[18],E,E,112,[[["self"]],[T]]],[11,R[14],E,E,112,[[["self"]],[T]]],[11,R[17],E,E,112,[[["self"]],[R[19]]]],[11,R[268],E,E,112,[[["self"]],[T]]],[11,R[266],E,E,112,N],[11,"from",E,E,113,[[[T]],[T]]],[11,R[12],E,E,113,[[[U]],[R[16]]]],[11,R[13],E,E,113,[[["self"]],[R[16]]]],[11,"into",E,E,113,[[["self"]],[U]]],[11,R[18],E,E,113,[[["self"]],[T]]],[11,R[14],E,E,113,[[["self"]],[T]]],[11,R[17],E,E,113,[[["self"]],[R[19]]]],[11,"from",R[646],E,114,[[[T]],[T]]],[11,R[12],E,E,114,[[[U]],[R[16]]]],[11,R[13],E,E,114,[[["self"]],[R[16]]]],[11,"into",E,E,114,[[["self"]],[U]]],[11,R[18],E,E,114,[[["self"]],[T]]],[11,R[14],E,E,114,[[["self"]],[T]]],[11,R[17],E,E,114,[[["self"]],[R[19]]]],[11,"from",R[632],E,116,[[[T]],[T]]],[11,R[12],E,E,116,[[[U]],[R[16]]]],[11,R[13],E,E,116,[[["self"]],[R[16]]]],[11,"into",E,E,116,[[["self"]],[U]]],[11,R[18],E,E,116,[[["self"]],[T]]],[11,R[14],E,E,116,[[["self"]],[T]]],[11,R[17],E,E,116,[[["self"]],[R[19]]]],[11,"from",E,E,117,[[[T]],[T]]],[11,R[12],E,E,117,[[[U]],[R[16]]]],[11,R[13],E,E,117,[[["self"]],[R[16]]]],[11,"into",E,E,117,[[["self"]],[U]]],[11,R[18],E,E,117,[[["self"]],[T]]],[11,R[14],E,E,117,[[["self"]],[T]]],[11,R[17],E,E,117,[[["self"]],[R[19]]]],[11,"from",R[617],E,119,[[[T]],[T]]],[11,R[12],E,E,119,[[[U]],[R[16]]]],[11,R[13],E,E,119,[[["self"]],[R[16]]]],[11,"into",E,E,119,[[["self"]],[U]]],[11,R[18],E,E,119,[[["self"]],[T]]],[11,R[14],E,E,119,[[["self"]],[T]]],[11,R[17],E,E,119,[[["self"]],[R[19]]]],[11,"from",E,E,120,[[[T]],[T]]],[11,R[12],E,E,120,[[[U]],[R[16]]]],[11,R[13],E,E,120,[[["self"]],[R[16]]]],[11,"into",E,E,120,[[["self"]],[U]]],[11,R[18],E,E,120,[[["self"]],[T]]],[11,R[14],E,E,120,[[["self"]],[T]]],[11,R[17],E,E,120,[[["self"]],[R[19]]]],[11,"drop",R[641],E,82,N],[11,"drop",E,"The dropping of the MutexGuard will release the lock it…",85,N],[11,"drop",E,E,83,N],[11,"deref",E,E,83,[[["self"]],[T]]],[11,"deref",E,E,82,[[["self"]],[T]]],[11,"deref",E,E,85,[[["self"]],[T]]],[11,"fmt",E,E,84,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,82,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,81,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,85,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,83,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,80,[[["self"],[R[20]]],[R[16],["error"]]]],[11,R[211],E,E,85,[[["self"]],[T]]],[11,R[211],E,E,83,[[["self"]],[T]]],[11,R[77],E,E,84,[[],["mutex"]]],[11,R[77],E,E,81,[[],["rwlock"]]],[11,"fmt",R[536],E,29,[[["self"],[R[20]]],[R[16],["error"]]]],[11,R[60],E,E,29,N],[11,"clone",E,E,29,[[["self"]],[R[25]]]],[11,"fmt",E,E,29,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"eq",E,E,29,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,29,[[["self"],[R[25]]],["bool"]]],[11,"clone",R[632],E,56,[[["self"]],["pio"]]],[11,"fmt",R[617],E,120,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[632],E,116,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[617],E,119,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[632],E,117,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,56,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"read",E,"Read",56,[[["self"]],["u8"]]],[11,"write",E,"Write",56,N],[11,"read",E,"Read",56,[[["self"]],["u16"]]],[11,"write",E,"Write",56,N],[11,"read",E,"Read",56,[[["self"]],["u32"]]],[11,"write",E,"Write",56,N],[11,R[128],R[622],R[129],18,[[["self"]],["bool"]]],[11,R[130],E,R[131],18,[[["self"]],[R[106],[R[98]]]]],[11,R[942],E,R[132],18,[[["self"]],["bool"]]],[11,"flags",E,R[133],18,[[["self"]],[R[144]]]],[11,R[134],E,R[135],18,[[["self"]],[R[106],[R[98]]]]],[11,"set",E,R[136],18,[[["self"],[R[98]],[R[144]]]]],[11,R[137],E,R[138],18,[[["self"]]]],[11,R[198],R[623],E,20,N],[11,R[647],E,E,20,[[],[R[9]]]],[11,R[648],E,R[650],20,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[649],E,R[650],20,[[["self"],[R[9]]],[R[147]]]],[11,R[198],E,E,21,N],[11,R[647],E,E,21,[[],[R[9]]]],[11,R[648],E,"Gets a child [ActivePageTable] through recursive mapping.",21,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[649],E,"Creates a child [ActivePageTable], maps it at the given…",21,[[["self"],[R[9]]],[R[147],["activepagetable"]]]],[11,R[198],E,E,22,N],[11,R[647],E,E,22,[[],[R[9]]]],[11,R[648],E,R[650],22,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[649],E,R[650],22,[[["self"],[R[9]]],[R[147]]]],[11,R[198],E,E,23,N],[11,R[647],E,E,23,[[],[R[9]]]],[11,R[648],E,"Gets the child [InactivePageTable] at the given index.…",23,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[649],E,"Creates a child [InactivePageTable] at the given index,…",23,[[["self"],[R[9]]],[R[147],["inactivepagetable"]]]],[11,R[651],R[520],E,125,[[]]],[11,R[651],R[623],E,127,[[]]],[11,R[652],R[526],E,4,[[["self"]],[R[147]]]],[11,R[653],E,E,4,[[["self"],["i"],[R[101]],[R[498]]]]],[11,"guard",E,E,4,[[["self"],[R[101]],[R[9]]]]],[11,"unmap",E,E,4,[[["self"],[R[101]],[R[9]],["c"]]]],[11,R[654],E,E,4,[[["self"],[R[101]],[R[9]],["c"]]]],[11,R[149],E,E,4,[[["self"],[R[9]],[R[101]],[R[101]],[R[9]]],[R[83],[R[101]]]]],[11,R[652],R[623],"Gets the [ActivePageDirectory] through recursive mapping.",126,[[["self"]],[R[147],[R[992]]]]],[11,R[652],E,"Gets the [InactivePageDirectory] by temporarily mapping it.",24,[[["self"]],[R[147],[R[993]]]]],[11,"new",E,E,24,[[],["self"]]],[11,R[519],E,E,24,[[["self"]]]],[11,R[655],E,E,24,[[["self"]]]],[11,R[656],E,E,24,[[["self"]],["bool"]]],[11,R[657],E,E,24,[[],["self"]]],[11,R[658],R[624],E,26,[[["self"]],["bool"]]],[11,R[659],E,E,26,[[["self"]]]],[11,R[659],R[639],E,75,[[["self"]]]],[11,R[658],E,E,75,[[["self"]],["bool"]]],[11,R[658],R[644],E,106,[[["self"]],["bool"]]],[11,R[659],E,E,106,[[["self"]]]],[11,R[658],R[645],E,112,[[["self"]],["bool"]]],[11,R[659],E,E,112,[[["self"]]]],[11,R[660],R[573],"Allocates a single [PhysicalMemRegion]. Frames are…",128,[[[R[9]]],[R[16],[R[501],R[25]]]]],[11,R[661],E,R[662],128,[[[R[9]]],[R[16],["vec",R[25]]]]],[11,R[663],E,"Frees an allocated physical region.",128,[[[R[501]]]]],[11,R[664],E,"Checks that a physical region is marked allocated.",128,[[[R[98]],[R[9]]],["bool"]]],[11,R[665],E,"Checks that a physical region is marked reserved. This…",128,[[[R[98]],[R[9]]],["bool"]]],[11,"lock",R[641],E,84,[[["self"]],["spinlockguard"]]],[11,"lock",E,E,86,[[["self"]],[R[589]]]],[11,"lock",E,E,81,[[["self"]],[R[701]]]],[11,"lock",E,E,81,[[["self"]],[R[702]]]],[11,R[666],R[620],"Splits a mapping at a given offset.",7,[[["self"],[R[9]]],[R[16],[R[83],R[25]]]]],[11,R[666],R[635],"Splits the given PhysicalMemRegion in two parts, at the…",60,[[["self"],[R[9]]],[R[16],[R[83],R[25]]]]],[11,R[205],R[622],E,17,[[["self"]],["bool"]]],[11,R[57],E,E,17,[[["self"]],["bool"]]],[11,R[122],E,E,17,[[["self"]],["bool"]]],[11,R[123],E,E,17,[[["self"]],["bool"]]],[11,R[203],E,E,17,[[["self"]],["bool"]]],[11,R[204],E,E,17,[[["self"]],["bool"]]],[11,"DIRTY",E,E,17,[[["self"]],["bool"]]],[11,R[124],E,E,17,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,17,[[["self"]],["bool"]]],[11,R[125],E,E,17,[[["self"]],["bool"]]],[11,R[667],E,E,17,[[["self"]],["bool"]]],[11,R[127],E,E,17,[[["self"]],["bool"]]],[11,R[205],E,E,17,[[],["u32"]]],[11,R[57],E,E,17,[[],["u32"]]],[11,R[122],E,E,17,[[],["u32"]]],[11,R[123],E,E,17,[[],["u32"]]],[11,R[203],E,E,17,[[],["u32"]]],[11,R[204],E,E,17,[[],["u32"]]],[11,"DIRTY",E,E,17,[[],["u32"]]],[11,R[124],E,E,17,[[],["u32"]]],[11,"GLOBAL",E,E,17,[[],["u32"]]],[11,R[125],E,E,17,[[],["u32"]]],[11,R[667],E,E,17,[[],["u32"]]],[11,R[127],E,E,17,[[],["u32"]]],[11,R[56],R[499],E,0,[[["self"]],["bool"]]],[11,R[57],E,E,0,[[["self"]],["bool"]]],[11,R[58],E,E,0,[[["self"]],["bool"]]],[11,R[122],E,E,0,[[["self"]],["bool"]]],[11,R[56],E,E,0,[[],["u32"]]],[11,R[57],E,E,0,[[],["u32"]]],[11,R[58],E,E,0,[[],["u32"]]],[11,R[122],E,E,0,[[],["u32"]]],[11,"ID",R[626],E,40,[[["self"]],["bool"]]],[11,R[668],E,E,40,[[["self"]],["bool"]]],[11,R[669],E,E,40,[[["self"]],["bool"]]],[11,R[670],E,E,40,[[["self"]],["bool"]]],[11,R[671],E,E,40,[[["self"]],["bool"]]],[11,R[672],E,E,40,[[["self"]],["bool"]]],[11,R[673],E,E,40,[[["self"]],["bool"]]],[11,R[674],E,E,40,[[["self"]],["bool"]]],[11,R[684],E,E,40,[[["self"]],["bool"]]],[11,R[675],E,E,40,[[["self"]],["bool"]]],[11,R[676],E,E,40,[[["self"]],["bool"]]],[11,R[677],E,E,40,[[["self"]],["bool"]]],[11,R[678],E,E,40,[[["self"]],["bool"]]],[11,R[679],E,E,40,[[["self"]],["bool"]]],[11,R[680],E,E,40,[[["self"]],["bool"]]],[11,R[681],E,E,40,[[["self"]],["bool"]]],[11,R[682],E,E,40,[[["self"]],["bool"]]],[11,R[683],E,E,40,[[["self"]],["bool"]]],[11,"ID",E,E,40,[[],["u32"]]],[11,R[668],E,E,40,[[],["u32"]]],[11,R[669],E,E,40,[[],["u32"]]],[11,R[670],E,E,40,[[],["u32"]]],[11,R[671],E,E,40,[[],["u32"]]],[11,R[672],E,E,40,[[],["u32"]]],[11,R[673],E,E,40,[[],["u32"]]],[11,R[674],E,E,40,[[],["u32"]]],[11,R[684],E,E,40,[[],["u32"]]],[11,R[675],E,E,40,[[],["u32"]]],[11,R[676],E,E,40,[[],["u32"]]],[11,R[677],E,E,40,[[],["u32"]]],[11,R[678],E,E,40,[[],["u32"]]],[11,R[679],E,E,40,[[],["u32"]]],[11,R[680],E,E,40,[[],["u32"]]],[11,R[681],E,E,40,[[],["u32"]]],[11,R[682],E,E,40,[[],["u32"]]],[11,R[683],E,E,40,[[],["u32"]]],[11,R[685],R[629],E,48,[[["self"]],["bool"]]],[11,R[686],E,E,48,[[["self"]],["bool"]]],[11,R[687],E,E,48,[[["self"]],["bool"]]],[11,R[688],E,E,48,[[["self"]],["bool"]]],[11,R[689],E,E,48,[[["self"]],["bool"]]],[11,R[685],E,E,48,[[],["u32"]]],[11,R[686],E,E,48,[[],["u32"]]],[11,R[687],E,E,48,[[],["u32"]]],[11,R[688],E,E,48,[[],["u32"]]],[11,R[689],E,E,48,[[],["u32"]]],[11,R[690],R[639],E,72,[[["self"]],["bool"]]],[11,R[691],E,E,72,[[["self"]],["bool"]]],[11,"GATE_2",E,E,72,[[["self"]],["bool"]]],[11,R[692],E,E,72,[[["self"]],["bool"]]],[11,"OTHER_2",E,E,72,[[["self"]],["bool"]]],[11,"OTHER_3",E,E,72,[[["self"]],["bool"]]],[11,"OTHER_6",E,E,72,[[["self"]],["bool"]]],[11,"OTHER_7",E,E,72,[[["self"]],["bool"]]],[11,R[690],E,E,72,[[],["u8"]]],[11,R[691],E,E,72,[[],["u8"]]],[11,"GATE_2",E,E,72,[[],["u8"]]],[11,R[692],E,E,72,[[],["u8"]]],[11,"OTHER_2",E,E,72,[[],["u8"]]],[11,"OTHER_3",E,E,72,[[],["u8"]]],[11,"OTHER_6",E,E,72,[[],["u8"]]],[11,"OTHER_7",E,E,72,[[],["u8"]]],[11,"ICW4",R[640],E,77,[[["self"]],["bool"]]],[11,"SINGLE",E,E,77,[[["self"]],["bool"]]],[11,R[693],E,E,77,[[["self"]],["bool"]]],[11,"LEVEL",E,E,77,[[["self"]],["bool"]]],[11,"INIT",E,E,77,[[["self"]],["bool"]]],[11,"ICW4",E,E,77,[[],["u8"]]],[11,"SINGLE",E,E,77,[[],["u8"]]],[11,R[693],E,E,77,[[],["u8"]]],[11,"LEVEL",E,E,77,[[],["u8"]]],[11,"INIT",E,E,77,[[],["u8"]]],[11,"fmt",R[511],E,10,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[536],E,30,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,31,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[625],E,36,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[638],E,67,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[643],E,97,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,98,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[526],E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[618],E,5,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[619],E,122,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,123,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,124,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[620],E,7,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,8,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[621],E,9,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[511],E,10,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[622],E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,18,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[623],E,19,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,21,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,126,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,22,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,23,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,24,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[527],E,25,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[526],E,3,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[624],E,26,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,27,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[536],E,30,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,31,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[625],E,36,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[540],E,35,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,33,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,34,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[626],E,40,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[627],E,41,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,42,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[628],E,43,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[629],E,44,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,45,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,49,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,46,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,47,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,48,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[630],E,50,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[631],E,53,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,55,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,54,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[633],E,57,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[545],E,39,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,37,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,38,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[634],E,59,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[635],E,61,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,60,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[573],E,128,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[638],E,66,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,69,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,67,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,70,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[639],E,76,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,72,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,75,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[640],E,77,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,78,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,79,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[641],E,86,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,87,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[642],E,96,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[599],E,89,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,90,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,91,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,94,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,92,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,95,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,93,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[643],E,97,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,98,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,99,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,100,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,101,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[644],E,103,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,104,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,105,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,106,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,107,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,108,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,109,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[645],E,110,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,111,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,112,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,113,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[646],E,114,[[["self"],[R[20]]],[R[16]]]],[11,"eq",R[622],E,17,[[["self"],[R[144]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[144]]],["bool"]]],[11,"eq",R[499],E,0,[[["self"],[R[498]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[498]]],["bool"]]],[11,"eq",R[626],E,40,[[["self"],["eflags"]],["bool"]]],[11,"ne",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"eq",R[629],E,49,[[["self"],[R[694]]],["bool"]]],[11,"eq",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,"ne",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,"eq",R[545],E,39,[[["self"],[R[86]]],["bool"]]],[11,"eq",R[639],E,72,[[["self"],[R[582]]],["bool"]]],[11,"ne",E,E,72,[[["self"],[R[582]]],["bool"]]],[11,"eq",R[640],E,77,[[["self"],["icw1"]],["bool"]]],[11,"ne",E,E,77,[[["self"],["icw1"]],["bool"]]],[11,"eq",R[599],E,95,[[["self"],[R[600]]],["bool"]]],[11,"eq",R[643],E,97,[[["self"],[R[98]]],["bool"]]],[11,"ne",E,E,97,[[["self"],[R[98]]],["bool"]]],[11,"eq",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,"ne",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,R[60],R[622],E,17,N],[11,R[60],R[499],E,0,N],[11,R[60],R[626],E,40,N],[11,R[60],R[629],E,49,N],[11,R[60],E,E,48,N],[11,R[60],R[545],E,39,N],[11,R[60],R[639],E,72,N],[11,R[60],R[640],E,77,N],[11,R[60],R[599],E,95,N],[11,R[60],R[643],E,97,N],[11,R[60],E,E,98,N],[11,"cmp",R[622],E,17,[[["self"],[R[144]]],[R[61]]]],[11,"cmp",R[499],E,0,[[["self"],[R[498]]],[R[61]]]],[11,"cmp",R[626],E,40,[[["self"],["eflags"]],[R[61]]]],[11,"cmp",R[629],E,48,[[["self"],[R[557]]],[R[61]]]],[11,"cmp",R[639],E,72,[[["self"],[R[582]]],[R[61]]]],[11,"cmp",R[640],E,77,[[["self"],["icw1"]],[R[61]]]],[11,"cmp",R[643],E,97,[[["self"],[R[98]]],[R[61]]]],[11,"cmp",E,E,98,[[["self"],[R[101]]],[R[61]]]],[11,R[62],R[622],E,17,[[["self"],[R[144]]],[R[83],[R[61]]]]],[11,"lt",E,E,17,[[["self"],[R[144]]],["bool"]]],[11,"le",E,E,17,[[["self"],[R[144]]],["bool"]]],[11,"gt",E,E,17,[[["self"],[R[144]]],["bool"]]],[11,"ge",E,E,17,[[["self"],[R[144]]],["bool"]]],[11,R[62],R[499],E,0,[[["self"],[R[498]]],[R[83],[R[61]]]]],[11,"lt",E,E,0,[[["self"],[R[498]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[498]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[498]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[498]]],["bool"]]],[11,R[62],R[626],E,40,[[["self"],["eflags"]],[R[83],[R[61]]]]],[11,"lt",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"le",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"gt",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,"ge",E,E,40,[[["self"],["eflags"]],["bool"]]],[11,R[62],R[629],E,48,[[["self"],[R[557]]],[R[83],[R[61]]]]],[11,"lt",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,"le",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,"gt",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,"ge",E,E,48,[[["self"],[R[557]]],["bool"]]],[11,R[62],R[639],E,72,[[["self"],[R[582]]],[R[83],[R[61]]]]],[11,"lt",E,E,72,[[["self"],[R[582]]],["bool"]]],[11,"le",E,E,72,[[["self"],[R[582]]],["bool"]]],[11,"gt",E,E,72,[[["self"],[R[582]]],["bool"]]],[11,"ge",E,E,72,[[["self"],[R[582]]],["bool"]]],[11,R[62],R[640],E,77,[[["self"],["icw1"]],[R[83],[R[61]]]]],[11,"lt",E,E,77,[[["self"],["icw1"]],["bool"]]],[11,"le",E,E,77,[[["self"],["icw1"]],["bool"]]],[11,"gt",E,E,77,[[["self"],["icw1"]],["bool"]]],[11,"ge",E,E,77,[[["self"],["icw1"]],["bool"]]],[11,R[62],R[643],E,97,[[["self"],[R[98]]],[R[83],[R[61]]]]],[11,"lt",E,E,97,[[["self"],[R[98]]],["bool"]]],[11,"le",E,E,97,[[["self"],[R[98]]],["bool"]]],[11,"gt",E,E,97,[[["self"],[R[98]]],["bool"]]],[11,"ge",E,E,97,[[["self"],[R[98]]],["bool"]]],[11,R[62],E,E,98,[[["self"],[R[101]]],[R[83],[R[61]]]]],[11,"lt",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,"le",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,"gt",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,"ge",E,E,98,[[["self"],[R[101]]],["bool"]]],[11,"hash",R[622],E,17,N],[11,"hash",R[499],E,0,N],[11,"hash",R[626],E,40,N],[11,"hash",R[629],E,48,N],[11,"hash",R[639],E,72,N],[11,"hash",R[640],E,77,N],[11,"hash",R[643],E,97,N],[11,"hash",E,E,98,N],[11,"add",E,R[206],98,[[["self"],[R[9]]],[R[101]]]],[11,"add",E,R[206],97,[[["self"],[R[9]]],[R[98]]]],[11,"sub",R[622],R[63],17,[[["self"],[R[144]]],[R[144]]]],[11,"sub",R[499],R[63],0,[[["self"],[R[498]]],[R[498]]]],[11,"sub",R[626],R[63],40,[[["self"],["eflags"]],["eflags"]]],[11,"sub",R[629],R[63],48,[[["self"],[R[557]]],[R[557]]]],[11,"sub",R[639],R[63],72,[[["self"],[R[582]]],[R[582]]]],[11,"sub",R[640],R[63],77,[[["self"],["icw1"]],["icw1"]]],[11,"sub",R[643],R[207],98,[[["self"],[R[9]]],[R[101]]]],[11,"sub",E,R[207],97,[[["self"],[R[9]]],[R[98]]]],[11,"sub",E,R[208],98,[[["self"],[R[101]]],[R[9]]]],[11,"sub",E,R[208],97,[[["self"],[R[98]]],[R[9]]]],[11,R[209],E,R[206],98,[[["self"],[R[9]]]]],[11,R[209],E,R[206],97,[[["self"],[R[9]]]]],[11,R[64],R[622],R[65],17,[[["self"],[R[144]]]]],[11,R[64],R[499],R[65],0,[[["self"],[R[498]]]]],[11,R[64],R[626],R[65],40,[[["self"],["eflags"]]]],[11,R[64],R[629],R[65],48,[[["self"],[R[557]]]]],[11,R[64],R[639],R[65],72,[[["self"],[R[582]]]]],[11,R[64],R[640],R[65],77,[[["self"],["icw1"]]]],[11,R[64],R[643],R[207],98,[[["self"],[R[9]]]]],[11,R[64],E,R[207],97,[[["self"],[R[9]]]]],[11,"not",R[622],R[66],17,[[["self"]],[R[144]]]],[11,"not",R[499],R[66],0,[[["self"]],[R[498]]]],[11,"not",R[626],R[66],40,[[["self"]],["eflags"]]],[11,"not",R[629],R[66],48,[[["self"]],[R[557]]]],[11,"not",R[639],R[66],72,[[["self"]],[R[582]]]],[11,"not",R[640],R[66],77,[[["self"]],["icw1"]]],[11,"bitand",R[622],R[67],17,[[["self"],[R[144]]],[R[144]]]],[11,"bitand",R[499],R[67],0,[[["self"],[R[498]]],[R[498]]]],[11,"bitand",R[626],R[67],40,[[["self"],["eflags"]],["eflags"]]],[11,"bitand",R[629],R[67],48,[[["self"],[R[557]]],[R[557]]]],[11,"bitand",R[639],R[67],72,[[["self"],[R[582]]],[R[582]]]],[11,"bitand",R[640],R[67],77,[[["self"],["icw1"]],["icw1"]]],[11,"bitor",R[622],R[68],17,[[["self"],[R[144]]],[R[144]]]],[11,"bitor",R[499],R[68],0,[[["self"],[R[498]]],[R[498]]]],[11,"bitor",R[626],R[68],40,[[["self"],["eflags"]],["eflags"]]],[11,"bitor",R[629],R[68],48,[[["self"],[R[557]]],[R[557]]]],[11,"bitor",R[639],R[68],72,[[["self"],[R[582]]],[R[582]]]],[11,"bitor",R[640],R[68],77,[[["self"],["icw1"]],["icw1"]]],[11,"bitxor",R[622],R[69],17,[[["self"],[R[144]]],[R[144]]]],[11,"bitxor",R[499],R[69],0,[[["self"],[R[498]]],[R[498]]]],[11,"bitxor",R[626],R[69],40,[[["self"],["eflags"]],["eflags"]]],[11,"bitxor",R[629],R[69],48,[[["self"],[R[557]]],[R[557]]]],[11,"bitxor",R[639],R[69],72,[[["self"],[R[582]]],[R[582]]]],[11,"bitxor",R[640],R[69],77,[[["self"],["icw1"]],["icw1"]]],[11,R[70],R[622],R[71],17,[[["self"],[R[144]]]]],[11,R[70],R[499],R[71],0,[[["self"],[R[498]]]]],[11,R[70],R[626],R[71],40,[[["self"],["eflags"]]]],[11,R[70],R[629],R[71],48,[[["self"],[R[557]]]]],[11,R[70],R[639],R[71],72,[[["self"],[R[582]]]]],[11,R[70],R[640],R[71],77,[[["self"],["icw1"]]]],[11,R[72],R[622],R[73],17,[[["self"],[R[144]]]]],[11,R[72],R[499],R[73],0,[[["self"],[R[498]]]]],[11,R[72],R[626],R[73],40,[[["self"],["eflags"]]]],[11,R[72],R[629],R[73],48,[[["self"],[R[557]]]]],[11,R[72],R[639],R[73],72,[[["self"],[R[582]]]]],[11,R[72],R[640],R[73],77,[[["self"],["icw1"]]]],[11,R[74],R[622],R[75],17,[[["self"],[R[144]]]]],[11,R[74],R[499],R[75],0,[[["self"],[R[498]]]]],[11,R[74],R[626],R[75],40,[[["self"],["eflags"]]]],[11,R[74],R[629],R[75],48,[[["self"],[R[557]]]]],[11,R[74],R[639],R[75],72,[[["self"],[R[582]]]]],[11,R[74],R[640],R[75],77,[[["self"],["icw1"]]]],[11,"deref",R[520],E,11,[[["self"]],[T]]],[11,"deref",R[631],E,51,[[["self"]],[R[96]]]],[11,"deref",E,E,52,[[["self"]],[R[101]]]],[11,"deref",R[545],E,38,[[["self"]],[R[210]]]],[11,"deref",R[564],E,58,[[["self"]],[R[695]]]],[11,"deref",R[637],E,65,[[["self"]],[R[695]]]],[11,"deref",R[639],E,71,[[["self"]],[R[695]]]],[11,"deref",R[641],E,87,[[["self"]],[T]]],[11,"deref",R[643],E,99,[[["self"]],[T]]],[11,"deref",E,E,100,[[["self"]],[T]]],[11,"deref",R[608],E,102,[[["self"]],["rwlock"]]],[11,R[211],R[520],E,11,[[["self"]],[T]]],[11,R[211],R[631],E,51,[[["self"]],[R[96]]]],[11,R[211],R[545],E,38,[[["self"]],[R[210]]]],[11,R[211],R[641],E,87,[[["self"]],[T]]],[11,R[211],R[643],E,100,[[["self"]],[T]]],[11,"drop",R[621],"Unmaps itself from KernelLand when dropped.",9,[[["self"]]]],[11,"drop",R[520],E,11,[[["self"]]]],[11,"drop",R[623],"When the temporary inactive directory is drop, we unmap it.",23,[[["self"]]]],[11,"drop",E,"When the temporary inactive table is drop, we unmap it.",22,[[["self"]]]],[11,"drop",R[627],"We deallocate the stack when it is dropped",41,[[["self"]]]],[11,"drop",R[635],"Dropping a `PhysicalMemRegion` may free its frames.",60,[[["self"]]]],[11,"drop",R[641],E,87,[[["self"]]]],[11,"drop",R[599],E,90,[[["self"]]]],[11,"drop",E,E,91,[[["self"]]]],[11,"drop",R[644],E,106,[[["self"]]]],[11,"drop",R[645],E,112,[[["self"]]]],[11,"drop",R[646],"Unmap the module, but do not deallocate physical memory",114,[[["self"]]]],[11,"index",R[629],E,44,N],[11,R[212],E,E,44,N],[11,"extend",R[622],E,17,[[["self"],[T]]]],[11,"extend",R[499],E,0,[[["self"],[T]]]],[11,"extend",R[626],E,40,[[["self"],[T]]]],[11,"extend",R[629],E,48,[[["self"],[T]]]],[11,"extend",R[639],E,72,[[["self"],[T]]]],[11,"extend",R[640],E,77,[[["self"],[T]]]],[11,R[76],R[622],E,17,[[[T]],[R[144]]]],[11,R[76],R[499],E,0,[[[T]],[R[498]]]],[11,R[76],R[626],E,40,[[[T]],["eflags"]]],[11,R[76],R[629],E,48,[[[T]],[R[557]]]],[11,R[76],R[639],E,72,[[[T]],[R[582]]]],[11,R[76],R[640],E,77,[[[T]],["icw1"]]],[11,R[696],R[643],E,97,[[["self"],["self"]],[R[83],[R[9]]]]],[11,R[697],E,E,97,[[["self"]],["self"]]],[11,R[698],E,E,97,[[["self"]],["self"]]],[11,"add_one",E,E,97,[[["self"]],["self"]]],[11,"sub_one",E,E,97,[[["self"]],["self"]]],[11,R[699],E,E,97,[[["self"],[R[9]]],[R[83]]]],[11,R[696],E,E,98,[[["self"],["self"]],[R[83],[R[9]]]]],[11,R[697],E,E,98,[[["self"]],["self"]]],[11,R[698],E,E,98,[[["self"]],["self"]]],[11,"add_one",E,E,98,[[["self"]],["self"]]],[11,"sub_one",E,E,98,[[["self"]],["self"]]],[11,R[699],E,E,98,[[["self"],[R[9]]],[R[83]]]],[11,"next",R[635],E,61,[[["self"]],[R[83],[R[98]]]]],[11,"from",R[536],E,29,[[["mmerror"]],["self"]]],[11,"from",R[622],E,17,[[[R[498]]],[R[144]]]],[11,"from",R[499],E,0,[[[R[34]]],["self"]]],[11,"from",R[536],E,29,[[[R[25]]],[R[565]]]],[11,"from",R[629],E,49,[[["u8"]],[R[694]]]],[11,"from",R[545],E,39,[[["u8"]],[R[86]]]],[11,R[281],R[638],R[994],70,[[["self"],["str"]],[R[16],["error"]]]],[11,"fmt",R[622],E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[626],E,40,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[629],E,48,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[639],E,72,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[640],E,77,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[622],E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[626],E,40,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[629],E,48,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[639],E,72,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[640],E,77,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[622],E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[626],E,40,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[629],E,48,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[639],E,72,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[640],E,77,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[643],E,97,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,98,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[622],E,17,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[499],E,0,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[626],E,40,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[629],E,48,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[639],E,72,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[640],E,77,[[["self"],[R[20]]],[R[16]]]],[11,"clone",R[622],E,17,[[["self"]],[R[144]]]],[11,"clone",E,E,18,[[["self"]],["i386entry"]]],[11,"clone",R[499],E,0,[[["self"]],[R[498]]]],[11,"clone",R[536],E,30,[[["self"]],["arithmeticoperation"]]],[11,"clone",R[626],E,40,[[["self"]],["eflags"]]],[11,"clone",R[628],E,43,[[["self"]],[R[88]]]],[11,"clone",R[629],E,45,[[["self"]],["idtentry"]]],[11,"clone",E,E,49,[[["self"]],[R[694]]]],[11,"clone",E,E,46,[[["self"]],[R[549]]]],[11,"clone",E,E,48,[[["self"]],[R[557]]]],[11,"clone",R[631],E,53,[[["self"]],[R[96]]]],[11,"clone",E,E,55,[[["self"]],[R[213]]]],[11,"clone",E,E,54,[[["self"]],[R[94]]]],[11,"clone",R[633],E,57,[[["self"]],[R[89]]]],[11,"clone",R[545],E,39,[[["self"]],[R[86]]]],[11,"clone",E,E,37,[[["self"]],[R[210]]]],[11,"clone",R[635],E,61,[[["self"]],["physicalmemregioniter"]]],[11,"clone",R[638],E,66,[[["self"]],["comport"]]],[11,"clone",E,E,69,[[["self"]],[R[578]]]],[11,"clone",E,E,67,[[["self"]],[R[579]]]],[11,"clone",R[639],E,76,[[["self"]],[R[700]]]],[11,"clone",E,E,72,[[["self"]],[R[582]]]],[11,"clone",R[640],E,77,[[["self"]],["icw1"]]],[11,"clone",R[599],E,95,[[["self"]],[R[600]]]],[11,"clone",R[643],E,97,[[["self"]],[R[98]]]],[11,"clone",E,E,98,[[["self"]],[R[101]]]],[11,"clone",E,E,99,[[["self"]],[R[566]]]],[11,"clone",E,E,100,[[["self"]],[R[567]]]],[11,"clone",R[644],E,105,[[["self"]],[R[250]]]],[11,"clone",E,E,106,[[["self"]],["self"]]],[11,"clone",R[645],E,111,[[["self"]],[R[613]]]],[11,"clone",E,E,112,[[["self"]],["self"]]],[11,"into",R[643],E,100,[[["self"]],[R[566]]]],[11,R[77],R[526],"Creates a ProcessMemory, allocating the…",2,[[],["self"]]],[11,R[77],R[540],E,34,[[],["self"]]],[11,R[77],R[630],"Creates an empty ThreadHardwareContext.",50,[[],["self"]]],[11,R[77],R[545],E,37,[[],[R[210]]]],[11,R[77],R[599],E,89,[[],["self"]]],[11,R[77],E,"Creates an empty handle table. Note that an empty handle…",92,[[],["self"]]],[11,"alloc",R[637],E,65,N],[11,"dealloc",E,E,65,N],[11,R[214],R[631],E,52,[[["self"]]]],[11,R[214],R[564],E,58,[[["self"]]]],[11,R[214],R[639],E,71,[[["self"]]]],[11,R[214],R[608],E,102,[[["self"]]]],[11,"enabled",R[542],E,32,[[["self"],[R[852]]],["bool"]]],[11,"log",E,E,32,[[["self"],["record"]]]],[11,"flush",E,E,32,[[["self"]]]],[11,"name",R[511],E,10,[[["self"]],[R[83],["str"]]]],[11,"cause",E,E,10,[[["self"]],[R[83],["fail"]]]],[11,R[285],E,E,10,[[["self"]],[R[83],[R[285]]]]],[11,"name",R[536],E,31,[[["self"]],[R[83],["str"]]]],[11,"cause",E,E,31,[[["self"]],[R[83],["fail"]]]],[11,R[285],E,E,31,[[["self"]],[R[83],[R[285]]]]],[11,R[283],R[629],E,46,[[["self"],[R[9]],[R[9]]],[T]]],[11,R[284],E,E,46,[[["self"],[R[9]],[R[9]],[T]]]],[11,R[283],R[644],E,107,[[["self"],[R[9]],[R[9]]],[T]]],[11,R[284],E,E,107,[[["self"],[R[9]],[R[9]],[T]]]],[11,R[283],E,E,108,[[["self"],[R[9]],[R[9]]],[T]]],[11,R[284],E,E,108,[[["self"],[R[9]],[R[9]],[T]]]],[11,R[855],R[536],R[366],29,[[["self"]],[R[9]]]],[11,R[367],E,R[368],29,[[["u32"]],[R[25]]]],[11,R[369],E,R[370],29,[[["u32"]],[R[25]]]],[11,R[371],E,R[372],29,[[["self"]],["u32"]]],[18,R[334],E,R[335],29,N],[18,R[336],E,R[337],29,N],[18,R[338],E,R[339],29,N],[18,R[340],E,R[341],29,N],[18,R[342],E,R[343],29,N],[18,R[344],E,R[345],29,N],[18,R[346],E,R[347],29,N],[18,R[348],E,R[349],29,N],[18,R[350],E,R[351],29,N],[18,R[352],E,R[353],29,N],[18,"Timeout",E,R[354],29,N],[18,R[854],E,R[355],29,N],[18,R[356],E,R[357],29,N],[18,R[358],E,R[359],29,N],[18,R[360],E,R[361],29,N],[18,R[362],E,R[363],29,N],[18,R[364],E,R[365],29,N],[11,"new",R[632],R[322],56,[[["u16"]],["pio"]]],[18,"INIT",R[641],"Initialization constant of `Once`.",80,N],[11,"new",E,"Creates a new `Once` value.",80,[[],["once"]]],[11,"call_once",E,"Performs an initialization routine once and only once. The…",80,[[["self"],["f"]],[T]]],[11,"try",E,"Returns a pointer iff the `Once` was previously initialized",80,[[["self"]],[R[83]]]],[11,"wait",E,"Like try, but will spin if the `Once` is in the process of…",80,[[["self"]],[R[83]]]],[11,"new",E,R[703],81,[[[T]],["rwlock"]]],[11,R[601],E,"Consumes this `RwLock`, returning the underlying data.",81,[[["self"]],[T]]],[11,"read",E,"Locks this rwlock with shared read access, blocking the…",81,[[["self"]],[R[701]]]],[11,"try_read",E,"Attempt to acquire this lock with shared read access.",81,[[["self"]],[R[83],[R[701]]]]],[11,"force_read_decrement",E,"Force decrement the reader count.",81,N],[11,"force_write_unlock",E,"Force unlock exclusive write access.",81,N],[11,"write",E,"Lock this rwlock with exclusive write access, blocking the…",81,[[["self"]],[R[702]]]],[11,"try_write",E,"Attempt to lock this rwlock with exclusive write access.",81,[[["self"]],[R[83],[R[702]]]]],[11,"new",E,R[703],84,[[[T]],["mutex"]]],[11,R[601],E,"Consumes this mutex, returning the underlying data.",84,[[["self"]],[T]]],[11,"lock",E,"Locks the spinlock and returns a guard.",84,[[["self"]],[R[704]]]],[11,R[590],E,"Force unlock the spinlock.",84,N],[11,"try_lock",E,"Tries to lock the mutex. If it is already locked, it will…",84,[[["self"]],[R[83],[R[704]]]]],[11,"new",R[632],R[319],116,[[["i"]],[R[853]]]],[11,"read",E,R[4],116,N],[11,"readf",E,R[5],116,N],[11,"new",E,R[320],117,[[["i"]],[R[321]]]],[11,"write",E,R[6],117,N],[11,"new",R[617],R[10],119,N],[11,"pos",E,R[11],119,[[["self"]],[R[9]]]],[11,R[777],E,R[778],119,N],[11,"write_u8",E,R[779],119,N],[11,R[780],E,R[781],119,N],[11,R[782],E,R[783],119,N],[11,R[784],E,R[785],119,N],[11,"write",E,R[786],119,N],[11,R[705],E,R[787],119,N],[11,"new",E,R[10],120,N],[11,"pos",E,R[11],120,[[["self"]],[R[9]]]],[11,"read_u8",E,R[788],120,[[["self"]],["u8"]]],[11,"read_u16",E,R[789],120,[[["self"]],["u16"]]],[11,"read_u32",E,R[790],120,[[["self"]],["u32"]]],[11,"read_u64",E,R[791],120,[[["self"]],["u64"]]],[11,"assert",E,R[792],120,N],[11,R[793],E,R[794],120,N],[11,R[795],E,R[796],120,[[["self"]],[T]]]],"p":[[3,R[706]],[4,R[118]],[3,R[707]],[4,R[379]],[4,R[708]],[3,R[709]],[8,R[241]],[3,"Mapping"],[4,R[114]],[3,R[710]],[4,"MmError"],[3,R[232]],[8,R[711]],[8,R[238]],[8,R[712]],[8,R[713]],[8,R[714]],[3,R[715]],[3,R[716]],[3,"Table"],[3,R[231]],[3,R[230]],[3,R[234]],[3,R[233]],[3,R[717]],[3,R[718]],[3,"IRQEvent"],[3,"IRQState"],[8,"Waitable"],[3,R[719]],[4,R[720]],[4,R[82]],[3,"Logger"],[3,"Filter"],[3,"Builder"],[3,R[721]],[3,"Filter"],[3,R[223]],[3,R[722]],[4,R[224]],[3,"EFlags"],[3,R[723]],[3,R[724]],[3,R[222]],[3,"Idt"],[3,"IdtEntry"],[3,R[725]],[3,R[726]],[3,R[727]],[4,"GateType"],[3,R[728]],[3,R[729]],[3,R[92]],[3,R[219]],[3,R[220]],[4,R[221]],[3,"Pio"],[3,R[225]],[3,"IDT"],[3,R[286]],[3,R[571]],[3,R[730]],[3,R[731]],[8,R[732]],[8,R[733]],[3,R[307]],[3,"ComPort"],[3,R[734]],[3,R[735]],[4,R[736]],[3,R[737]],[3,R[581]],[3,R[738]],[3,"PITPorts"],[3,R[739]],[3,"WaitFor"],[4,R[740]],[3,"ICW1"],[3,R[741]],[3,"Pic"],[3,"Once"],[3,"RwLock"],[3,R[742]],[3,R[743]],[3,"SpinLock"],[3,R[744]],[3,R[745]],[3,R[746]],[8,"Lock"],[3,R[592]],[3,R[747]],[3,R[748]],[3,R[749]],[3,R[750]],[4,"Handle"],[4,R[751]],[3,R[752]],[3,R[226]],[3,R[227]],[3,R[753]],[3,R[754]],[3,"FatPtr"],[3,R[614]],[3,R[755]],[3,"Session"],[3,R[289]],[3,R[290]],[3,R[295]],[3,R[296]],[3,"Request"],[3,"Port"],[3,R[291]],[3,R[292]],[3,R[756]],[3,R[757]],[8,"Io"],[3,R[21]],[3,R[22]],[8,R[23]],[3,R[7]],[3,R[8]],[8,R[758]],[3,R[242]],[3,R[935]],[3,R[759]],[3,"NoFlush"],[3,R[760]],[3,R[943]],[3,R[244]]]};
searchIndex[R[84]]={"doc":"Bootstrap stage","i":[[3,R[215],R[84],"4 pages, PAGE_SIZE aligned.",N,N],[12,"0",E,E,0,N],[3,"EndTag",E,E,N,N],[12,"tag",E,E,1,N],[12,"flag",E,E,1,N],[12,"size",E,E,1,N],[3,R[216],E,E,N,N],[12,"tag",E,E,2,N],[12,"flags",E,E,2,N],[12,"size",E,E,2,N],[12,"width",E,E,2,N],[12,"height",E,E,2,N],[12,"depth",E,E,2,N],[3,R[217],E,E,N,N],[12,"tag",E,E,3,N],[12,"flags",E,E,3,N],[12,"size",E,E,3,N],[3,R[218],E,"The multiboot header structure of our binary.",N,N],[12,"magic",E,E,4,N],[12,"architecture",E,E,4,N],[12,"header_length",E,E,4,N],[12,"checksum",E,E,4,N],[12,R[493],E,E,4,N],[12,"end",E,E,4,N],[5,"print_stack",E,"Prints raw hexdump of the stack. Use this if everything…",N,[[]]],[5,"bootstrap_start",E,"The very start.",N,N],[5,"do_bootstrap",E,"bootstrap stage and call kernel",N,N],[5,R[494],E,R[495],N,[[]]],[5,R[496],E,"The bootstrap panic function.",N,N],[0,"bootstrap_logging",E,"bootstrap logging on rs232",N,N],[3,"Serial",R[189],R[856],N,N],[5,"init_bootstrap_log",E,"Init the rs232 COM1. Must be called before logging anything.",N,[[]]],[5,"bootstrap_log",E,"Sends a string to COM1.",N,[[["str"]]]],[5,"bootstrap_inb",E,E,N,[[["u16"]],["u8"]]],[5,"bootstrap_outb",E,E,N,[[["u16"],["u8"]]]],[17,"COM1",E,E,N,N],[0,"gdt",R[84],R[857],N,N],[3,R[92],R[87],E,N,N],[12,R[85],E,E,5,N],[3,R[93],E,E,N,N],[12,R[85],E,E,6,N],[3,R[219],E,"A structure containing our GDT. We can have at most 16…",N,N],[12,"table",E,E,7,N],[3,R[220],E,E,N,N],[12,"0",E,E,8,N],[4,R[221],E,E,N,N],[13,R[858],E,E,9,N],[13,"Ldt",E,E,9,N],[13,R[859],E,E,9,N],[13,R[860],E,E,9,N],[13,"TaskGate",E,E,9,N],[13,R[861],E,E,9,N],[13,R[862],E,E,9,N],[13,R[863],E,E,9,N],[13,R[864],E,E,9,N],[13,R[865],E,E,9,N],[13,R[866],E,E,9,N],[13,R[867],E,E,9,N],[5,"init_gdt",E,E,N,[[]]],[0,"segment_selector",E,R[868],N,N],[3,R[222],R[190],R[869],N,N],[12,"0",E,E,10,N],[11,"new",E,R[870],10,[[["u16"],[R[86]]],[R[88]]]],[11,"index",E,R[871],10,[[["self"]],["u16"]]],[11,"rpl",E,R[872],10,[[["self"]],[R[86]]]],[0,"i386",R[87],R[873],N,N],[3,R[223],R[91],R[874],N,N],[12,R[875],E,E,11,N],[12,"link",E,E,11,N],[12,"esp0",E,E,11,N],[12,R[876],E,E,11,N],[12,"ss0",E,E,11,N],[12,"esp1",E,E,11,N],[12,R[877],E,E,11,N],[12,"ss1",E,E,11,N],[12,"esp2",E,E,11,N],[12,R[878],E,E,11,N],[12,"ss2",E,E,11,N],[12,"cr3",E,E,11,N],[12,"eip",E,E,11,N],[12,"eflags",E,E,11,N],[12,"eax",E,E,11,N],[12,"ecx",E,E,11,N],[12,"edx",E,E,11,N],[12,"ebx",E,E,11,N],[12,"esp",E,E,11,N],[12,"ebp",E,E,11,N],[12,"esi",E,E,11,N],[12,"edi",E,E,11,N],[12,R[879],E,E,11,N],[12,"es",E,E,11,N],[12,R[880],E,E,11,N],[12,"cs",E,E,11,N],[12,R[881],E,E,11,N],[12,"ss",E,E,11,N],[12,R[882],E,E,11,N],[12,"ds",E,E,11,N],[12,R[883],E,E,11,N],[12,"fs",E,E,11,N],[12,R[884],E,E,11,N],[12,"gs",E,E,11,N],[12,R[885],E,E,11,N],[12,R[886],E,E,11,N],[12,R[887],E,E,11,N],[12,R[888],E,E,11,N],[4,R[224],E,R[889],N,N],[13,"Ring0",E,R[890],12,N],[13,"Ring1",E,R[891],12,N],[13,"Ring2",E,R[892],12,N],[13,"Ring3",E,R[893],12,N],[0,R[894],E,R[895],N,N],[0,"tables",R[90],R[896],N,N],[3,R[225],R[191],R[897],N,N],[12,"limit",E,R[898],13,N],[12,"base",E,"Pointer to the memory region containing the DT.",13,N],[5,"lgdt",E,R[899],N,[[[R[89]]]]],[5,"lldt",E,R[900],N,[[[R[88]]]]],[5,"ltr",E,R[901],N,[[[R[88]]]]],[5,"lidt",E,R[902],N,[[[R[89]]]]],[0,R[903],R[90],R[904],N,N],[5,"set_cs","kfs_bootstrap::gdt::i386::instructions::segmentation",R[905],N,[[[R[88]]]]],[5,"load_ss",E,R[906],N,[[[R[88]]]]],[5,"load_ds",E,R[907],N,[[[R[88]]]]],[5,"load_es",E,R[908],N,[[[R[88]]]]],[5,"load_fs",E,R[909],N,[[[R[88]]]]],[5,"load_gs",E,R[910],N,[[[R[88]]]]],[5,"cs",E,R[911],N,[[],[R[88]]]],[0,R[562],R[90],R[912],N,N],[5,"sti","kfs_bootstrap::gdt::i386::instructions::interrupts",R[913],N,[[]]],[5,"cli",E,R[914],N,[[]]],[11,"from_u16",R[91],R[915],12,[[["u16"]],[R[86]]]],[11,"new",E,E,11,N],[7,"GDT",R[87],E,N,N],[7,R[916],E,R[917],N,N],[7,R[92],E,E,N,N],[7,R[93],E,E,N,N],[11,"new",E,E,7,[[],[R[96]]]],[11,"push",E,E,7,[[["self"],[R[94]]]]],[11,R[918],E,E,7,[[["self"],["u16"],["u16"],["u16"]]]],[11,R[919],E,E,8,[[],[R[94]]]],[11,"new",E,R[95],8,[[["u32"],["u32"],["bool"],[R[86]]],[R[94]]]],[11,R[920],E,R[95],8,[[[R[213]],["u32"],["u32"],[R[86]]],[R[94]]]],[11,"new_ldt",E,R[921],8,[[[R[96]],[R[86]]],[R[94]]]],[11,"new_tss",E,R[922],8,[[[R[210]],[R[86]]],[R[94]]]],[11,R[923],E,E,8,[[["self"]],["u32"]]],[11,R[924],E,E,8,[[["self"],["u32"]]]],[11,"get_base",E,E,8,[[["self"]],["u32"]]],[11,"set_base",E,E,8,[[["self"],["u32"]]]],[11,R[925],E,E,8,[[["self"]],["bool"]]],[11,R[926],E,E,8,[[["self"]],["bool"]]],[11,R[927],E,E,8,[[["self"]],["bool"]]],[11,R[928],E,E,8,[[["self"]],["bool"]]],[11,R[929],E,E,8,[[["self"]],[R[86]]]],[11,R[930],E,E,8,[[["self"]],["bool"]]],[11,R[931],E,E,8,[[["self"]],["bool"]]],[11,R[932],E,E,8,[[["self"],["bool"]]]],[11,"is_32bit",E,E,8,[[["self"]],["bool"]]],[0,R[513],R[84],"Physical and Virtual address wrappers",N,N],[3,R[226],R[192],R[933],N,N],[12,"0",E,E,14,N],[3,R[227],E,R[934],N,N],[12,"0",E,E,15,N],[11,"addr",E,R[97],15,[[["self"]],[R[9]]]],[11,"addr",E,R[97],14,[[["self"]],[R[9]]]],[11,"floor",E,R[99],14,[[["self"]],[R[98]]]],[11,"ceil",E,R[100],14,[[["self"]],[R[98]]]],[11,"floor",E,R[99],15,[[["self"]],[R[101]]]],[11,"ceil",E,R[100],15,[[["self"]],[R[101]]]],[0,"paging",R[84],"Paging on i386",N,N],[3,R[108],R[107],R[109],N,N],[3,R[110],E,R[111],N,N],[12,R[102],E,E,16,N],[3,R[112],E,R[113],N,N],[12,R[102],E,E,17,N],[3,R[103],E,R[104],N,N],[12,"bits",E,E,18,N],[3,R[242],E,"The virtual memory belonging to kernel.",N,N],[3,R[935],E,"The virtual memory belonging to user.",N,N],[4,R[114],E,R[115],N,N],[13,R[945],E,E,19,N],[13,"Guard",E,E,19,N],[5,R[936],E,R[937],N,[[],["bool"]]],[5,R[154],E,E,N,[[[R[98]]]]],[5,R[938],E,R[939],N,[[]]],[5,"swap_cr3",E,R[940],N,[[[R[98]]],[R[98]]]],[5,"map_bootstrap",E,"Creates a set of page tables identity mapping the Bootstrap.",N,[[[R[187]]],[R[188]]]],[5,R[941],E,E,N,[[]]],[5,R[164],E,R[151],N,[[],[R[101]]]],[0,"entry",E,R[116],N,N],[3,R[103],R[193],R[104],N,N],[12,"bits",E,E,20,N],[3,"Entry",E,R[117],N,N],[12,"0",E,E,21,N],[4,R[118],E,R[119],N,N],[13,R[120],E,E,22,N],[13,"Guarded",E,E,22,N],[13,R[945],E,E,22,N],[17,R[121],E,E,N,N],[18,R[205],E,E,20,N],[18,R[57],E,E,20,N],[18,R[122],E,E,20,N],[18,R[123],E,E,20,N],[18,R[203],E,E,20,N],[18,R[204],E,E,20,N],[18,"DIRTY",E,E,20,N],[18,R[124],E,E,20,N],[18,"GLOBAL",E,E,20,N],[18,R[125],E,E,20,N],[18,R[126],E,E,20,N],[18,R[127],E,E,20,N],[11,"empty",E,R[32],20,[[],[R[105]]]],[11,"all",E,R[33],20,[[],[R[105]]]],[11,"bits",E,R[35],20,[[["self"]],["u32"]]],[11,R[36],E,R[37],20,[[["u32"]],[R[83],[R[105]]]]],[11,R[38],E,R[39],20,[[["u32"]],[R[105]]]],[11,R[40],E,R[41],20,[[["self"]],["bool"]]],[11,"is_all",E,R[42],20,[[["self"]],["bool"]]],[11,R[43],E,R[44],20,[[["self"],[R[105]]],["bool"]]],[11,R[45],E,R[46],20,[[["self"],[R[105]]],["bool"]]],[11,"insert",E,R[47],20,[[["self"],[R[105]]]]],[11,"remove",E,R[48],20,[[["self"],[R[105]]]]],[11,"toggle",E,R[49],20,[[["self"],[R[105]]]]],[11,"set",E,R[50],20,[[["self"],[R[105]],["bool"]]]],[11,R[128],E,R[129],21,[[["self"]],["bool"]]],[11,R[130],E,R[131],21,[[["self"]],[R[106],["frame"]]]],[11,R[942],E,R[132],21,[[["self"]],["bool"]]],[11,"flags",E,R[133],21,[[["self"]],[R[105]]]],[11,R[134],E,R[135],21,[[["self"]],[R[106],[R[98]]]]],[11,"set",E,R[136],21,[[["self"],["frame"],[R[105]]]]],[11,R[137],E,R[138],21,[[["self"]]]],[11,"unwrap",E,R[139],22,[[["self"]],[T]]],[11,"map",E,R[140],22,[[["self"],["f"]],[R[106]]]],[11,R[141],E,R[142],22,[[["self"]],[R[83]]]],[0,"table",R[107],"i386 page table / directory",N,N],[3,R[228],R[143],"A page table",N,N],[12,R[198],E,E,23,N],[3,R[229],E,"A page directory",N,N],[12,"0",E,E,24,N],[3,R[103],E,R[104],N,N],[12,"bits",E,E,18,N],[3,R[108],E,R[109],N,N],[3,R[230],E,"The page directory currently in use.",N,N],[12,"0",E,E,25,N],[3,R[231],E,"A page table currently in use.",N,N],[12,"0",E,E,26,N],[3,R[232],E,"This is just a wrapper for a pointer to a Table or a…",N,N],[12,"0",E,E,27,N],[12,"1",E,E,27,N],[3,R[110],E,R[111],N,N],[12,R[102],E,E,16,N],[3,R[233],E,"A temporary mapped page directory.",N,N],[12,"0",E,E,28,N],[3,R[234],E,"A temporary mapped page table.",N,N],[12,"0",E,E,29,N],[3,R[112],E,R[113],N,N],[12,R[102],E,E,17,N],[3,R[235],E,"A directory we can modify by directly accessing physical…",N,N],[12,"0",E,E,30,N],[3,R[236],E,"A table we can modify by directly accessing physical…",N,N],[12,"0",E,E,31,N],[3,R[943],E,R[944],N,N],[3,"NoFlush",E,"When passing this struct the TLB will not be flushed. Used…",N,N],[4,R[114],E,R[115],N,N],[13,R[945],E,E,19,N],[13,"Guard",E,E,19,N],[5,"__assertions",E,E,N,[[]]],[0,"entry",E,R[116],N,N],[3,R[103],R[194],R[104],N,N],[12,"bits",E,E,32,N],[3,"Entry",E,R[117],N,N],[12,"0",E,E,33,N],[4,R[118],E,R[119],N,N],[13,R[120],E,E,34,N],[13,"Guarded",E,E,34,N],[13,R[945],E,E,34,N],[17,R[121],E,E,N,N],[18,R[205],E,E,32,N],[18,R[57],E,E,32,N],[18,R[122],E,E,32,N],[18,R[123],E,E,32,N],[18,R[203],E,E,32,N],[18,R[204],E,E,32,N],[18,"DIRTY",E,E,32,N],[18,R[124],E,E,32,N],[18,"GLOBAL",E,E,32,N],[18,R[125],E,E,32,N],[18,R[126],E,E,32,N],[18,R[127],E,E,32,N],[11,"empty",E,R[32],32,[[],[R[105]]]],[11,"all",E,R[33],32,[[],[R[105]]]],[11,"bits",E,R[35],32,[[["self"]],["u32"]]],[11,R[36],E,R[37],32,[[["u32"]],[R[83],[R[105]]]]],[11,R[38],E,R[39],32,[[["u32"]],[R[105]]]],[11,R[40],E,R[41],32,[[["self"]],["bool"]]],[11,"is_all",E,R[42],32,[[["self"]],["bool"]]],[11,R[43],E,R[44],32,[[["self"],[R[105]]],["bool"]]],[11,R[45],E,R[46],32,[[["self"],[R[105]]],["bool"]]],[11,"insert",E,R[47],32,[[["self"],[R[105]]]]],[11,"remove",E,R[48],32,[[["self"],[R[105]]]]],[11,"toggle",E,R[49],32,[[["self"],[R[105]]]]],[11,"set",E,R[50],32,[[["self"],[R[105]],["bool"]]]],[11,R[128],E,R[129],33,[[["self"]],["bool"]]],[11,R[130],E,R[131],33,[[["self"]],[R[106],["frame"]]]],[11,R[942],E,R[132],33,[[["self"]],["bool"]]],[11,"flags",E,R[133],33,[[["self"]],[R[105]]]],[11,R[134],E,R[135],33,[[["self"]],[R[106],[R[98]]]]],[11,"set",E,R[136],33,[[["self"],["frame"],[R[105]]]]],[11,R[137],E,R[138],33,[[["self"]]]],[11,"unwrap",E,R[139],34,[[["self"]],[T]]],[11,"map",E,R[140],34,[[["self"],["f"]],[R[106]]]],[11,R[141],E,R[142],34,[[["self"]],[R[83]]]],[0,"detail",R[143],E,N,N],[8,R[237],"kfs_bootstrap::paging::table::detail","A trait describing the interface of a PageTable hierarchy.",N,N],[16,"PageDirectoryType",E,E,35,N],[10,R[202],E,"Gets a reference to the directory",35,[[["self"]],[R[147]]]],[17,R[946],R[143],R[947],N,N],[8,R[238],E,"A table of entries, either the directory or one of the…",N,N],[10,R[198],E,E,36,N],[10,R[197],E,E,36,N],[11,"zero",E,R[948],36,[[["self"]]]],[11,R[949],E,"Creates a mapping on the nth entry of a table T is a…",36,[[["self"],[R[9]],["frame"],[R[144]]]]],[11,R[950],E,"Marks the nth entry as guard page T is a flusher…",36,[[["self"],[R[9]]]]],[11,R[152],E,E,36,[[]]],[8,R[239],E,E,N,N],[16,R[146],E,E,37,N],[11,"map_whole_table",E,R[145],37,[[["self"],[R[98]],[R[144]]]]],[11,"map_guard_whole_table",E,R[145],37,[[["self"]]]],[8,R[240],E,"A trait describing all the things that a PageDirectory can…",N,N],[16,"PageTableType",E,E,38,N],[16,R[146],E,E,38,N],[10,R[199],E,"Gets a reference to a page table",38,[[["self"],[R[9]]],[R[106],[R[147]]]]],[10,R[200],E,R[201],38,[[["self"],[R[9]]],[R[147]]]],[11,"get_table_or_create",E,"Gets the page table at given index, or creates it if it…",38,[[["self"],[R[9]]],[R[147]]]],[11,"map_to",E,R[148],38,[[["self"],["frame"],[R[101]],[R[144]]]]],[11,"guard",E,"Creates a guard page",38,[[["self"],[R[101]]]]],[11,"__unmap",E,"Deletes a mapping in the page tables, returning the frame…",38,[[["self"],[R[101]]],[R[106],["frame"]]]],[11,R[149],E,R[150],38,[[["self"],[R[9]],[R[9]]],[R[83],[R[101]]]]],[8,R[155],E,E,N,N],[10,"map_to",E,R[148],39,[[["self"],[R[156]],[R[101]]]]],[10,"get_phys",E,R[157],39,[[["self"],[R[101]]],[R[106],[R[98]]]]],[10,R[149],E,R[150],39,[[["self"],[R[9]],[R[9]]],[R[83],[R[101]]]]],[11,R[158],E,R[159],39,[[["self"]]]],[10,"unmap",E,R[160],39,[[["self"],[R[101]]],[R[106],["frame"]]]],[11,R[161],E,R[151],39,[[["self"],[R[101]],[R[105]]]]],[11,R[162],E,R[163],39,[[["self"],["frame"],[R[105]]],[R[101]]]],[11,R[164],E,R[151],39,[[["self"]],[R[101]]]],[11,R[165],E,R[166],39,[[["self"],[R[101]]]]],[11,R[167],E,R[168],39,[[["self"],[R[101]],[R[9]]]]],[11,R[169],E,R[170],39,[[["self"],[R[98]],[R[101]],[R[9]],[R[105]]]]],[11,R[171],E,R[172],39,[[["self"],[R[101]],[R[9]],[R[105]]]]],[11,R[173],E,R[174],39,[[["self"],["frame"],[R[105]]]]],[11,R[175],E,R[176],39,[[["self"],[R[98]],[R[9]],[R[105]]]]],[11,R[177],E,R[150],39,[[["self"],[R[9]]],[R[83],[R[101]]]]],[11,R[178],E,R[179],39,[[["self"],[R[101]]]]],[11,R[180],E,R[181],39,[[["self"],[R[101]],[R[9]]]]],[8,"Flusher",E,"A trait used to decide if the TLB cache should be flushed…",N,N],[11,R[152],E,E,40,[[]]],[18,R[57],R[107],E,18,N],[18,R[122],E,E,18,N],[11,"empty",E,R[32],18,[[],[R[105]]]],[11,"all",E,R[33],18,[[],[R[105]]]],[11,"bits",E,R[35],18,[[["self"]],["u32"]]],[11,R[36],E,R[37],18,[[["u32"]],[R[83],[R[105]]]]],[11,R[38],E,R[39],18,[[["u32"]],[R[105]]]],[11,R[40],E,R[41],18,[[["self"]],["bool"]]],[11,"is_all",E,R[42],18,[[["self"]],["bool"]]],[11,R[43],E,R[44],18,[[["self"],[R[105]]],["bool"]]],[11,R[45],E,R[46],18,[[["self"],[R[105]]],["bool"]]],[11,"insert",E,R[47],18,[[["self"],[R[105]]]]],[11,"remove",E,R[48],18,[[["self"],[R[105]]]]],[11,"toggle",E,R[49],18,[[["self"],[R[105]]]]],[11,"set",E,R[50],18,[[["self"],[R[105]],["bool"]]]],[11,R[951],R[143],R[952],25,[[["self"],[R[9]]],[R[106],[R[9]]]]],[11,"new",E,E,27,N],[11,"new",R[107],"Creates a new set of inactive page tables",16,[[],[R[153]]]],[11,R[519],E,"Switch to this page tables set. Returns the old active…",16,[[["self"]],[R[153]]]],[11,"delete",E,E,16,[[["self"]]]],[11,"delete_userspace",R[143],E,28,[[["self"]]]],[11,"copy_active_kernelspace",E,"Copies all the entries in the directory mapping tables…",28,[[["self"]]]],[11,"free_all_frames",E,"Frees all pages mapped by this table, and mark the frames…",29,[[["self"]]]],[11,"paging_off_create_page_set",R[107],"Used at startup when the paging is disabled and creating…",17,[[],["self"]]],[11,R[154],E,"Enables paging with this tables as active tables",17,[[["self"]]]],[11,"init_directory",R[143],"Initializes the directory. This function does two things:",30,[[["self"]]]],[7,"ACTIVE_PAGE_TABLES",R[107],"Currently active page tables.",N,N],[17,R[533],E,"The size of a single page.",N,N],[17,R[953],E,E,N,N],[8,R[155],E,E,N,N],[10,"map_to",E,R[148],39,[[["self"],[R[156]],[R[101]]]]],[10,"get_phys",E,R[157],39,[[["self"],[R[101]]],[R[106],[R[98]]]]],[10,R[149],E,R[150],39,[[["self"],[R[9]],[R[9]]],[R[83],[R[101]]]]],[11,R[158],R[143],R[159],39,[[["self"]]]],[10,"unmap",R[107],R[160],39,[[["self"],[R[101]]],[R[106],["frame"]]]],[11,R[161],R[143],R[151],39,[[["self"],[R[101]],[R[105]]]]],[11,R[162],E,R[163],39,[[["self"],["frame"],[R[105]]],[R[101]]]],[11,R[164],E,R[151],39,[[["self"]],[R[101]]]],[11,R[165],E,R[166],39,[[["self"],[R[101]]]]],[11,R[167],E,R[168],39,[[["self"],[R[101]],[R[9]]]]],[11,R[169],E,R[170],39,[[["self"],[R[98]],[R[101]],[R[9]],[R[105]]]]],[11,R[171],E,R[172],39,[[["self"],[R[101]],[R[9]],[R[105]]]]],[11,R[173],E,R[174],39,[[["self"],["frame"],[R[105]]]]],[11,R[175],E,R[176],39,[[["self"],[R[98]],[R[9]],[R[105]]]]],[11,R[177],E,R[150],39,[[["self"],[R[9]]],[R[83],[R[101]]]]],[11,R[178],E,R[179],39,[[["self"],[R[101]]]]],[11,R[180],E,R[181],39,[[["self"],[R[101]],[R[9]]]]],[8,R[241],R[107],R[954],N,N],[10,R[182],E,R[504],41,[[],[R[101]]]],[10,R[183],E,R[505],41,[[],[R[101]]]],[11,R[955],E,"The index in page directory of the first table of this land",41,[[],[R[9]]]],[11,R[956],E,"The index in page directory of the last table of this land",41,[[],[R[9]]]],[11,R[182],E,E,42,[[],[R[101]]]],[11,R[183],E,E,42,[[],[R[101]]]],[11,R[182],E,E,43,[[],[R[101]]]],[11,R[183],E,E,43,[[],[R[101]]]],[0,"frame_alloc",R[84],"A module implementing a physical memory manager that…",N,N],[3,R[243],R[195],R[184],N,N],[12,R[957],E,E,44,N],[12,R[958],E,E,44,N],[3,"Frame",E,"A pointer to a physical frame",N,N],[12,"physical_addr",E,E,45,N],[12,R[185],E,E,45,N],[3,R[244],E,R[959],N,N],[5,R[960],E,R[961],N,[[[R[9]]],[R[9]]]],[5,R[962],E,R[963],N,[[[R[9]]],[R[9]]]],[5,R[964],E,R[965],N,[[[R[9]]],[R[9]]]],[5,R[966],E,R[967],N,[[[R[9]]],[R[9]]]],[7,"FRAMES_BITMAP",E,R[184],N,N],[17,"MEMORY_FRAME_SIZE",E,"A memory frame is the same size as a page",N,N],[17,R[968],E,E,N,N],[17,R[969],E,E,N,N],[17,R[970],E,E,N,N],[17,R[971],E,R[972],N,N],[17,R[973],E,E,N,N],[17,R[974],E,E,N,N],[11,R[513],E,"Get the physical address of this Frame",45,[[["self"]],[R[98]]]],[11,R[185],E,"Gets the current allocation state",45,[[["self"]],["bool"]]],[11,"from_physical_addr",E,R[186],45,[[[R[98]]],["frame"]]],[11,"from_allocated_addr",E,R[186],45,[[[R[98]]],["frame"]]],[11,"init",E,"Initialize the FrameAllocator by parsing the multiboot…",46,[[[R[187]]]]],[11,"check_initialized",E,"Panics if the frames bitmap was not initialized",46,[[["allocatorbitmap"]]]],[11,R[975],E,R[976],46,N],[11,R[977],E,R[978],46,N],[11,"alloc_frame",E,"Allocates a free frame",46,[[],["frame"]]],[11,"alloc_contiguous_frames",E,"Allocates count contiguous frames.",46,[[[R[9]]],[R[98]]]],[11,"free_frame",E,"Frees an allocated frame.",46,[[["frame"]]]],[0,R[979],R[84],"Loads the kernel in high memory",N,N],[5,"load_kernel","kfs_bootstrap::elf_loader","Loads the kernel in high memory Returns address of entry…",N,[[[R[188]],[R[187]]],[R[9]]]],[5,R[980],E,R[981],N,[[[R[188]],[R[982]],["elffile"]]]],[0,"bootstrap_stack",R[84],"Bootstrap stack",N,N],[3,R[245],R[196],"A structure representing a kernel stack",N,N],[12,R[983],E,E,47,N],[17,R[984],E,"The size of a kernel stack, not accounting for the page…",N,N],[17,R[985],E,"The size of the kernel stack, with the page guard.",N,N],[17,"STACK_ALIGNEMENT",E,R[986],N,N],[11,R[987],E,"Allocates the bootstrap stack",47,[[],[R[83],["bootstrapstack"]]]],[18,R[988],E,"We keep 2 poison pointers for fake saved ebp and saved esp…",47,N],[11,R[989],E,R[990],47,[[["self"]]]],[11,R[991],E,"Get the address of the beginning of usable stack. Used for…",47,[[["self"]],[R[9]]]],[7,"STACK",R[84],"The stack we start on.",N,N],[7,"MULTIBOOT_HEADER",E,"The multiboot header of our binary.",N,N],[11,R[77],E,E,1,[[],["endtag"]]],[11,"new",E,E,2,[[["u32"],["u32"],["u32"]],["framebuffertag"]]],[11,"new",E,E,3,[[],["modulealignmenttag"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"from",R[189],E,48,[[[T]],[T]]],[11,R[12],E,E,48,[[[U]],[R[16]]]],[11,R[13],E,E,48,[[["self"]],[R[16]]]],[11,"into",E,E,48,[[["self"]],[U]]],[11,R[18],E,E,48,[[["self"]],[T]]],[11,R[14],E,E,48,[[["self"]],[T]]],[11,R[17],E,E,48,[[["self"]],[R[19]]]],[11,"from",R[87],E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[12],E,E,6,[[[U]],[R[16]]]],[11,R[13],E,E,6,[[["self"]],[R[16]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[R[19]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[12],E,E,7,[[[U]],[R[16]]]],[11,R[13],E,E,7,[[["self"]],[R[16]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[18],E,E,7,[[["self"]],[T]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[R[19]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[12],E,E,8,[[[U]],[R[16]]]],[11,R[13],E,E,8,[[["self"]],[R[16]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[18],E,E,8,[[["self"]],[T]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[R[19]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[12],E,E,9,[[[U]],[R[16]]]],[11,R[13],E,E,9,[[["self"]],[R[16]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[18],E,E,9,[[["self"]],[T]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[R[19]]]],[11,"from",R[190],E,10,[[[T]],[T]]],[11,R[12],E,E,10,[[[U]],[R[16]]]],[11,R[13],E,E,10,[[["self"]],[R[16]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[18],E,E,10,[[["self"]],[T]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[R[19]]]],[11,"from",R[91],E,11,[[[T]],[T]]],[11,R[12],E,E,11,[[[U]],[R[16]]]],[11,R[13],E,E,11,[[["self"]],[R[16]]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[18],E,E,11,[[["self"]],[T]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[R[19]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[12],E,E,12,[[[U]],[R[16]]]],[11,R[13],E,E,12,[[["self"]],[R[16]]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[18],E,E,12,[[["self"]],[T]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[17],E,E,12,[[["self"]],[R[19]]]],[11,"from",R[191],E,13,[[[T]],[T]]],[11,R[12],E,E,13,[[[U]],[R[16]]]],[11,R[13],E,E,13,[[["self"]],[R[16]]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[18],E,E,13,[[["self"]],[T]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[17],E,E,13,[[["self"]],[R[19]]]],[11,"from",R[192],E,14,[[[T]],[T]]],[11,R[12],E,E,14,[[[U]],[R[16]]]],[11,R[13],E,E,14,[[["self"]],[R[16]]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[18],E,E,14,[[["self"]],[T]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[17],E,E,14,[[["self"]],[R[19]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[12],E,E,15,[[[U]],[R[16]]]],[11,R[13],E,E,15,[[["self"]],[R[16]]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[18],E,E,15,[[["self"]],[T]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[17],E,E,15,[[["self"]],[R[19]]]],[11,"from",R[107],E,49,[[[T]],[T]]],[11,R[12],E,E,49,[[[U]],[R[16]]]],[11,R[13],E,E,49,[[["self"]],[R[16]]]],[11,"into",E,E,49,[[["self"]],[U]]],[11,R[18],E,E,49,[[["self"]],[T]]],[11,R[14],E,E,49,[[["self"]],[T]]],[11,R[17],E,E,49,[[["self"]],[R[19]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[12],E,E,16,[[[U]],[R[16]]]],[11,R[13],E,E,16,[[["self"]],[R[16]]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[18],E,E,16,[[["self"]],[T]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[17],E,E,16,[[["self"]],[R[19]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[12],E,E,17,[[[U]],[R[16]]]],[11,R[13],E,E,17,[[["self"]],[R[16]]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[18],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[R[19]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[12],E,E,18,[[[U]],[R[16]]]],[11,R[13],E,E,18,[[["self"]],[R[16]]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[18],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[R[19]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[12],E,E,42,[[[U]],[R[16]]]],[11,R[13],E,E,42,[[["self"]],[R[16]]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[18],E,E,42,[[["self"]],[T]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[17],E,E,42,[[["self"]],[R[19]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[12],E,E,43,[[[U]],[R[16]]]],[11,R[13],E,E,43,[[["self"]],[R[16]]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[18],E,E,43,[[["self"]],[T]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[17],E,E,43,[[["self"]],[R[19]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[12],E,E,19,[[[U]],[R[16]]]],[11,R[13],E,E,19,[[["self"]],[R[16]]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[18],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[R[19]]]],[11,"from",R[193],E,20,[[[T]],[T]]],[11,R[12],E,E,20,[[[U]],[R[16]]]],[11,R[13],E,E,20,[[["self"]],[R[16]]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[18],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[17],E,E,20,[[["self"]],[R[19]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[12],E,E,21,[[[U]],[R[16]]]],[11,R[13],E,E,21,[[["self"]],[R[16]]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[18],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[R[19]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[12],E,E,22,[[[U]],[R[16]]]],[11,R[13],E,E,22,[[["self"]],[R[16]]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[18],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[R[19]]]],[11,"from",R[143],E,23,[[[T]],[T]]],[11,R[12],E,E,23,[[[U]],[R[16]]]],[11,R[13],E,E,23,[[["self"]],[R[16]]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[18],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[R[19]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[12],E,E,24,[[[U]],[R[16]]]],[11,R[13],E,E,24,[[["self"]],[R[16]]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[18],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[R[19]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[12],E,E,25,[[[U]],[R[16]]]],[11,R[13],E,E,25,[[["self"]],[R[16]]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[18],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[R[19]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[12],E,E,26,[[[U]],[R[16]]]],[11,R[13],E,E,26,[[["self"]],[R[16]]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[18],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[R[19]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[12],E,E,27,[[[U]],[R[16]]]],[11,R[13],E,E,27,[[["self"]],[R[16]]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[18],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[R[19]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[12],E,E,28,[[[U]],[R[16]]]],[11,R[13],E,E,28,[[["self"]],[R[16]]]],[11,"into",E,E,28,[[["self"]],[U]]],[11,R[18],E,E,28,[[["self"]],[T]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[17],E,E,28,[[["self"]],[R[19]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[12],E,E,29,[[[U]],[R[16]]]],[11,R[13],E,E,29,[[["self"]],[R[16]]]],[11,"into",E,E,29,[[["self"]],[U]]],[11,R[18],E,E,29,[[["self"]],[T]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[17],E,E,29,[[["self"]],[R[19]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[12],E,E,30,[[[U]],[R[16]]]],[11,R[13],E,E,30,[[["self"]],[R[16]]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[18],E,E,30,[[["self"]],[T]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[R[19]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[12],E,E,31,[[[U]],[R[16]]]],[11,R[13],E,E,31,[[["self"]],[R[16]]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[18],E,E,31,[[["self"]],[T]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[R[19]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[12],E,E,50,[[[U]],[R[16]]]],[11,R[13],E,E,50,[[["self"]],[R[16]]]],[11,"into",E,E,50,[[["self"]],[U]]],[11,R[18],E,E,50,[[["self"]],[T]]],[11,R[14],E,E,50,[[["self"]],[T]]],[11,R[17],E,E,50,[[["self"]],[R[19]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[12],E,E,51,[[[U]],[R[16]]]],[11,R[13],E,E,51,[[["self"]],[R[16]]]],[11,"into",E,E,51,[[["self"]],[U]]],[11,R[18],E,E,51,[[["self"]],[T]]],[11,R[14],E,E,51,[[["self"]],[T]]],[11,R[17],E,E,51,[[["self"]],[R[19]]]],[11,"from",R[194],E,32,[[[T]],[T]]],[11,R[12],E,E,32,[[[U]],[R[16]]]],[11,R[13],E,E,32,[[["self"]],[R[16]]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[18],E,E,32,[[["self"]],[T]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[R[19]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[12],E,E,33,[[[U]],[R[16]]]],[11,R[13],E,E,33,[[["self"]],[R[16]]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[18],E,E,33,[[["self"]],[T]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[R[19]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[12],E,E,34,[[[U]],[R[16]]]],[11,R[13],E,E,34,[[["self"]],[R[16]]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[18],E,E,34,[[["self"]],[T]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[R[19]]]],[11,"from",R[195],E,44,[[[T]],[T]]],[11,R[12],E,E,44,[[[U]],[R[16]]]],[11,R[13],E,E,44,[[["self"]],[R[16]]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[18],E,E,44,[[["self"]],[T]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[17],E,E,44,[[["self"]],[R[19]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[12],E,E,45,[[[U]],[R[16]]]],[11,R[13],E,E,45,[[["self"]],[R[16]]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[18],E,E,45,[[["self"]],[T]]],[11,R[14],E,E,45,[[["self"]],[T]]],[11,R[17],E,E,45,[[["self"]],[R[19]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[12],E,E,46,[[[U]],[R[16]]]],[11,R[13],E,E,46,[[["self"]],[R[16]]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[18],E,E,46,[[["self"]],[T]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[17],E,E,46,[[["self"]],[R[19]]]],[11,"from",R[196],E,47,[[[T]],[T]]],[11,R[12],E,E,47,[[[U]],[R[16]]]],[11,R[13],E,E,47,[[["self"]],[R[16]]]],[11,"into",E,E,47,[[["self"]],[U]]],[11,R[18],E,E,47,[[["self"]],[T]]],[11,R[14],E,E,47,[[["self"]],[T]]],[11,R[17],E,E,47,[[["self"]],[R[19]]]],[11,R[198],R[143],E,23,N],[11,R[197],E,E,23,N],[11,R[198],E,E,24,N],[11,R[197],E,E,24,N],[11,R[198],E,E,25,N],[11,R[197],E,E,25,N],[11,R[198],E,E,26,N],[11,R[197],E,E,26,N],[11,R[198],E,E,28,N],[11,R[197],E,E,28,N],[11,R[198],E,E,29,N],[11,R[197],E,E,29,N],[11,R[198],E,E,30,N],[11,R[197],E,E,30,N],[11,R[198],E,E,31,N],[11,R[197],E,E,31,N],[11,R[199],E,"Gets a reference to a page table through recursive mapping",25,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[200],E,R[201],25,[[["self"],[R[9]]],[R[147]]]],[11,R[199],E,"Temporary map the table",28,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[200],E,"Allocates a page table, temporarily map it, zero it and…",28,[[["self"],[R[9]]],[R[147]]]],[11,R[199],E,"Simply cast pointed frame as PageTable",30,[[["self"],[R[9]]],[R[106],[R[147]]]]],[11,R[200],E,R[201],30,[[["self"],[R[9]]],[R[147]]]],[11,R[202],R[107],E,49,[[["self"]],[R[147],[R[992]]]]],[11,R[202],E,"Temporary map the directory",16,[[["self"]],[R[147],[R[993]]]]],[11,R[202],E,E,17,[[["self"]],[R[147]]]],[11,R[152],R[143],E,50,[[]]],[11,R[152],E,E,51,[[]]],[11,R[182],R[107],E,42,[[],[R[101]]]],[11,R[183],E,E,42,[[],[R[101]]]],[11,R[182],E,E,43,[[],[R[101]]]],[11,R[183],E,E,43,[[],[R[101]]]],[11,R[205],R[193],E,20,[[["self"]],["bool"]]],[11,R[57],E,E,20,[[["self"]],["bool"]]],[11,R[122],E,E,20,[[["self"]],["bool"]]],[11,R[123],E,E,20,[[["self"]],["bool"]]],[11,R[203],E,E,20,[[["self"]],["bool"]]],[11,R[204],E,E,20,[[["self"]],["bool"]]],[11,"DIRTY",E,E,20,[[["self"]],["bool"]]],[11,R[124],E,E,20,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,20,[[["self"]],["bool"]]],[11,R[125],E,E,20,[[["self"]],["bool"]]],[11,R[126],E,E,20,[[["self"]],["bool"]]],[11,R[127],E,E,20,[[["self"]],["bool"]]],[11,R[205],E,E,20,[[],["u32"]]],[11,R[57],E,E,20,[[],["u32"]]],[11,R[122],E,E,20,[[],["u32"]]],[11,R[123],E,E,20,[[],["u32"]]],[11,R[203],E,E,20,[[],["u32"]]],[11,R[204],E,E,20,[[],["u32"]]],[11,"DIRTY",E,E,20,[[],["u32"]]],[11,R[124],E,E,20,[[],["u32"]]],[11,"GLOBAL",E,E,20,[[],["u32"]]],[11,R[125],E,E,20,[[],["u32"]]],[11,R[126],E,E,20,[[],["u32"]]],[11,R[127],E,E,20,[[],["u32"]]],[11,R[205],R[194],E,32,[[["self"]],["bool"]]],[11,R[57],E,E,32,[[["self"]],["bool"]]],[11,R[122],E,E,32,[[["self"]],["bool"]]],[11,R[123],E,E,32,[[["self"]],["bool"]]],[11,R[203],E,E,32,[[["self"]],["bool"]]],[11,R[204],E,E,32,[[["self"]],["bool"]]],[11,"DIRTY",E,E,32,[[["self"]],["bool"]]],[11,R[124],E,E,32,[[["self"]],["bool"]]],[11,"GLOBAL",E,E,32,[[["self"]],["bool"]]],[11,R[125],E,E,32,[[["self"]],["bool"]]],[11,R[126],E,E,32,[[["self"]],["bool"]]],[11,R[127],E,E,32,[[["self"]],["bool"]]],[11,R[205],E,E,32,[[],["u32"]]],[11,R[57],E,E,32,[[],["u32"]]],[11,R[122],E,E,32,[[],["u32"]]],[11,R[123],E,E,32,[[],["u32"]]],[11,R[203],E,E,32,[[],["u32"]]],[11,R[204],E,E,32,[[],["u32"]]],[11,"DIRTY",E,E,32,[[],["u32"]]],[11,R[124],E,E,32,[[],["u32"]]],[11,"GLOBAL",E,E,32,[[],["u32"]]],[11,R[125],E,E,32,[[],["u32"]]],[11,R[126],E,E,32,[[],["u32"]]],[11,R[127],E,E,32,[[],["u32"]]],[11,R[57],R[107],E,18,[[["self"]],["bool"]]],[11,R[122],E,E,18,[[["self"]],["bool"]]],[11,R[57],E,E,18,[[],["u32"]]],[11,R[122],E,E,18,[[],["u32"]]],[11,"fmt",R[192],E,14,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[190],E,10,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[91],E,12,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,11,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[87],E,9,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,8,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[192],E,14,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[193],E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,21,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,22,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[194],E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,33,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,34,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[107],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[195],E,45,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[196],E,47,[[["self"],[R[20]]],[R[16]]]],[11,"eq",R[91],E,12,[[["self"],[R[86]]],["bool"]]],[11,"eq",R[192],E,14,[[["self"],[R[98]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[98]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,"eq",R[193],E,20,[[["self"],[R[105]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[105]]],["bool"]]],[11,"eq",R[194],E,32,[[["self"],[R[105]]],["bool"]]],[11,"ne",E,E,32,[[["self"],[R[105]]],["bool"]]],[11,"eq",R[107],E,18,[[["self"],[R[105]]],["bool"]]],[11,"ne",E,E,18,[[["self"],[R[105]]],["bool"]]],[11,R[60],R[91],E,12,N],[11,R[60],R[192],E,14,N],[11,R[60],E,E,15,N],[11,R[60],R[193],E,20,N],[11,R[60],R[194],E,32,N],[11,R[60],R[107],E,18,N],[11,"cmp",R[192],E,14,[[["self"],[R[98]]],[R[61]]]],[11,"cmp",E,E,15,[[["self"],[R[101]]],[R[61]]]],[11,"cmp",R[193],E,20,[[["self"],[R[105]]],[R[61]]]],[11,"cmp",R[194],E,32,[[["self"],[R[105]]],[R[61]]]],[11,"cmp",R[107],E,18,[[["self"],[R[105]]],[R[61]]]],[11,R[62],R[192],E,14,[[["self"],[R[98]]],[R[83],[R[61]]]]],[11,"lt",E,E,14,[[["self"],[R[98]]],["bool"]]],[11,"le",E,E,14,[[["self"],[R[98]]],["bool"]]],[11,"gt",E,E,14,[[["self"],[R[98]]],["bool"]]],[11,"ge",E,E,14,[[["self"],[R[98]]],["bool"]]],[11,R[62],E,E,15,[[["self"],[R[101]]],[R[83],[R[61]]]]],[11,"lt",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,"le",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,"gt",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,"ge",E,E,15,[[["self"],[R[101]]],["bool"]]],[11,R[62],R[193],E,20,[[["self"],[R[105]]],[R[83],[R[61]]]]],[11,"lt",E,E,20,[[["self"],[R[105]]],["bool"]]],[11,"le",E,E,20,[[["self"],[R[105]]],["bool"]]],[11,"gt",E,E,20,[[["self"],[R[105]]],["bool"]]],[11,"ge",E,E,20,[[["self"],[R[105]]],["bool"]]],[11,R[62],R[194],E,32,[[["self"],[R[105]]],[R[83],[R[61]]]]],[11,"lt",E,E,32,[[["self"],[R[105]]],["bool"]]],[11,"le",E,E,32,[[["self"],[R[105]]],["bool"]]],[11,"gt",E,E,32,[[["self"],[R[105]]],["bool"]]],[11,"ge",E,E,32,[[["self"],[R[105]]],["bool"]]],[11,R[62],R[107],E,18,[[["self"],[R[105]]],[R[83],[R[61]]]]],[11,"lt",E,E,18,[[["self"],[R[105]]],["bool"]]],[11,"le",E,E,18,[[["self"],[R[105]]],["bool"]]],[11,"gt",E,E,18,[[["self"],[R[105]]],["bool"]]],[11,"ge",E,E,18,[[["self"],[R[105]]],["bool"]]],[11,"hash",R[192],E,14,N],[11,"hash",E,E,15,N],[11,"hash",R[193],E,20,N],[11,"hash",R[194],E,32,N],[11,"hash",R[107],E,18,N],[11,"add",R[192],R[206],15,[[["self"],[R[9]]],[R[101]]]],[11,"add",E,R[206],14,[[["self"],[R[9]]],[R[98]]]],[11,"sub",E,R[207],15,[[["self"],[R[9]]],[R[101]]]],[11,"sub",E,R[207],14,[[["self"],[R[9]]],[R[98]]]],[11,"sub",E,R[208],15,[[["self"],[R[101]]],[R[9]]]],[11,"sub",E,R[208],14,[[["self"],[R[98]]],[R[9]]]],[11,"sub",R[193],R[63],20,[[["self"],[R[105]]],[R[105]]]],[11,"sub",R[194],R[63],32,[[["self"],[R[105]]],[R[105]]]],[11,"sub",R[107],R[63],18,[[["self"],[R[105]]],[R[105]]]],[11,R[209],R[192],R[206],15,[[["self"],[R[9]]]]],[11,R[209],E,R[206],14,[[["self"],[R[9]]]]],[11,R[64],E,R[207],15,[[["self"],[R[9]]]]],[11,R[64],E,R[207],14,[[["self"],[R[9]]]]],[11,R[64],R[193],R[65],20,[[["self"],[R[105]]]]],[11,R[64],R[194],R[65],32,[[["self"],[R[105]]]]],[11,R[64],R[107],R[65],18,[[["self"],[R[105]]]]],[11,"not",R[193],R[66],20,[[["self"]],[R[105]]]],[11,"not",R[194],R[66],32,[[["self"]],[R[105]]]],[11,"not",R[107],R[66],18,[[["self"]],[R[105]]]],[11,"bitand",R[193],R[67],20,[[["self"],[R[105]]],[R[105]]]],[11,"bitand",R[194],R[67],32,[[["self"],[R[105]]],[R[105]]]],[11,"bitand",R[107],R[67],18,[[["self"],[R[105]]],[R[105]]]],[11,"bitor",R[193],R[68],20,[[["self"],[R[105]]],[R[105]]]],[11,"bitor",R[194],R[68],32,[[["self"],[R[105]]],[R[105]]]],[11,"bitor",R[107],R[68],18,[[["self"],[R[105]]],[R[105]]]],[11,"bitxor",R[193],R[69],20,[[["self"],[R[105]]],[R[105]]]],[11,"bitxor",R[194],R[69],32,[[["self"],[R[105]]],[R[105]]]],[11,"bitxor",R[107],R[69],18,[[["self"],[R[105]]],[R[105]]]],[11,R[70],R[193],R[71],20,[[["self"],[R[105]]]]],[11,R[70],R[194],R[71],32,[[["self"],[R[105]]]]],[11,R[70],R[107],R[71],18,[[["self"],[R[105]]]]],[11,R[72],R[193],R[73],20,[[["self"],[R[105]]]]],[11,R[72],R[194],R[73],32,[[["self"],[R[105]]]]],[11,R[72],R[107],R[73],18,[[["self"],[R[105]]]]],[11,R[74],R[193],R[75],20,[[["self"],[R[105]]]]],[11,R[74],R[194],R[75],32,[[["self"],[R[105]]]]],[11,R[74],R[107],R[75],18,[[["self"],[R[105]]]]],[11,"deref",R[87],E,5,[[["self"]],[R[210]]]],[11,"deref",E,E,6,[[["self"]],[R[210]]]],[11,"deref",R[143],E,25,N],[11,"deref",E,E,26,N],[11,"deref",E,E,27,[[["self"]],[T]]],[11,"deref",E,E,28,N],[11,"deref",E,E,29,N],[11,"deref",E,E,30,N],[11,"deref",E,E,31,N],[11,R[211],E,E,25,N],[11,R[211],E,E,26,N],[11,R[211],E,E,27,[[["self"]],[T]]],[11,R[211],E,E,28,N],[11,R[211],E,E,29,N],[11,R[211],E,E,30,N],[11,R[211],E,E,31,N],[11,"drop",E,E,27,[[["self"]]]],[11,"drop",E,E,28,[[["self"]]]],[11,"drop",E,E,29,[[["self"]]]],[11,"drop",R[195],E,45,[[["self"]]]],[11,"index",R[143],E,24,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,23,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,25,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,26,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,28,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,29,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,30,[[["self"],[R[9]]],["entry"]]],[11,"index",E,E,31,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,24,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,23,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,25,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,26,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,28,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,29,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,30,[[["self"],[R[9]]],["entry"]]],[11,R[212],E,E,31,[[["self"],[R[9]]],["entry"]]],[11,"extend",R[193],E,20,[[["self"],[T]]]],[11,"extend",R[194],E,32,[[["self"],[T]]]],[11,"extend",R[107],E,18,[[["self"],[T]]]],[11,R[76],R[193],E,20,[[[T]],[R[105]]]],[11,R[76],R[194],E,32,[[[T]],[R[105]]]],[11,R[76],R[107],E,18,[[[T]],[R[105]]]],[11,"from",R[193],E,20,[[[R[105]]],[R[105]]]],[11,"from",R[194],E,32,[[[R[105]]],[R[105]]]],[11,R[281],R[189],R[994],48,[[["self"],["str"]],[R[16],["error"]]]],[11,"fmt",R[193],E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[194],E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[107],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[193],E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[194],E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[107],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[192],E,14,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",E,E,15,[[["self"],[R[20]]],[R[16],["error"]]]],[11,"fmt",R[193],E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[194],E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[107],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[193],E,20,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[194],E,32,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",R[107],E,18,[[["self"],[R[20]]],[R[16]]]],[11,"clone",R[91],E,12,[[["self"]],[R[86]]]],[11,"clone",E,E,11,[[["self"]],[R[210]]]],[11,"clone",R[87],E,9,[[["self"]],[R[213]]]],[11,"clone",E,E,8,[[["self"]],[R[94]]]],[11,"clone",R[192],E,14,[[["self"]],[R[98]]]],[11,"clone",E,E,15,[[["self"]],[R[101]]]],[11,"clone",R[193],E,20,[[["self"]],[R[105]]]],[11,"clone",E,E,21,[[["self"]],["entry"]]],[11,"clone",R[194],E,32,[[["self"]],[R[105]]]],[11,"clone",E,E,33,[[["self"]],["entry"]]],[11,"clone",R[107],E,18,[[["self"]],[R[105]]]],[11,R[77],R[91],E,11,[[],[R[210]]]],[11,R[77],R[107],E,16,[[],[R[153]]]],[11,R[214],R[87],E,5,[[["self"]]]],[11,R[214],E,E,6,[[["self"]]]]],"p":[[3,R[215]],[3,"EndTag"],[3,R[216]],[3,R[217]],[3,R[218]],[3,R[92]],[3,R[93]],[3,R[219]],[3,R[220]],[4,R[221]],[3,R[222]],[3,R[223]],[4,R[224]],[3,R[225]],[3,R[226]],[3,R[227]],[3,R[110]],[3,R[112]],[3,R[103]],[4,R[114]],[3,R[103]],[3,"Entry"],[4,R[118]],[3,R[228]],[3,R[229]],[3,R[230]],[3,R[231]],[3,R[232]],[3,R[233]],[3,R[234]],[3,R[235]],[3,R[236]],[3,R[103]],[3,"Entry"],[4,R[118]],[8,R[237]],[8,R[238]],[8,R[239]],[8,R[240]],[8,R[155]],[8,"Flusher"],[8,R[241]],[3,R[242]],[3,R[935]],[3,R[243]],[3,"Frame"],[3,R[244]],[3,R[245]],[3,"Serial"],[3,R[108]],[3,R[943]],[3,"NoFlush"]]};
searchIndex[R[995]]={"doc":"Shell","i":[[5,"main",R[995],E,N,[[]]],[5,"show_gif",E,"Shows a GIF in a new window, blocking the caller. When a…",N,N],[5,"test_threads",E,"Test function ensuring threads are working properly.",N,[[[R[996]]],[R[996]]]],[5,"test_divide_by_zero",E,"Test function ensuring divide by zero interruption kills…",N,[[]]],[5,"test_page_fault",E,"Test function ensuring pagefaults kills only the current…",N,[[]]],[0,"ps2",E,"PS/2 Keyboard Driver",N,N],[3,"PS2",R[1003],"PS2 keyboard state.",N,N],[12,R[1004],E,"Status Register address",0,N],[12,"data_port",E,"Data Register address",0,N],[12,"event",E,"IRQEvent for the PS/2 keyboard. Triggered each time the…",0,N],[12,"is_capslocked",E,"Flips when the user has toggled the caps lock key. When…",0,N],[12,"is_shift",E,"Set to true if the user is currently holding the shift…",0,N],[3,"LetterKey",E,"A non-control key (lowercase_ascii, uppercase_ascii)",N,N],[12,"lower_case",E,E,1,N],[12,"upper_case",E,E,1,N],[3,"ControlKey",E,"A control key (ctrl, shift, alt, arrows, end, ...)",N,N],[12,"0",E,E,2,N],[3,"KeyEvent",E,"A KeyEvent is the combination of a key and its state",N,N],[12,"key",E,E,3,N],[12,"state",E,E,3,N],[3,R[997],E,"Primary PS2 controller instance on a classical IBM/PC…",N,N],[12,R[85],E,E,4,N],[4,"Key",E,"A key is either a letter key, a control key, or not…",N,N],[13,"Letter",E,E,5,N],[13,"Control",E,E,5,N],[13,"Empty",E,E,5,N],[4,"State",E,"State of a key on the keyboard.",N,N],[13,"Pressed",E,E,6,N],[13,"Released",E,E,6,N],[5,"read_key",E,R[998],N,[[],["char"]]],[5,R[999],E,R[1000],N,[[],[R[83],["char"]]]],[5,"get_next_line",E,"Read key presses until a \\n is detected, and return the…",N,[[[R[996]]],["string"]]],[5,"get_waitable",E,R[1001],N,[[],[R[1002]]]],[7,R[997],E,E,N,N],[11,"ctrl",E,"Create a control key with the given human-readable name.",5,[[["str"]],["key"]]],[11,"letter",E,"Create a unicode key with the given lowercase and…",5,[[["char"],["char"]],["key"]]],[11,"read_key_event",E,"Reads one or more bytes from the port until it matches a…",3,[[["pio",["u8"]]],["keyevent"]]],[11,"handle_control_key",E,"Handle a control key scancode",0,[[["self"],["controlkey"],["state"]]]],[11,"key_to_letter",E,"Gets the letter from the key, accounting for shift and…",0,[[["self"],["letterkey"]],["char"]]],[11,"read_key",E,R[998],0,[[["self"]],["char"]]],[11,R[999],E,R[1000],0,[[["self"]],[R[83],["char"]]]],[11,"event_irq",E,R[1001],0,[[["self"]],[R[1002]]]],[7,"LOUIS3",R[995],"Meme for KFS3",N,N],[7,"LOUIS4",E,"Meme for KFS4",N,N],[7,R[1005],E,E,N,N],[11,"from",R[1003],E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[16]]]],[11,R[13],E,E,0,[[["self"]],[R[16]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[18],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[R[19]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[16]]]],[11,R[13],E,E,1,[[["self"]],[R[16]]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[18],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[R[19]]]],[11,R[268],E,E,1,[[["self"]],[T]]],[11,R[266],E,E,1,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[[U]],[R[16]]]],[11,R[13],E,E,2,[[["self"]],[R[16]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[18],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[R[19]]]],[11,R[268],E,E,2,[[["self"]],[T]]],[11,R[266],E,E,2,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[[U]],[R[16]]]],[11,R[13],E,E,3,[[["self"]],[R[16]]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[18],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[R[19]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[12],E,E,4,[[[U]],[R[16]]]],[11,R[13],E,E,4,[[["self"]],[R[16]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[18],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[R[19]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[12],E,E,5,[[[U]],[R[16]]]],[11,R[13],E,E,5,[[["self"]],[R[16]]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[18],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[R[19]]]],[11,R[268],E,E,5,[[["self"]],[T]]],[11,R[266],E,E,5,N],[11,"from",E,E,6,[[[T]],[T]]],[11,R[12],E,E,6,[[[U]],[R[16]]]],[11,R[13],E,E,6,[[["self"]],[R[16]]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[18],E,E,6,[[["self"]],[T]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[R[19]]]],[11,"fmt",E,E,1,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,2,[[["self"],[R[20]]],[R[16]]]],[11,"fmt",E,E,5,[[["self"],[R[20]]],[R[16]]]],[11,"deref",E,E,4,[[["self"]],["ps2"]]],[11,"clone",E,E,1,[[["self"]],["letterkey"]]],[11,"clone",E,E,2,[[["self"]],["controlkey"]]],[11,"clone",E,E,5,[[["self"]],["key"]]],[11,R[214],E,E,4,[[["self"]]]]],"p":[[3,"PS2"],[3,"LetterKey"],[3,"ControlKey"],[3,"KeyEvent"],[3,R[997]],[4,"Key"],[4,"State"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);