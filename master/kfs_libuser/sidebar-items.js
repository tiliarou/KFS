initSidebarItems({"fn":[["eh_personality","The exception handling personality function for use in the bootstrap."],["main",""],["panic_fmt","Function called on `panic!` invocation. Prints the panic information to the kernel debug logger, and exits the process."],["rust_oom","OOM handler. Causes a panic."],["start","Executable entrypoint. Zeroes out the BSS, calls main, and finally exits the process."]],"macro":[["capabilities","Define the capabilities array in the .kernel_caps section. Has the following syntax:"],["object","Auto derive Object."]],"mod":[["__rg_allocator_abi",""],["ahci","Interface to the AHCI driver service"],["allocator","Heap allocator."],["caps","Kernel Capabilities declaration"],["error","Error handling"],["io","The IO interface"],["ipc","Core IPC Routines"],["log_impl","Implementation for the log crate"],["mem","Memory"],["sm","Service Manager"],["syscalls","Syscall Wrappers"],["terminal","Terminal rendering APIs"],["types","Core kernel types."],["vi","Vi Compositor service"],["window","Window creation and drawing APIs"],["zero_box","A module that allocates zeroed types on the heap without copying them from the stack first."]],"static":[["ALLOCATOR","Global allocator. Every implicit allocation in the rust liballoc library (for instance for Vecs, Arcs, etc...) are allocated with this allocator."]],"trait":[["Termination","A trait for implementing arbitrary return types in the `main` function."]]});